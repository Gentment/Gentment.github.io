<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LiuxiaoKun</title>
  
  <subtitle>My Awesome Site</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://LiuZiQiao.github.io/"/>
  <updated>2018-10-08T23:50:24.355Z</updated>
  <id>https://LiuZiQiao.github.io/</id>
  
  <author>
    <name>LiuXiaoKun</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>对称二叉树判断</title>
    <link href="https://LiuZiQiao.github.io/2018/10/09/%E5%AF%B9%E7%A7%B0%E4%BA%8C%E5%8F%89%E6%A0%91%E5%88%A4%E6%96%AD/"/>
    <id>https://LiuZiQiao.github.io/2018/10/09/对称二叉树判断/</id>
    <published>2018-10-08T23:40:14.000Z</published>
    <updated>2018-10-08T23:50:24.355Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><a id="more"></a><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>请实现一个函数，用来判断一颗二叉树是不是对称的。注意，如果一个二叉树同此二叉树的镜像是同样的，定义其为对称的。</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p><strong>思路：首先判断其根结点是否为空，然后判断左右结点是否对称，也就是左右结点是不是同时为空并且值相等</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">struct TreeNode &#123;</span></span><br><span class="line"><span class="comment">    int val;</span></span><br><span class="line"><span class="comment">    struct TreeNode *left;</span></span><br><span class="line"><span class="comment">    struct TreeNode *right;</span></span><br><span class="line"><span class="comment">    TreeNode(int x) :</span></span><br><span class="line"><span class="comment">            val(x), left(NULL), right(NULL) &#123;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isSymmetrical</span><span class="params">(TreeNode* pRoot)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(pRoot == <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">bool</span> res = isTreeSymmetrical(pRoot-&gt;left,pRoot-&gt;right);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isTreeSymmetrical</span><span class="params">(TreeNode* pHead1,TreeNode* pHead2)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(pHead1 == <span class="literal">NULL</span> &amp;&amp; pHead2 == <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(pHead1 == <span class="literal">NULL</span> || pHead2 == <span class="literal">NULL</span>) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>((pHead1-&gt;val == pHead2-&gt;val))</span><br><span class="line">        &#123;</span><br><span class="line">             <span class="keyword">return</span> isTreeSymmetrical(pHead1-&gt;left,pHead2-&gt;right)&amp;&amp;isTreeSymmetrical(pHead1-&gt;right,pHead2-&gt;left);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;\assets\js\APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h3&gt;&lt;p&gt;请实
      
    
    </summary>
    
      <category term="每日一题" scheme="https://LiuZiQiao.github.io/categories/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
    
      <category term="二叉树" scheme="https://LiuZiQiao.github.io/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>TwoArrayIntesection</title>
    <link href="https://LiuZiQiao.github.io/2018/10/07/%20IntersectionofTwoArrays/"/>
    <id>https://LiuZiQiao.github.io/2018/10/07/ IntersectionofTwoArrays/</id>
    <published>2018-10-07T15:39:46.000Z</published>
    <updated>2018-10-08T23:50:38.683Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><a id="more"></a><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>Given two arrays, write a function to compute their intersection.</p><p>Example 1:</p><p>Input: nums1 = [1,2,2,1], nums2 = [2,2]<br>Output: [2]<br>Example 2:</p><p>Input: nums1 = [4,9,5], nums2 = [9,4,9,8,4]<br>Output: [9,4]<br>Note:</p><p>Each element in the result must be unique.<br>The result can be in any order.</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] intersection(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span>[] nums2) &#123;</span><br><span class="line">    Set&lt;Integer&gt; set1 = <span class="keyword">new</span> HashSet();</span><br><span class="line">Set&lt;Integer&gt; set2 = <span class="keyword">new</span> HashSet();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums1.length; i++) &#123;</span><br><span class="line">set1.add(nums1[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; nums2.length; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (set1.contains(nums2[j])) &#123;</span><br><span class="line">set2.add(nums2[j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span>[] num = <span class="keyword">new</span> <span class="keyword">int</span>[set2.size()];</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (Integer n : set2) &#123;</span><br><span class="line">num[i] = n;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;\assets\js\APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h3&gt;&lt;p&gt;Gi
      
    
    </summary>
    
      <category term="每日一题" scheme="https://LiuZiQiao.github.io/categories/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
    
      <category term="Set" scheme="https://LiuZiQiao.github.io/tags/Set/"/>
    
  </entry>
  
  <entry>
    <title>Sum of the first n consecutive integers</title>
    <link href="https://LiuZiQiao.github.io/2018/10/06/%E6%B1%82%E5%89%8Dn%E4%B8%AA%E6%95%B0%E7%9A%84%E5%92%8C/"/>
    <id>https://LiuZiQiao.github.io/2018/10/06/求前n个数的和/</id>
    <published>2018-10-06T07:52:03.000Z</published>
    <updated>2018-10-06T07:58:35.173Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><a id="more"></a><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>For 1 + 2 + 3 +… +n, you cannot use the multiplication/division, for, while, if, else, switch, case and other keywords and conditional judgment statement (A? B, C).</p><p>该题翻译过来就是求1+2+3+…+n，要求不能使用乘除法、for、while、if、else、switch、case等关键字及条件判断语句（A?B:C）。以下是给出的C解决方案</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>**思路：让其从最后一个数开始相加，直到n为0，则加完<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//辅助函数求和保存在i中</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Sum</span><span class="params">(<span class="keyword">int</span> n )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">i = i + n;</span><br><span class="line">n--;</span><br><span class="line"><span class="keyword">return</span> Sum_Solution(n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//函数入口</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">Sum_Solution</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> n==<span class="number">0</span> ? i : Sum(n);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;\assets\js\APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h3&gt;&lt;p&gt;Fo
      
    
    </summary>
    
      <category term="剑指offer" scheme="https://LiuZiQiao.github.io/categories/%E5%89%91%E6%8C%87offer/"/>
    
    
  </entry>
  
  <entry>
    <title>链表面试题</title>
    <link href="https://LiuZiQiao.github.io/2018/10/05/%E9%93%BE%E8%A1%A8%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>https://LiuZiQiao.github.io/2018/10/05/链表面试题/</id>
    <published>2018-10-05T04:26:26.000Z</published>
    <updated>2018-10-05T05:02:12.786Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><a id="more"></a><p>关于链表已经学了有一段时间了，今天抽空进行了整理，列出来常见的有关链表的面试题，以下想法如有瑕疵望批评指出，希望能给初学者带来一点参考和价值</p><h3 id="从尾到头打印单链表"><a href="#从尾到头打印单链表" class="headerlink" title="从尾到头打印单链表"></a>从尾到头打印单链表</h3><h4 id="递归打印"><a href="#递归打印" class="headerlink" title="递归打印"></a>递归打印</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1、从尾到头打印单链表 递归</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ListReversePrint</span><span class="params">(ListNode *Node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (Node == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ListReversePrint(Node-&gt;next);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d--&gt;"</span>,Node-&gt;data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="非递归打印"><a href="#非递归打印" class="headerlink" title="非递归打印"></a>非递归打印</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ListReveresePrint2</span><span class="params">(ListNode *Node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ListNode *end = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">while</span> (end != Node)</span><br><span class="line">&#123;</span><br><span class="line">ListNode *cur = Node;</span><br><span class="line"><span class="keyword">while</span> (cur-&gt;next != end)</span><br><span class="line">&#123;</span><br><span class="line">cur = cur-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d--&gt;"</span>,cur-&gt;data);</span><br><span class="line">end = cur;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删除一个无头单链表的非尾结点（不能遍历链表）"><a href="#删除一个无头单链表的非尾结点（不能遍历链表）" class="headerlink" title="删除一个无头单链表的非尾结点（不能遍历链表）"></a>删除一个无头单链表的非尾结点（不能遍历链表）</h3><h4 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//2. 删除一个无头单链表的非尾结点（不能遍历链表）</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ListDelNotFirst</span><span class="params">(ListNode **Node ,ListNode *pos)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ListNode *del;</span><br><span class="line"><span class="keyword">if</span> (Node == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//pos 位置为第一个结点时，修改指针</span></span><br><span class="line"><span class="keyword">if</span> (pos == *Node)</span><br><span class="line">&#123;</span><br><span class="line">*Node = pos-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(pos);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// pos 位置不是第一个结点时也不是最后一个结点时</span></span><br><span class="line">pos-&gt;data = pos-&gt;next-&gt;data;   <span class="comment">//先修改data的值</span></span><br><span class="line">del = pos-&gt;next;     <span class="comment">//将pos-&gt;next作为要删除的结点</span></span><br><span class="line">pos-&gt;next = del-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(del);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TestListDelNotFirst</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ListNode *<span class="built_in">list</span> = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">ListPushBack(&amp;<span class="built_in">list</span>,<span class="number">1</span>);</span><br><span class="line">ListPushBack(&amp;<span class="built_in">list</span>,<span class="number">2</span>);</span><br><span class="line">ListPushBack(&amp;<span class="built_in">list</span>,<span class="number">3</span>);</span><br><span class="line">ListPushBack(&amp;<span class="built_in">list</span>,<span class="number">4</span>);</span><br><span class="line">ListPushBack(&amp;<span class="built_in">list</span>,<span class="number">5</span>);</span><br><span class="line">ListPushBack(&amp;<span class="built_in">list</span>,<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">ListPrint(<span class="built_in">list</span>);</span><br><span class="line"></span><br><span class="line">ListDelNotFirst(<span class="built_in">list</span>,<span class="built_in">list</span>);</span><br><span class="line"></span><br><span class="line">ListPrint(<span class="built_in">list</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="在无头单链表的一个结点前插入一个结点（不能遍历链表）"><a href="#在无头单链表的一个结点前插入一个结点（不能遍历链表）" class="headerlink" title="在无头单链表的一个结点前插入一个结点（不能遍历链表）"></a>在无头单链表的一个结点前插入一个结点（不能遍历链表）</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//3.在无头单链表的一个结点前插入一个结点（不能遍历链表）</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ListInsertBefore</span><span class="params">(ListNode **Node ,ListNode *pos ,DataType data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ListNode *newNode;</span><br><span class="line"><span class="keyword">if</span> (*Node == <span class="literal">NULL</span> &amp;&amp; pos == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//插入的结点是在第一个结点上</span></span><br><span class="line"><span class="keyword">if</span> (pos == *Node)</span><br><span class="line">&#123;</span><br><span class="line">ListNode *newNode = CreateNode(data);</span><br><span class="line">newNode-&gt;next = *Node;</span><br><span class="line">*Node = newNode;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//插入的结点不是第一个结点时</span></span><br><span class="line">newNode = CreateNode(pos-&gt;data);</span><br><span class="line">newNode-&gt;next = pos-&gt;next;  <span class="comment">//后插</span></span><br><span class="line">pos-&gt;next = newNode;</span><br><span class="line">pos-&gt;data = data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="逆置-反转单链表"><a href="#逆置-反转单链表" class="headerlink" title="逆置/反转单链表"></a>逆置/反转单链表</h3><h4 id="思路一："><a href="#思路一：" class="headerlink" title="思路一："></a>思路一：</h4><p>从第二个结点开始，将其删除，人挪活插在第一个结点处，直到链表结束</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">listReverse</span><span class="params">(ListNode **Node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (Node == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (*Node == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//只有一个结点</span></span><br><span class="line"><span class="keyword">if</span> ((*Node)-&gt;next == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//至少两个结点</span></span><br><span class="line">ListNode *cur = *Node;</span><br><span class="line"><span class="keyword">while</span> (cur-&gt;next != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">ListNode *rm = cur-&gt;next;</span><br><span class="line">cur-&gt;next = rm-&gt;next;</span><br><span class="line">rm-&gt;next = *Node;</span><br><span class="line">*Node = rm;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="思路二："><a href="#思路二：" class="headerlink" title="思路二："></a>思路二：</h4><p>改变每个结点的指针指向从而逆置<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">listReverseRePoint</span><span class="params">(ListNode **Node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (Node == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (*Node == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ((*Node)-&gt;next == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ListNode *pre = *Node;</span><br><span class="line">ListNode *cur = (*Node)-&gt;next;</span><br><span class="line">pre-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (cur != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">ListNode *temp = cur-&gt;next;</span><br><span class="line">cur-&gt;next = pre;</span><br><span class="line">pre =cur;</span><br><span class="line">cur = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">*Node = pre;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="找出两个链表里相同数据"><a href="#找出两个链表里相同数据" class="headerlink" title="找出两个链表里相同数据"></a>找出两个链表里相同数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">// 5.找出两个链表里相同数据</span><br><span class="line">void ListIntersection(ListNode *list1,ListNode *list2)</span><br><span class="line">&#123;</span><br><span class="line">ListNode *head1 = list1;</span><br><span class="line">ListNode *head2 = list2;</span><br><span class="line"></span><br><span class="line">DataType data;</span><br><span class="line"></span><br><span class="line">if (head1 ==NULL &amp;&amp; head2 == NULL)</span><br><span class="line">&#123;</span><br><span class="line">return ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">while (head1 != NULL &amp;&amp; head2 != NULL)</span><br><span class="line">&#123;</span><br><span class="line">if (head1-&gt;data &lt; head2-&gt;data)</span><br><span class="line">&#123;</span><br><span class="line">head1 = head1-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"> if (head1-&gt;data &gt; head2-&gt;data)</span><br><span class="line">&#123;</span><br><span class="line">head2 = head2-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if (head1-&gt;data == head2-&gt;data)</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;%d &quot;,head1-&gt;data);</span><br><span class="line">data = head1-&gt;data;</span><br><span class="line"></span><br><span class="line">while (head2 != NULL &amp;&amp; data == head2-&gt;data  )</span><br><span class="line">&#123;</span><br><span class="line">head2 = head2-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">while (head1 != NULL &amp;&amp; data == head1-&gt;data )</span><br><span class="line">&#123;</span><br><span class="line">head1 = head1-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TestListInterstion</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ListNode *list1 = <span class="literal">NULL</span>;</span><br><span class="line">ListNode *list2 = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">ListPushBack(&amp;list1,<span class="number">1</span>);</span><br><span class="line">ListPushBack(&amp;list1,<span class="number">1</span>);</span><br><span class="line">ListPushBack(&amp;list1,<span class="number">3</span>);</span><br><span class="line">ListPushBack(&amp;list1,<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">ListPushBack(&amp;list2,<span class="number">2</span>);</span><br><span class="line">ListPushBack(&amp;list2,<span class="number">2</span>);</span><br><span class="line">ListPushBack(&amp;list2,<span class="number">4</span>);</span><br><span class="line">ListPushBack(&amp;list2,<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">ListIntersection(list1,list2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单链表实现约瑟夫环"><a href="#单链表实现约瑟夫环" class="headerlink" title="单链表实现约瑟夫环"></a>单链表实现约瑟夫环</h3><h4 id="核心代码-1"><a href="#核心代码-1" class="headerlink" title="核心代码"></a>核心代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//6.单链表实现约瑟夫环</span></span><br><span class="line"><span class="function">ListNode* <span class="title">ListJosephCircle</span><span class="params">(ListNode *<span class="built_in">list</span>,DataType k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//第一步，变成环</span></span><br><span class="line">ListNode *tail = <span class="built_in">list</span>;</span><br><span class="line">ListNode *cur = <span class="built_in">list</span>;</span><br><span class="line">ListNode *pre = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">int</span> i =<span class="number">0</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">list</span> == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="keyword">while</span> (tail-&gt;next != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">tail = tail-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">tail-&gt;next = <span class="built_in">list</span>;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="comment">//第二步，找到第k个数</span></span><br><span class="line"><span class="keyword">while</span> ( cur-&gt;next != cur)</span><br><span class="line">&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line">        <span class="comment">//1 2 3 4 5 6 7 8 </span></span><br><span class="line"><span class="keyword">while</span> (--k)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">pre = cur;  <span class="comment">//记录剔除结点的前一个结点</span></span><br><span class="line">cur = cur-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;k;i++)</span><br><span class="line">&#123;</span><br><span class="line">pre = cur;  <span class="comment">//记录剔除结点的前一个结点</span></span><br><span class="line">cur = cur-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pre-&gt;next =cur-&gt;next;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"淘汰：%d\n"</span>,cur-&gt;data);</span><br><span class="line"><span class="built_in">free</span>(cur);</span><br><span class="line"></span><br><span class="line">cur = pre-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">cur-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> cur;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试-2"><a href="#测试-2" class="headerlink" title="测试"></a>测试</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TestListJosephCircle</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ListNode *list1 = <span class="literal">NULL</span>;</span><br><span class="line">ListNode *re;</span><br><span class="line">ListPushBack(&amp;list1,<span class="number">1</span>);</span><br><span class="line">ListPushBack(&amp;list1,<span class="number">2</span>);</span><br><span class="line">ListPushBack(&amp;list1,<span class="number">3</span>);</span><br><span class="line">ListPushBack(&amp;list1,<span class="number">4</span>);</span><br><span class="line">ListPushBack(&amp;list1,<span class="number">5</span>);</span><br><span class="line">ListPushBack(&amp;list1,<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">ListPrint(list1);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">re = ListJosephCircle(list1,<span class="number">3</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,re-&gt;data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="合并两个有序的链表，合并后依然有序"><a href="#合并两个有序的链表，合并后依然有序" class="headerlink" title="合并两个有序的链表，合并后依然有序"></a>合并两个有序的链表，合并后依然有序</h3><h4 id="具体代码"><a href="#具体代码" class="headerlink" title="具体代码"></a>具体代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//7.合并两个有序的链表，合并后依然有序</span></span><br><span class="line"><span class="function">ListNode *<span class="title">ListMerge</span><span class="params">(ListNode *list1,ListNode *list2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ListNode *cur1 = list1;</span><br><span class="line">ListNode *cur2 = list2;</span><br><span class="line">ListNode *result = <span class="literal">NULL</span>;<span class="comment">//结果链表</span></span><br><span class="line">ListNode *tail = <span class="literal">NULL</span>; <span class="comment">//结果链表中的最后一个结点，方便尾插</span></span><br><span class="line">ListNode *next = <span class="literal">NULL</span>;<span class="comment">//保存遍历过程中的下一个结点</span></span><br><span class="line">ListNode *node;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (cur1 != <span class="literal">NULL</span> &amp;&amp; cur2 != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (cur1-&gt;data &lt;= cur2-&gt;data)</span><br><span class="line">&#123;</span><br><span class="line">node = cur1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">node =cur2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">next = node-&gt;next;</span><br><span class="line"><span class="keyword">if</span> (result != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">tail-&gt;next = node;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">result = node;</span><br><span class="line">&#125;</span><br><span class="line">node-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">tail = node;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (node == cur1)</span><br><span class="line">&#123;</span><br><span class="line">cur1 = next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">cur2 = next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//一个链表空了</span></span><br><span class="line"><span class="keyword">if</span> (cur1 == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">tail-&gt;next =cur2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (cur2 == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">tail-&gt;next =cur1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试-3"><a href="#测试-3" class="headerlink" title="测试"></a>测试</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TestMerge</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ListNode *list1 = <span class="literal">NULL</span>;</span><br><span class="line">ListNode *list2 = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">ListNode *result = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">ListPushBack(&amp;list1,<span class="number">1</span>);</span><br><span class="line">ListPushBack(&amp;list1,<span class="number">2</span>);</span><br><span class="line">ListPushBack(&amp;list1,<span class="number">3</span>);</span><br><span class="line">ListPushBack(&amp;list1,<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">ListPushBack(&amp;list2,<span class="number">1</span>);</span><br><span class="line">ListPushBack(&amp;list2,<span class="number">2</span>);</span><br><span class="line">ListPushBack(&amp;list2,<span class="number">3</span>);</span><br><span class="line">ListPushBack(&amp;list2,<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">result = ListMerge(list1,list2);</span><br><span class="line">ListPrint(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="查找单链表的中间结点，要求只能遍历一次链表"><a href="#查找单链表的中间结点，要求只能遍历一次链表" class="headerlink" title="查找单链表的中间结点，要求只能遍历一次链表"></a>查找单链表的中间结点，要求只能遍历一次链表</h3><p><strong>思路：定义快慢指针，当快指针走完时，慢指针刚好是在中间位置，好比是两人赛跑，跑的快点人的速度是慢的人的二倍</strong></p><h4 id="具体代码-1"><a href="#具体代码-1" class="headerlink" title="具体代码"></a>具体代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//8.查找单链表的中间结点，要求只能遍历一次链表</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ListFindMidNode</span><span class="params">(ListNode *<span class="built_in">list</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ListNode *fast = <span class="built_in">list</span>;</span><br><span class="line">ListNode *slow = <span class="built_in">list</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (fast != <span class="literal">NULL</span> &amp;&amp; fast-&gt;next != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">fast = fast-&gt;next;</span><br><span class="line"><span class="keyword">if</span> (fast == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">fast = fast-&gt;next;</span><br><span class="line"><span class="keyword">if</span> (fast == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">slow = slow-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,slow-&gt;data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试-4"><a href="#测试-4" class="headerlink" title="测试"></a>测试</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TestFindMid</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ListNode *<span class="built_in">list</span> = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">ListPushBack(&amp;<span class="built_in">list</span>,<span class="number">1</span>);</span><br><span class="line">ListPushBack(&amp;<span class="built_in">list</span>,<span class="number">2</span>);</span><br><span class="line">ListPushBack(&amp;<span class="built_in">list</span>,<span class="number">3</span>);</span><br><span class="line">ListPushBack(&amp;<span class="built_in">list</span>,<span class="number">4</span>);</span><br><span class="line">ListPushBack(&amp;<span class="built_in">list</span>,<span class="number">5</span>);</span><br><span class="line">ListPushBack(&amp;<span class="built_in">list</span>,<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">ListFindMidNode(<span class="built_in">list</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="查找单链表中的倒数第K个结点，要求只能遍历一次链表"><a href="#查找单链表中的倒数第K个结点，要求只能遍历一次链表" class="headerlink" title="查找单链表中的倒数第K个结点，要求只能遍历一次链表"></a>查找单链表中的倒数第K个结点，要求只能遍历一次链表</h3><p><strong>思路：定义快慢指针，快指针先走k步，满指针再开始走，快指针走完的时候就是慢指针走到倒数第k个结点处</strong></p><h4 id="具体代码-2"><a href="#具体代码-2" class="headerlink" title="具体代码"></a>具体代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//9.查找单链表中的倒数第K个结点，要求只能遍历一次链表</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ListFindTailK</span><span class="params">(ListNode *<span class="built_in">list</span>,DataType k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ListNode *fast = <span class="built_in">list</span>;</span><br><span class="line">ListNode *slow = <span class="built_in">list</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (k--)</span><br><span class="line">&#123;</span><br><span class="line">fast = fast-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (fast != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">fast = fast-&gt;next;</span><br><span class="line">slow = slow-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,slow-&gt;data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试-5"><a href="#测试-5" class="headerlink" title="测试"></a>测试</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TestFindTailK</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ListNode *<span class="built_in">list</span> = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">ListPushBack(&amp;<span class="built_in">list</span>,<span class="number">1</span>);</span><br><span class="line">ListPushBack(&amp;<span class="built_in">list</span>,<span class="number">2</span>);</span><br><span class="line">ListPushBack(&amp;<span class="built_in">list</span>,<span class="number">3</span>);</span><br><span class="line">ListPushBack(&amp;<span class="built_in">list</span>,<span class="number">4</span>);</span><br><span class="line">ListPushBack(&amp;<span class="built_in">list</span>,<span class="number">5</span>);</span><br><span class="line">ListPushBack(&amp;<span class="built_in">list</span>,<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">ListFindTailK(<span class="built_in">list</span>,<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删除单链表中的倒数第K个结点"><a href="#删除单链表中的倒数第K个结点" class="headerlink" title="删除单链表中的倒数第K个结点"></a>删除单链表中的倒数第K个结点</h3><p><strong>思路：同查找倒数第k个结点一样，我们定义快慢指针进行异步，还需要定义一个pre来记录要删除结点的先驱，删除后需要指向被删除的下一个</strong></p><h4 id="具体代码-3"><a href="#具体代码-3" class="headerlink" title="具体代码"></a>具体代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//10.删除单链表中的倒数第K个结点</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ListDelTailK</span><span class="params">(ListNode *<span class="built_in">list</span>, DataType k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ListNode *fast = <span class="built_in">list</span>;</span><br><span class="line">ListNode *slow = <span class="built_in">list</span>;</span><br><span class="line">ListNode *pre = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (k--)</span><br><span class="line">&#123;</span><br><span class="line">fast = fast-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (fast != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">pre = slow;</span><br><span class="line">fast = fast-&gt;next;</span><br><span class="line">slow = slow-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">pre-&gt;next = slow-&gt;next;</span><br><span class="line"></span><br><span class="line"><span class="built_in">free</span>(slow);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试-6"><a href="#测试-6" class="headerlink" title="测试"></a>测试</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TestDelTailK</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ListNode *<span class="built_in">list</span> = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">ListPushBack(&amp;<span class="built_in">list</span>,<span class="number">1</span>);</span><br><span class="line">ListPushBack(&amp;<span class="built_in">list</span>,<span class="number">2</span>);</span><br><span class="line">ListPushBack(&amp;<span class="built_in">list</span>,<span class="number">3</span>);</span><br><span class="line">ListPushBack(&amp;<span class="built_in">list</span>,<span class="number">4</span>);</span><br><span class="line">ListPushBack(&amp;<span class="built_in">list</span>,<span class="number">5</span>);</span><br><span class="line">ListPushBack(&amp;<span class="built_in">list</span>,<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">ListPrint(<span class="built_in">list</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n删除倒数第%d个结点\n"</span>,<span class="number">3</span>);</span><br><span class="line">ListDelTailK(<span class="built_in">list</span>,<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"> ListDelNotFirst(<span class="built_in">list</span>,<span class="built_in">list</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ListPrint(<span class="built_in">list</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;\assets\js\APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;关于链表已经学了有一段时间了，今天抽空进行了整理，列出来常见的有关链表的面试题，以下想法如有瑕疵望批评指出，希望能给初学者带来一点参考和价
      
    
    </summary>
    
      <category term="数据结构" scheme="https://LiuZiQiao.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="链表" scheme="https://LiuZiQiao.github.io/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>链表基本操作</title>
    <link href="https://LiuZiQiao.github.io/2018/10/05/%E9%93%BE%E8%A1%A8%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    <id>https://LiuZiQiao.github.io/2018/10/05/链表基本操作/</id>
    <published>2018-10-05T04:26:04.000Z</published>
    <updated>2018-10-05T05:56:19.176Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><a id="more"></a><p>学习链表有段时间了，今天给大家整理了有关链表的基本操作，例如链表的创建、增、删、查等基本操作</p><h3 id="结构体定义"><a href="#结构体定义" class="headerlink" title="结构体定义"></a>结构体定义</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> DataType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">DataType data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125; ListNode;</span><br></pre></td></tr></table></figure><h3 id="头文件的定义"><a href="#头文件的定义" class="headerlink" title="头文件的定义"></a>头文件的定义</h3><p>其中包含了面试题的头文件<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ListInit</span><span class="params">(ListNode **Node)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ListDestroy</span><span class="params">(ListNode **Node)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ListPushFront</span><span class="params">(ListNode **Node,DataType data)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ListPushBack</span><span class="params">(ListNode **Node,DataType data)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ListPopFront</span><span class="params">(ListNode **Node)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LIstPopBack</span><span class="params">(ListNode **Node)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">ListNode* <span class="title">ListFind</span><span class="params">(ListNode *Node , DataType data)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ListInsert</span><span class="params">(ListNode **Node,ListNode *pos,DataType data)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ListDelete</span><span class="params">(ListNode **Node,ListNode *pos)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除一个无头单链表的非尾结点（不能遍历链表）</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ListDelNotFirst</span><span class="params">(ListNode **Node ,ListNode *pos)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//递归写法</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ListReversePrint</span><span class="params">(ListNode *Node)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ListReveresePrint2</span><span class="params">(ListNode *Node)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ListPrint</span><span class="params">(ListNode *Node)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ListIntersection</span><span class="params">(ListNode *list1,ListNode *list2)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TestListInterstion</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">ListNode* <span class="title">ListJosephCircle</span><span class="params">(ListNode *<span class="built_in">list</span>,DataType k)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TestListJosephCircle</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">ListNode *<span class="title">ListMerge</span><span class="params">(ListNode *list1,ListNode *list2)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TestMerge</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ListFindMidNode</span><span class="params">(ListNode *<span class="built_in">list</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TestFindMid</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ListFindTailK</span><span class="params">(ListNode *<span class="built_in">list</span>,DataType k)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TestFindTailK</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ListDelTailK</span><span class="params">(ListNode *<span class="built_in">list</span>, DataType k)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TestDelTailK</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure></p><h3 id="链表的具体基本操作-文件名-List-c"><a href="#链表的具体基本操作-文件名-List-c" class="headerlink" title="链表的具体基本操作 文件名(List.c)"></a>链表的具体基本操作 文件名(List.c)</h3><h4 id="链表的初始化及销毁"><a href="#链表的初始化及销毁" class="headerlink" title="链表的初始化及销毁"></a>链表的初始化及销毁</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"List.h"</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ListInit</span><span class="params">(ListNode **Node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(Node != <span class="literal">NULL</span>);</span><br><span class="line">*Node = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ListDestroy</span><span class="params">(ListNode **Node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">*Node = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="链表结点的创建"><a href="#链表结点的创建" class="headerlink" title="链表结点的创建"></a>链表结点的创建</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> ListNode * <span class="title">CreateNode</span><span class="params">(DataType data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ListNode *newNode = (ListNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ListNode));</span><br><span class="line">assert(newNode);</span><br><span class="line">newNode-&gt;data = data;</span><br><span class="line">newNode-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> newNode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="头插法"><a href="#头插法" class="headerlink" title="头插法"></a>头插法</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//头插</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ListPushFront</span><span class="params">(ListNode **Node,DataType data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//assert(Node != NULL);</span></span><br><span class="line"></span><br><span class="line">ListNode *newNode = CreateNode(data); <span class="comment">// *newNode 用来存储新结点的地址</span></span><br><span class="line">newNode-&gt;next = *Node; <span class="comment">// 把头结点的地址赋给新结点 </span></span><br><span class="line"></span><br><span class="line">*Node = newNode;<span class="comment">// 把新结点的地址赋给头结点 （ *Node用来存储下一个结点的地址）</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="尾插法"><a href="#尾插法" class="headerlink" title="尾插法"></a>尾插法</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//尾插</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ListPushBack</span><span class="params">(ListNode **Node,DataType data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ListNode *newNode = CreateNode(data);</span><br><span class="line"></span><br><span class="line">ListNode *cur = *Node;<span class="comment">//把头结点地址赋给cur</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (*Node == <span class="literal">NULL</span>)<span class="comment">//判断头结点是否为空，如果为空，将新的结点赋给头结点（如果是空链表）</span></span><br><span class="line">&#123;</span><br><span class="line">*Node = newNode;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (cur-&gt;next !=<span class="literal">NULL</span>)<span class="comment">//如果头结点不为空，则将判断头结点指向下一个结点以及后面的结点是否为空</span></span><br><span class="line">&#123;<span class="comment">// 如果有空结点，则将赋给当前cur，</span></span><br><span class="line">cur = cur-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">cur-&gt;next = newNode;<span class="comment">//将新的结点地址赋给当前的下一结点</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="头结点的删除"><a href="#头结点的删除" class="headerlink" title="头结点的删除"></a>头结点的删除</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ListPopFront</span><span class="params">(ListNode **Node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//assert(Node != NULL);</span></span><br><span class="line"><span class="comment">//assert(*Node != NULL);</span></span><br><span class="line"></span><br><span class="line">ListNode *del = *Node;<span class="comment">// 将头结点的地址del，然后指向下一个结点并赋给Node，然后释放del（头结点存储在del中）</span></span><br><span class="line"></span><br><span class="line">*Node = del-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(del);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="尾结点的删除"><a href="#尾结点的删除" class="headerlink" title="尾结点的删除"></a>尾结点的删除</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ListPopBack</span><span class="params">(ListNode **Node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">/*ListNode *del = *Node ;</span></span><br><span class="line"><span class="comment">while (del-&gt;next != NULL)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">del = del-&gt;next;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*Node = del-&gt;next; </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">free(del);*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ListNode *del;</span><br><span class="line">ListNode *cur = *Node;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (cur-&gt;next-&gt;next != <span class="literal">NULL</span>)<span class="comment">// cur-&gt;next-&gt;next :头指针指向头结点，然后指向下一个结点</span></span><br><span class="line">&#123;<span class="comment">// 判断并找到最后一个结点的地址，赋给del</span></span><br><span class="line">cur = cur-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">del = cur-&gt;next;</span><br><span class="line">cur-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"><span class="built_in">free</span>(del);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查找</span></span><br><span class="line"><span class="function">ListNode* <span class="title">ListFind</span><span class="params">(ListNode *Node , DataType data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ListNode *cur;</span><br><span class="line"><span class="keyword">for</span> (cur = Node;cur != <span class="literal">NULL</span>;cur=cur-&gt;next)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (data == cur-&gt;data)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> cur;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="结点前插入"><a href="#结点前插入" class="headerlink" title="结点前插入"></a>结点前插入</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在某结点前插入结点</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ListInsert</span><span class="params">(ListNode **Node,ListNode *pos,DataType data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ListNode *cur = *Node;</span><br><span class="line">ListNode *newNode;</span><br><span class="line"><span class="keyword">if</span> (*Node == pos)</span><br><span class="line">&#123;</span><br><span class="line">ListPopFront(Node);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (cur-&gt;next != pos)</span><br><span class="line">&#123;</span><br><span class="line">cur = cur-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">newNode = CreateNode(data);</span><br><span class="line">newNode-&gt;next = cur-&gt;next;</span><br><span class="line">cur-&gt;next =newNode;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="删除指定结点"><a href="#删除指定结点" class="headerlink" title="删除指定结点"></a>删除指定结点</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除指定结点</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ListDelete</span><span class="params">(ListNode **Node,ListNode *pos)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ListNode *cur = *Node;</span><br><span class="line"><span class="keyword">if</span> (*Node == pos)</span><br><span class="line">&#123;</span><br><span class="line">ListPopFront(Node);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (cur-&gt;next != pos)</span><br><span class="line">&#123;</span><br><span class="line">cur = cur-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cur-&gt;next = pos-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(pos);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="单链表的打印"><a href="#单链表的打印" class="headerlink" title="单链表的打印"></a>单链表的打印</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//单链表的打印</span></span><br><span class="line"><span class="function"><span class="keyword">void</span>  <span class="title">ListPrint</span><span class="params">(ListNode *Node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ListNode *cur = Node;</span><br><span class="line"><span class="keyword">if</span> (Node == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (cur != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d--&gt; "</span>,cur-&gt;data);</span><br><span class="line">cur = cur-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;\assets\js\APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;学习链表有段时间了，今天给大家整理了有关链表的基本操作，例如链表的创建、增、删、查等基本操作&lt;/p&gt;
&lt;h3 id=&quot;结构体定义&quot;&gt;&lt;a 
      
    
    </summary>
    
      <category term="数据结构" scheme="https://LiuZiQiao.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="链表" scheme="https://LiuZiQiao.github.io/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>Frog jumping steps</title>
    <link href="https://LiuZiQiao.github.io/2018/10/02/%E9%9D%92%E8%9B%99%E8%B7%B3%E5%8F%B0%E9%98%B6/"/>
    <id>https://LiuZiQiao.github.io/2018/10/02/青蛙跳台阶/</id>
    <published>2018-10-02T07:55:43.000Z</published>
    <updated>2018-10-06T09:16:58.465Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><a id="more"></a><h3 id="问题一"><a href="#问题一" class="headerlink" title="问题一"></a>问题一</h3><p>一只青蛙一次可以跳上1级台阶，也可以跳上2级。求该青蛙跳上一个n级的台阶总共有多少种跳法（先后次序不同算不同的结果）。</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>这是一个典型的斐波那契数问题<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//递归写法</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">jump</span><span class="params">(<span class="keyword">int</span> n )</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (n &lt;<span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> jump(n - <span class="number">1</span>) + jump(n - <span class="number">2</span>);</span><br><span class="line">    <span class="comment">//非递归写法</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">jumpFloor</span><span class="params">(<span class="keyword">int</span> number)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (number == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> c = a+b;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (number&gt;<span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">a = b; </span><br><span class="line">b = c;</span><br><span class="line">c = a + b;</span><br><span class="line">number--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h3 id="问题二"><a href="#问题二" class="headerlink" title="问题二"></a>问题二</h3><p>一只青蛙一次可以跳上1级台阶，也可以跳上2级……它也可以跳上n级。求该青蛙跳上一个n级的台阶总共有多少种跳法。</p><h3 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h3><p> <strong>思路</strong>：接上一个跳台阶问题思路继续分析，上个问题中，青蛙只能跳1级或者2级。  则最后一跳只有两种可能，所以F(n) = F(n-1) + F(n-2)//现在青蛙可以跳n级。  假设台阶为n级，则青蛙可以 跳一次或者多次。  一次： 直接跳n级，这是一种方法。  多次： 青蛙跳到 1到n-1级 任一级（不管怎样跳，跳几次）后再跳一次到n级。//或者这样分析，青蛙最后一跳，有可能是从起点直接跳到终点，或者从起点跳了若干步后(到达 1到n-1级中间任一级 )再跳到n级。//所以总的方法数为：青蛙 跳到 1级到n-1级 每级可能的方法数（再跳到n级） + 1（直接跳到n级）</p><p>f(n) = f(n-1)+f(n-2) + … +f(1)<br>f(n-1) = f(n-2)+f(n-3)+ … f(1)<br>综上：<br>f(n) = 2*f(n-1)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">jumpFloorII</span><span class="params">(<span class="keyword">int</span> number)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (number &lt; <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (number == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">2</span> * jumpFloorII(number - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;\assets\js\APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;问题一&quot;&gt;&lt;a href=&quot;#问题一&quot; class=&quot;headerlink&quot; title=&quot;问题一&quot;&gt;&lt;/a&gt;问题一&lt;/h3&gt;&lt;
      
    
    </summary>
    
      <category term="剑指offer" scheme="https://LiuZiQiao.github.io/categories/%E5%89%91%E6%8C%87offer/"/>
    
    
      <category term="Fibonacci" scheme="https://LiuZiQiao.github.io/tags/Fibonacci/"/>
    
  </entry>
  
  <entry>
    <title>gdb使用教程</title>
    <link href="https://LiuZiQiao.github.io/2018/10/02/gdb%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
    <id>https://LiuZiQiao.github.io/2018/10/02/gdb使用教程/</id>
    <published>2018-10-02T02:54:10.000Z</published>
    <updated>2018-10-02T03:02:31.701Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><a id="more"></a><h3 id="GDB介绍"><a href="#GDB介绍" class="headerlink" title="GDB介绍"></a>GDB介绍</h3><p> GDB是GNU开源组织发布的一个强大的UNIX下的程序调试工具。或许，各位比较喜欢那种图形界面方式的，像VS等IDE的调试，但如果你是在UNIX平台下做软件，你会发现GDB这个调试工具有比VS的图形化调试器更强大的功能。所谓“寸有所长，尺有所短”就是这个道理。<br>一般来说，GDB主要帮忙你完成下面四个方面的功能：</p><ul><li>1、启动程序，按用户要求影响程序的运行行为</li><li>2、使运行程序在指定条件处停止（断点可以是条件表达式）</li><li>3、当程序被停住时，可以检查此时你的程序中出现的问题</li><li>4、动态的改变程序的执行环境，这样能纠正一个错误</li></ul><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><h4 id="源程序"><a href="#源程序" class="headerlink" title="源程序"></a>源程序</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> n )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>,i;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">    sum += i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">long</span> result = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=<span class="number">100</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">    result += i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"result[1-100]= %d\n"</span>,result);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"result[1-100]= %d\n"</span>,func(<span class="number">250</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译生成执行文件：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[liuxiaokun@localhost day10_1]$ cc test.c -o test</span><br></pre></td></tr></table></figure></p><h4 id="使用GDB调试"><a href="#使用GDB调试" class="headerlink" title="使用GDB调试"></a>使用GDB调试</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line">[liuxiaokun@localhost day10_1]$ gdb test   ========&gt;&gt;&gt;启动GDB</span><br><span class="line">GNU gdb (GDB) Red Hat Enterprise Linux (<span class="number">7.2</span><span class="number">-60.</span>el6_4<span class="number">.1</span>)</span><br><span class="line">Copyright (C) <span class="number">2010</span> Free Software Foundation, Inc.</span><br><span class="line">License GPLv3+: GNU GPL version <span class="number">3</span> <span class="keyword">or</span> later &lt;http:<span class="comment">//gnu.org/licenses/gpl.html&gt;</span></span><br><span class="line">This is <span class="built_in">free</span> software: you are <span class="built_in">free</span> to change <span class="keyword">and</span> redistribute it.</span><br><span class="line">There is NO WARRANTY, to the extent permitted by law.  Type <span class="string">"show copying"</span></span><br><span class="line"><span class="keyword">and</span> <span class="string">"show warranty"</span> <span class="keyword">for</span> details.</span><br><span class="line">This GDB was configured as <span class="string">"x86_64-redhat-linux-gnu"</span>.</span><br><span class="line">For bug reporting instructions, please see:</span><br><span class="line">&lt;http:<span class="comment">//www.gnu.org/software/gdb/bugs/&gt;...</span></span><br><span class="line">Reading symbols from /home/liuxiaokun/code/C/day10_1/test...done.</span><br><span class="line">(gdb) l  ========&gt;&gt;&gt; l相当于<span class="built_in">list</span>从第一行列出源程序</span><br><span class="line"><span class="number">7</span>    &#123;</span><br><span class="line"><span class="number">8</span>sum += i;</span><br><span class="line"><span class="number">9</span>    &#125;</span><br><span class="line"><span class="number">10</span>    <span class="keyword">return</span> sum;</span><br><span class="line"><span class="number">11</span>&#125;</span><br><span class="line"><span class="number">12</span></span><br><span class="line"><span class="number">13</span><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function">14</span>&#123;</span><br><span class="line"><span class="number">15</span>    <span class="keyword">int</span> i;</span><br><span class="line"><span class="number">16</span>    <span class="keyword">long</span> result = <span class="number">0</span>;</span><br><span class="line">(gdb)   ========&gt;&gt;&gt;直接回车，表示重复上一次命令</span><br><span class="line"><span class="number">17</span>    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=<span class="number">100</span>;i++)</span><br><span class="line"><span class="number">18</span>    &#123;</span><br><span class="line"><span class="number">19</span>result += i;</span><br><span class="line"><span class="number">20</span>    &#125;</span><br><span class="line"><span class="number">21</span></span><br><span class="line"><span class="number">22</span>    <span class="built_in">printf</span>(<span class="string">"result[1-100]= %d\n"</span>,result);</span><br><span class="line"><span class="number">23</span>    </span><br><span class="line"><span class="number">24</span>    <span class="built_in">printf</span>(<span class="string">"result[1-100]= %d\n"</span>,func(<span class="number">250</span>));</span><br><span class="line"><span class="number">25</span>&#125;</span><br><span class="line">(gdb) <span class="keyword">break</span> <span class="number">19</span>  ========&gt;&gt;&gt;设置断点</span><br><span class="line">Breakpoint <span class="number">1</span> at <span class="number">0x40050b</span>: file test.c, line <span class="number">19.</span></span><br><span class="line">(gdb) <span class="keyword">break</span> func  ========&gt;&gt;&gt;设置断点，在函数的入口处</span><br><span class="line">Breakpoint <span class="number">2</span> at <span class="number">0x4004cb</span>: file test.c, line <span class="number">5.</span></span><br><span class="line">(gdb) info breakpoints  =========&gt;&gt;&gt;查看断点信息</span><br><span class="line">Num     Type           Disp Enb Address            What</span><br><span class="line"><span class="number">1</span>       breakpoint     keep y   <span class="number">0x000000000040050b</span> in main at test.c:<span class="number">19</span></span><br><span class="line"><span class="number">2</span>       breakpoint     keep y   <span class="number">0x00000000004004cb</span> in func at test.c:<span class="number">5</span></span><br><span class="line">(gdb) r     =======&gt;&gt;&gt;运行程序，run命令缩写</span><br><span class="line">Starting program: /home/liuxiaokun/code/C/day10_1/test </span><br><span class="line"></span><br><span class="line">Breakpoint <span class="number">1</span>, main () at test.c:<span class="number">19</span>   ========&gt;&gt;&gt;在断点处停住</span><br><span class="line"><span class="number">19</span>result += i;</span><br><span class="line">Missing separate debuginfos, use: debuginfo-install glibc<span class="number">-2.12</span><span class="number">-1.132</span>.el6.x86_64</span><br><span class="line">(gdb) n</span><br><span class="line"><span class="number">17</span>    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=<span class="number">100</span>;i++)</span><br><span class="line">(gdb) n</span><br><span class="line"></span><br><span class="line">Breakpoint <span class="number">1</span>, main () at test.c:<span class="number">19</span></span><br><span class="line"><span class="number">19</span>result += i;</span><br><span class="line">(gdb) n</span><br><span class="line"><span class="number">17</span>    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=<span class="number">100</span>;i++)</span><br><span class="line">(gdb) c   ========&gt;&gt;&gt;继续运行程序，<span class="keyword">continue</span>的缩写</span><br><span class="line">Continuing.</span><br><span class="line"></span><br><span class="line">Breakpoint <span class="number">1</span>, main () at test.c:<span class="number">19</span></span><br><span class="line"><span class="number">19</span>result += i;</span><br><span class="line">(gdb) n</span><br><span class="line"><span class="number">17</span>    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=<span class="number">100</span>;i++)</span><br><span class="line">(gdb) p i  ========&gt;&gt;&gt;打印变量i的值，p是print的缩写</span><br><span class="line">$<span class="number">1</span> = <span class="number">5</span></span><br><span class="line">(gdb) n</span><br><span class="line"></span><br><span class="line">Breakpoint <span class="number">1</span>, main () at test.c:<span class="number">19</span></span><br><span class="line"><span class="number">19</span>result += i;</span><br><span class="line">(gdb) n</span><br><span class="line"><span class="number">17</span>    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=<span class="number">100</span>;i++)</span><br><span class="line">(gdb) n</span><br><span class="line"></span><br><span class="line">Breakpoint <span class="number">1</span>, main () at test.c:<span class="number">19</span></span><br><span class="line"><span class="number">19</span>result += i;</span><br><span class="line">(gdb) p result</span><br><span class="line">$<span class="number">2</span> = <span class="number">28</span></span><br><span class="line">(gdb) bt ========&gt;&gt;&gt;查看函数堆栈</span><br><span class="line">#<span class="number">0</span>  main () at test.c:<span class="number">19</span></span><br><span class="line">(gdb) n</span><br><span class="line"><span class="number">17</span>    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=<span class="number">100</span>;i++)</span><br><span class="line">(gdb) bt</span><br><span class="line">#<span class="number">0</span>  main () at test.c:<span class="number">17</span></span><br><span class="line">(gdb) n</span><br><span class="line"></span><br><span class="line">Breakpoint <span class="number">1</span>, main () at test.c:<span class="number">19</span></span><br><span class="line"><span class="number">19</span>result += i;</span><br><span class="line">(gdb) n</span><br><span class="line"><span class="number">17</span>    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=<span class="number">100</span>;i++)</span><br><span class="line">(gdb) n</span><br><span class="line"></span><br><span class="line">Breakpoint <span class="number">1</span>, main () at test.c:<span class="number">19</span></span><br><span class="line"><span class="number">19</span>result += i;</span><br><span class="line">(gdb) n</span><br><span class="line"><span class="number">17</span>    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=<span class="number">100</span>;i++)</span><br><span class="line">(gdb) n</span><br><span class="line"></span><br><span class="line">Breakpoint <span class="number">1</span>, main () at test.c:<span class="number">19</span></span><br><span class="line"><span class="number">19</span>result += i;</span><br><span class="line">(gdb) bt</span><br><span class="line">#<span class="number">0</span>  main () at test.c:<span class="number">19</span></span><br><span class="line">(gdb) finish    ========&gt;&gt;&gt;退出函数</span><br><span class="line"><span class="string">"finish"</span> <span class="keyword">not</span> meaningful in the outermost frame.</span><br><span class="line">(gdb) c</span><br><span class="line">Continuing.</span><br><span class="line"></span><br><span class="line">Breakpoint <span class="number">1</span>, main () at test.c:<span class="number">19</span></span><br><span class="line"><span class="number">19</span>result += i;</span><br><span class="line">(gdb) q     ==========&gt;&gt;&gt;退出gdb</span><br><span class="line">A debugging session is active.</span><br><span class="line"></span><br><span class="line">Inferior <span class="number">1</span> [process <span class="number">4248</span>] will be killed.</span><br><span class="line"></span><br><span class="line">Quit anyway? (y <span class="keyword">or</span> n)</span><br></pre></td></tr></table></figure><h4 id="GDB"><a href="#GDB" class="headerlink" title="GDB"></a>GDB</h4><p>通过以上案例，我们对GDB有了大概的了解，接下来就系统的认识GDB吧</p><p>一般来说GDB主要调试的是C/C++的程序。要调试C/C++的程序，首先在编译时，我们必须要把调试信息加到可执行文件中。使用编译器（cc/gcc/g++）的<br>-g 参数可以做到这一点。如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; gcc -g test.c -o test</span><br><span class="line">&gt; g++ -g test.cpp -o test</span><br></pre></td></tr></table></figure></p><p>==如果没有-g，你将看不见程序的函数名、变量名，所代替的全是运行时的内存地址。当你用-g把调试信息加入之后，并成功编译目标代码以后，让我们来看看如何用gdb来调试他。==</p><p><strong>启动gdb的方法有以下几种：</strong></p><ol><li>gdb <program><br>program<br>  就是可执行文件，一般就在当前目录下</program></li><li>gdb <program>  core<br> 用gdb同时调试一个运行程序和core文件，core==是非法执行后==core dump 后产生的文件</program></li><li>gdb <program> <pid><br> 如果是一个服务程序，就可以指定服务程序运行时的进程ID，gdb会自动的attach上去，并调试他，program应该在path环境变量中搜索得到   </pid></program></li></ol><p><strong>当然，gdb启动时我们可以加一些参数，详细的参数可以用gdb -help查看</strong></p><h5 id="GDB命令概貌"><a href="#GDB命令概貌" class="headerlink" title="GDB命令概貌"></a>GDB命令概貌</h5><p>启动gdb后，就你被带入gdb的调试环境中，就可以使用gdb的命令开始调试程序了，gdb的命令可以使用help命令来查看，如下所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">aliases -- Aliases of other commands</span><br><span class="line">breakpoints -- Making program stop at certain points</span><br><span class="line">data -- Examining data</span><br><span class="line">files -- Specifying and examining files</span><br><span class="line">internals -- Maintenance commands</span><br><span class="line">obscure -- Obscure features</span><br><span class="line">running -- Running the program</span><br><span class="line">stack -- Examining the stack</span><br><span class="line">status -- Status inquiries</span><br><span class="line">support -- Support facilities</span><br><span class="line">tracepoints -- Tracing of program execution without stopping the program</span><br><span class="line">user-defined -- User-defined commands</span><br><span class="line"></span><br><span class="line">Type &quot;help&quot; followed by a class name for a list of commands in that class.</span><br><span class="line">Type &quot;help all&quot; for the list of all commands.</span><br><span class="line">Type &quot;help&quot; followed by command name for full documentation.</span><br><span class="line">Type &quot;apropos word&quot; to search for commands related to &quot;word&quot;.</span><br></pre></td></tr></table></figure></p><p>gdb的命令有很多，所以gdb命令有分类，help只是列出了命令的种类，查看类中的命令使用==help <class>== 命令，如：==help breakpoint==，查看设置断点的所有命令 </class></p><p>gdb中，可以不用大全命令，只用命令的前几个字符就可以了，当然也可以两次Tab将命令补全，如果有重复，就会列出了</p><ul><li><p>示例一：在进入函数func时，设置一个断点。可以敲入break func，或是直接就是b func</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(gdb) <span class="keyword">break</span> func</span><br><span class="line">Breakpoint <span class="number">1</span> at <span class="number">0x4004c8</span></span><br></pre></td></tr></table></figure></li><li><p>示例二：敲入b按两次TAB键，你会看到所有b打头的命令：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(gdb) b</span><br><span class="line">backtrace  bookmark   <span class="keyword">break</span>      bt</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;\assets\js\APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;GDB介绍&quot;&gt;&lt;a href=&quot;#GDB介绍&quot; class=&quot;headerlink&quot; title=&quot;GDB介绍&quot;&gt;&lt;/a&gt;GDB
      
    
    </summary>
    
      <category term="Linux" scheme="https://LiuZiQiao.github.io/categories/Linux/"/>
    
    
      <category term="Linux -gdb" scheme="https://LiuZiQiao.github.io/tags/Linux-gdb/"/>
    
  </entry>
  
  <entry>
    <title>ThreeSum</title>
    <link href="https://LiuZiQiao.github.io/2018/09/25/ThreeSum/"/>
    <id>https://LiuZiQiao.github.io/2018/09/25/ThreeSum/</id>
    <published>2018-09-25T15:41:36.000Z</published>
    <updated>2018-09-26T15:42:25.584Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><a id="more"></a><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>Given an array nums of n integers, are there elements a, b, c in nums such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.</p><p>Note:</p><p>The solution set must not contain duplicate triplets.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Example:</span><br><span class="line"></span><br><span class="line">例如, 给定数组 nums = [-1, 0, 1, 2, -1, -4]，</span><br><span class="line"></span><br><span class="line">满足要求的三元组集合为：</span><br><span class="line">[</span><br><span class="line">  [-1, 0, 1],</span><br><span class="line">  [-1, -1, 2]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; threeSum(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (nums != <span class="keyword">null</span> &amp;&amp;nums.length &gt;<span class="number">2</span>) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//首先对数组进行排序</span></span><br><span class="line">Arrays.sort(nums);</span><br><span class="line"><span class="comment">//我们假设取第 i 个数为结果</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i= <span class="number">0</span>;i&lt;nums.length-<span class="number">2</span>;)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//第二个数的可能起始位置</span></span><br><span class="line"><span class="keyword">int</span> j = i+<span class="number">1</span>;</span><br><span class="line"><span class="comment">//第三个数的可能起始位置</span></span><br><span class="line"><span class="keyword">int</span> k = nums.length - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (j &lt; k) &#123;</span><br><span class="line"><span class="keyword">if</span> (nums[j] + nums[k] == -nums[i]) &#123;</span><br><span class="line"><span class="comment">//当我们找到满足条件的解时，我们将结果添加到结果集里</span></span><br><span class="line">List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">list.add(nums[i]);</span><br><span class="line">list.add(nums[j]);</span><br><span class="line">list.add(nums[k]);</span><br><span class="line">result.add(list);</span><br><span class="line"><span class="comment">//移动位置寻找下一组解</span></span><br><span class="line">k--;</span><br><span class="line">j++;</span><br><span class="line"></span><br><span class="line"><span class="comment">//下面两个while是用来判断是否越界和判断移动后的数是否和之前的数相同，若相同则跳过该数</span></span><br><span class="line"><span class="keyword">while</span> (j&lt;k &amp;&amp; nums[j] == nums[j-<span class="number">1</span>]) &#123;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (j&lt;k&amp;&amp;nums[k] == nums[k+<span class="number">1</span>]) &#123;</span><br><span class="line">k--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//和大于 0，让k向前移动到小一点的数</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (nums[j]+nums[k]&gt;-nums[i]) &#123;</span><br><span class="line">k--;</span><br><span class="line"><span class="comment">//下面是用来判断是否越界和判断移动后的数是否和之前的数相同，若相同则跳过该数</span></span><br><span class="line"><span class="keyword">while</span> (j&lt;k&amp;&amp;nums[k] == nums[k+<span class="number">1</span>]) &#123;</span><br><span class="line">k--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//和小于 0，让j向后移动到大一点的数</span></span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">j++;</span><br><span class="line"><span class="comment">//下面是用来判断是否越界和判断移动后的数是否和之前的数相同，若相同则跳过该数</span></span><br><span class="line"><span class="keyword">while</span> (j&lt;k&amp;&amp;nums[j] == nums[j-<span class="number">1</span>]) &#123;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//指向下一个要处理的数</span></span><br><span class="line">i++;</span><br><span class="line"><span class="comment">//从左向右找第一个与之前处理的数的不同的数的下标</span></span><br><span class="line"><span class="keyword">while</span> (i&lt;nums.length-<span class="number">2</span>&amp;&amp;nums[i] == nums[i-<span class="number">1</span>]) &#123;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">        </span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;\assets\js\APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h3&gt;&lt;p&gt;Gi
      
    
    </summary>
    
      <category term="每日一题" scheme="https://LiuZiQiao.github.io/categories/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
    
      <category term="List" scheme="https://LiuZiQiao.github.io/tags/List/"/>
    
      <category term="java" scheme="https://LiuZiQiao.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Makefile工具使用</title>
    <link href="https://LiuZiQiao.github.io/2018/09/24/Makefile%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"/>
    <id>https://LiuZiQiao.github.io/2018/09/24/Makefile工具使用/</id>
    <published>2018-09-24T08:31:48.000Z</published>
    <updated>2018-10-05T06:08:30.862Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><a id="more"></a><p>Makefile是一个c语言的编译工具。如果学过Java，可能会认识Maven工具，makefile也是类似的工作。<br>Makefile能帮助c语言建立自动化的编译。一旦写好，执行一个make命令就可以编译整个工程。当然编写Makefile文件的时候有很多知识点在里面。这篇文章主要讲解如何编写基础性以及常用的Makefile文件。</p><h3 id="没有Makefile工具时如何进行编译"><a href="#没有Makefile工具时如何进行编译" class="headerlink" title="没有Makefile工具时如何进行编译"></a>没有Makefile工具时如何进行编译</h3><p>首先我们看一个例子：<br>当前我们有3个文件，分别是test.h test.c main.c<br>在main.c中,头文件定义如下<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">"test.h"</span></span></span><br></pre></td></tr></table></figure></p><p>在test.h中,头文件定义如下<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">"test.c"</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test_print</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure></p><p>在test.c中<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test_print</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"this is test.c \n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>当我们编译运行程序时，我们使用的命令是<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc test.h main.c -o main</span><br></pre></td></tr></table></figure></p><p>运行结果就是<br>    this is test.c   </p><p>对于小程序我们可以使用这样的命令，但是当我们这样运行一个大项目时，我们需要多少文件名来定义，此时Makefile就是一个很好的工具</p><h3 id="makefile简单示例"><a href="#makefile简单示例" class="headerlink" title="makefile简单示例"></a>makefile简单示例</h3><p>就如上面的三个文件<br>我们vim 一个名为Makefile的文件<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">main.o:test.o main.c</span><br><span class="line">    gcc test.o main.c</span><br><span class="line">test.o:test.c</span><br><span class="line">    gcc -c test.c</span><br></pre></td></tr></table></figure></p><p>编辑好Makefile文件后，我们返回，执行make后，将会输出<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gcc -c test.c   </span><br><span class="line">gcc test.o main.c</span><br></pre></td></tr></table></figure></p><p>这样是不是比原始的编译方便很多呢。其实也不是罪方便的，既然发明了make工具，那么肯定会让make工具更加方便开发人员使用的。</p><h3 id="Makefile具体使用"><a href="#Makefile具体使用" class="headerlink" title="Makefile具体使用"></a>Makefile具体使用</h3><h4 id="伪目标"><a href="#伪目标" class="headerlink" title="伪目标"></a>伪目标</h4><p>伪目标：不管是不是最新的，都需要重新生成；使用.PHONY来声明一个目标是伪目标；执行伪目标的效果等于执行了某一个动作，并不产生目标文件。例如添加一个伪目标：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">main.o:test.o main.c</span><br><span class="line">    gcc test.o main.c</span><br><span class="line">test.o:test.c</span><br><span class="line">    gcc -c test.c</span><br><span class="line">clean :                                        【这是一个伪目标】</span><br><span class="line">        rm -f $(OBJECTS) main</span><br></pre></td></tr></table></figure></p><p>使用make来执行伪目标<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ make clean</span><br><span class="line">rm -f test.o main.c main.o</span><br></pre></td></tr></table></figure></p><h4 id="Makefile自动变量"><a href="#Makefile自动变量" class="headerlink" title="Makefile自动变量"></a>Makefile自动变量</h4><table><thead><tr><th>选项名</th><th>作用</th></tr></thead><tbody><tr><td>$@</td><td>编写规则中啊哟生成的目标对象</td></tr><tr><td>$^</td><td>编写规则中所有依赖文件列表</td></tr><tr><td>$&lt;</td><td>编写规定中第一个依赖对象</td></tr></tbody></table><p>因此，上面的Makefile文件我们可以改下如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">main.o:test.o main.c</span><br><span class="line">    gcc -g $^ -o $@</span><br><span class="line">test.o:test.c</span><br><span class="line">    gcc -g -c  $&lt; -o $@</span><br></pre></td></tr></table></figure></p><p>执行make，可以看到效果还是一样的：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gcc -c test.c   </span><br><span class="line">gcc test.o main.c</span><br></pre></td></tr></table></figure></p><h4 id="编译生成多个可执行文件"><a href="#编译生成多个可执行文件" class="headerlink" title="编译生成多个可执行文件"></a>编译生成多个可执行文件</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">bin=main main2   <span class="comment">//自定义变量bin</span></span><br><span class="line">src=main.o test.o</span><br><span class="line">all:$(bin)    <span class="comment">//重点</span></span><br><span class="line">main: $(src)</span><br><span class="line">    gcc -g $^ -o $@</span><br><span class="line">main2:$(bin)</span><br><span class="line">    gcc -g $&lt; -o $@</span><br><span class="line">main.o :main.c</span><br><span class="line">    gcc -g -c $&lt; -o $@</span><br><span class="line">main2.o :main2.c</span><br><span class="line">    gcc -g -c $&lt; -o $@</span><br><span class="line">clean :</span><br><span class="line">    rm -f $(src) $(bin)</span><br></pre></td></tr></table></figure><p>为了生成目标文件all，需要生成bin，也就是main main2.这样就生成了两个可执行文件，利用自定义变量可以简化这段Makefile，但是这样写看起来内容其实还是很多的，因此下面我将介绍make的内嵌函数</p><h4 id="make常用内嵌函数"><a href="#make常用内嵌函数" class="headerlink" title="make常用内嵌函数"></a>make常用内嵌函数</h4><p>首先看到make中函数的调用形式<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(function arguments)   <span class="comment">//functions是函数名称，arguments是参数，使用$来调用</span></span><br></pre></td></tr></table></figure></p><p><strong><em>函数名与参数之间是空格</em></strong><br>以下三个重要的内嵌函数</p><ul><li><p>$(wildcard path)<br>  当前目录下匹配模式的文件</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">src=$(wildcard *.c)  <span class="comment">// 在当前目录下搜索所以.c文件，文件名称保存到src中</span></span><br></pre></td></tr></table></figure></li><li><p>$(patsubst pattern,replacement,text)模式替换函数，就是把text中文件列表从模式pattern替换为replacement模式</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$(patsubst %.c,%.o,$src)  <span class="comment">// 把src中的.c文件列表中的文件从.c替换为.o</span></span><br><span class="line">等价于：$(src:.c=.o)  <span class="comment">//这种方式更为常用</span></span><br></pre></td></tr></table></figure></li><li><p>shell函数<br>shell函数可以执行shell下的命令，同样是使用$来引用的，例如</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(shell ls -d */)  <span class="comment">//将当前目录下的所有文件列出来</span></span><br></pre></td></tr></table></figure></li></ul><p>下面我们通过一个例子来使用上面三个函数。假设当前目录下有main.c文件，同时还有若干个目录，每个目录中都有各自的.c文件，利用所有的.c文件编译生成最后的main文件：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">CC      = gcc</span><br><span class="line">CFLAGS  = -g</span><br><span class="line">BIN     = main</span><br><span class="line">SUBDIR  = $(shell ls -d */)     <span class="comment">// SUBDIR变量保存了子目录的列表</span></span><br><span class="line">ROOTSRC = $(wildcard *.c)       <span class="comment">//ROOTSRC保存了当前目录下的.c文件列表</span></span><br><span class="line">ROOTOBJ = $(ROOTSRC:%.c = %.o)  <span class="comment">//ROOTBOJ 保存了当前目录下.c文件同名的.o列表</span></span><br><span class="line">SUBSRC  = $(shell find $(SUBDIR) -name '*.c')       //SUBSRC 保存了所有子目录下的的.c文件</span><br><span class="line">SUBOBJ  = $(SUBSRC:%.c = %.o)       <span class="comment">//SUBOBJ保存了所有子目录下的.c文件同名的.o文件列表</span></span><br><span class="line">$(BIN):$(ROOTOBJ) $(SUBOBJ)         <span class="comment">//main的生成依赖与当前目录及所有子目录下的.o文件</span></span><br><span class="line">    $(CC) $(CFLAGS) -o $(BIN) $(ROOTOBJ) $(SUBOBJ)</span><br><span class="line">.o .c:</span><br><span class="line">    $(CC) $(CFLAGS) -c %&lt; -o $@</span><br><span class="line">clean:</span><br><span class="line">    rm -f $(BIN) $(ROOTOBJ) $(SUBOBJ)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;\assets\js\APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;Makefile是一个c语言的编译工具。如果学过Java，可能会认识Maven工具，makefile也是类似的工作。&lt;br&gt;Makefil
      
    
    </summary>
    
      <category term="Linux" scheme="https://LiuZiQiao.github.io/categories/Linux/"/>
    
    
      <category term="vim" scheme="https://LiuZiQiao.github.io/tags/vim/"/>
    
  </entry>
  
  <entry>
    <title>vim使用命令大全</title>
    <link href="https://LiuZiQiao.github.io/2018/09/23/vim%E4%BD%BF%E7%94%A8%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8/"/>
    <id>https://LiuZiQiao.github.io/2018/09/23/vim使用命令大全/</id>
    <published>2018-09-23T14:51:17.000Z</published>
    <updated>2018-10-01T06:59:12.414Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><a id="more"></a><p>不知不觉，vim已经使用快一年了，虽然不是经常使用，这就导致每次使用时一些命令还是模糊，需要查查文档才能正确使用，因此就这篇博客分享给学习Linux的小伙伴们。</p><h3 id="vim介绍"><a href="#vim介绍" class="headerlink" title="vim介绍"></a>vim介绍</h3><p>vim是程序员最喜欢的编辑器，也是Linux下第二强大的编辑器，虽然emacs是公认的世界第一，但我认为emacs并没有vim用起来高效。</p><h4 id="vim的几种模式"><a href="#vim的几种模式" class="headerlink" title="vim的几种模式"></a>vim的几种模式</h4><ul><li>正常模式：可以使用快捷键命令，或按输入命令</li><li>插入模式：可以输入文本，在正常模式下，按i，a，o等都可以进入插入模式</li><li>可视模式：正常模式下按v可进入可视模式，在可视模式下，移动光标可以选择文本，按v进入可视模式后，总是整行整行的选中。Ctrl+v进入可视块模式。</li></ul><h3 id="vim的安装"><a href="#vim的安装" class="headerlink" title="vim的安装"></a>vim的安装</h3><ol><li><p>在线安装<br>直接shell中输入如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install vim (ubuntu)</span><br><span class="line">yum install vim (redHat/Fedora/CentOS)</span><br></pre></td></tr></table></figure></li><li><p>手动下载编译安装<br>截止当前最新版本是7.4(vim-7.4.tar.bz2)，可在windows环境下载好，拷贝至linux环境安装，或直接linux命令行下载。这里给出 linux直接下载并编译安装（以下均为shell命令）：   </p></li></ol><ul><li>wget下载</li></ul><p>wget ftp://ftp.vim.org/ftp/pub/vim/unix/vim-7.4.tar.bz2<br>(或用ftp命令登陆ftp://ftp.vim.org，get命令获取)</p><ul><li><p>解压</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bunzip2 vim-7.4.tar.bz2</span><br></pre></td></tr></table></figure></li><li><p>解压</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar xvf vim-7.4.tar</span><br></pre></td></tr></table></figure></li><li><p>进入vim74（解压后的）目录，执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./configure --disable-selinux --enable-cscope</span><br><span class="line">(./configure -help 查看后面参数选项的含义)</span><br></pre></td></tr></table></figure></li><li><p>编译</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure></li><li><p>安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make install</span><br></pre></td></tr></table></figure></li></ul><p>只要不出现error即代表成功安装，也可直接用vim命令来检测，或whatis vim(whereis vim)查看。通常情况下，许多发行版会默认安装vim，则可省略上述步骤。</p><h3 id="vim的初始化配置-vimrc"><a href="#vim的初始化配置-vimrc" class="headerlink" title="vim的初始化配置.vimrc"></a>vim的初始化配置.vimrc</h3><ol><li>存放位置<br>linux环境下vim的初始化配置文件为.vimrc, 通常有两个:系统版本和用户版本，前者不同发行版linux会有不同，一般位于/etc/vimrc，是整个系统vim的默认配置；后者位于~/.vimrc，是当前用户的vim配置，会覆盖系统配置。<br>关于vim的其他配置参数文件位于/usr/local/share/vim/下，可进入vim，在命令模式下键入<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">:version （查看基本配置路径）</span><br><span class="line">:echo $VIM ( WINDOW用户在次目录下编辑文件_vimrc完成下面配置 )</span><br><span class="line">:echo $HOME（查看具体路径值）</span><br><span class="line"> ~/.vimrc有时并不存在，此时用户可以建立一个.vimrc，放入主目录以实现自己的vim配置。</span><br></pre></td></tr></table></figure></li></ol><h3 id="启动vim"><a href="#启动vim" class="headerlink" title="启动vim"></a>启动vim</h3><ul><li>vim -c cmd file：在打开文件前，先执行指定的命令</li><li>vim -r file：恢复上次异常退出的文件</li><li>vim -R file：以只读的方式打开文件，但可以强制保存</li><li>vim -M file：以只读方式打开文件，不可以强制保存</li><li>vim -y num file：将编辑窗口的大小设为num行</li><li>vim+file：从文件的末尾开始</li><li>vim+num file：从第num行开始</li><li>vim+/string file：打开file，并将光标停留在第一个找到的string上</li><li>vim -remote file：用已有的vim进程打开指定的文件。如果你不想启用多个vim会话，这个很有用。但要注意， 如果你用vim，会寻找名叫VIM的服务器；如果你已经有一个gvim在运行了， 你可以用gvim –remote file在已有的gvim中打开文件。</li></ul><h3 id="文档操作"><a href="#文档操作" class="headerlink" title="文档操作"></a>文档操作</h3><ul><li>e file -关闭当前编辑的文件，并开启新的文件。如果当前文件的修改未保存，vi会警告</li><li>e! file -放弃当前文件的修改，编辑新的文件</li><li>e+n file -开始新的文件，并从第n行开始编辑</li><li>enew -编译一个未命名的新文档（Ctrl-W n）</li><li>e – 重新加载当前文档。</li><li>e! – 重新加载当前文档，并丢弃已做的改动。</li><li>e#或ctrl+^ – 回到刚才编辑的文件，很实用。</li><li>f或ctrl+g –显示文档名，是否修改，和光标位置。</li><li>f filename – 改变编辑的文件名，这时再保存相当于另存为。</li><li>gf – 打开以光标所在字符串为文件名的文件。</li><li>w – 保存修改。</li><li>n1,n2w filename – 选择性保存从某n1行到另n2行的内容。</li><li>wq – 保存并退出。</li><li>ZZ – 保存并退出。</li><li>x – 保存并退出。</li><li>q[uit] ——退出当前窗口。(CTRL-W q或CTRL-W CTRL-Q)</li><li>saveas newfilename – 另存为</li><li>browse e – 会打开一个文件浏览器让你选择要编辑的文件。 如果是终端中，则会打开netrw的文件浏览窗口； 如果是gvim，则会打开一个图形界面的浏览窗口。 实际上</li><li>browse后可以跟任何编辑文档的命令，如sp等。 用browse打开的起始目录可以由browsedir来设置：</li><li>set browsedir=last – 用上次访问过的目录（默认）；</li><li>set browsedir=buffer – 用当前文件所在目录；</li><li>set browsedir=current – 用当前工作目录；</li><li>Sex – 水平分割一个窗口，浏览文件系统；</li><li>Vex – 垂直分割一个窗口，浏览文件系统；</li></ul><h3 id="光标移动"><a href="#光标移动" class="headerlink" title="光标移动"></a>光标移动</h3><h4 id="基本移动"><a href="#基本移动" class="headerlink" title="基本移动"></a>基本移动</h4><p><strong>在正常模式下</strong></p><ul><li>h或退格：左移一个字符</li><li>I或空格：右移一个字符</li><li>j：下移一行</li><li>k：上移一行</li><li>gj：移动到一段内的下一行</li><li>gk：移动到一段内的上一行</li><li>+或者enter：把光标移至下一行第一个非空白字符</li><li>-：把光标移至上一行第一个非空白字符</li><li>w：移动一个单词，可忽略一些标点</li><li>e：前移一个单词，光标停在下一个单词末尾</li><li>E：移动到下一个单词末尾，如果词末尾有标点，则移动到标点</li><li>b：后移一个单词，光标停在上一个单词开头</li><li>B：移动到上一个单词开头，忽略一些标点</li><li>ge：后移一个单词，光标停在上一个单词末尾</li><li>gE：同ge，不过单词包含单词相邻的标点</li><li>(: 前移1句。</li><li>): 后移1句。</li><li>{: 前移1段。</li><li>}: 后移1段。</li><li>fc: 把光标移到同一行的下一个c字符处</li><li>Fc: 把光标移到同一行的上一个c字符处</li><li>tc: 把光标移到同一行的下一个c字符前</li><li>Tc: 把光标移到同一行的上一个c字符后</li><li>;: 配合f &amp; t使用，重复一次</li><li>,: 配合f &amp; t使用，反向重复一次</li><li>0：移到首行</li><li>g0：移到光标所在行行首</li><li>^：移到本行第一个非空白字符</li><li>g^：同^，但是移到到当前第一个非空字符处</li><li>n|：光标移动到第n行</li><li>:n<cr> :移动到第n行</cr></li><li>:$<cr> :移动到最后一行</cr></li><li>H：把光标移动到最顶端一行</li><li>M：把光标移动到最中间一行</li><li>L：把光标移动到最底端一行</li><li>gg：到文件头部</li><li>G：到文件尾部</li></ul><h4 id="翻屏"><a href="#翻屏" class="headerlink" title="翻屏"></a>翻屏</h4><ul><li>Ctrl+f： 下翻一屏。</li><li>Ctrl+b: 上翻一屏。</li><li>Ctrl+d: 下翻半屏。</li><li>Ctrl+u: 上翻半屏。</li><li>Ctrl+e: 向下滚动一行。</li><li>Ctrl+y: 向上滚动一行。</li><li>n%: 到文件n%的位置。</li><li>zz: 将当前行移动到屏幕中央。</li><li>zt: 将当前行移动到屏幕顶端。</li><li>zb: 将当前行移动到屏幕底端。</li></ul><h4 id="标记"><a href="#标记" class="headerlink" title="标记"></a>标记</h4><p>使用标记可以快速移动。到达标记后，可以用Ctrl+o返回原来的位置Ctrl+o和Ctrl+i很像浏览器上的 后退 和 前进 。</p><ul><li>m{a-z}: 标记光标所在位置，局部标记，只用于当前文件。</li><li>m{A-Z}: 标记光标所在位置，全局标记。标记之后，退出Vim， 重新启动，标记仍然有效。</li><li>`{a-z}: 移动到标记位置。</li><li>‘{a-z}: 移动到标记行的行首。</li><li>`{0-9}：回到上[2-10]次关闭vim时最后离开的位置。</li><li>“: 移动到上次编辑的位置。”也可以，不过“精确到列，而”精确到行 。如果想跳转到更老的位置，可以按C-o，跳转到更新的位置用C-i。</li><li>`”: 移动到上次离开的地方。</li><li>`.: 移动到最后改动的地方。</li><li>:marks 显示所有标记。</li><li>:delmarks a b – 删除标记a和b。</li><li>:delmarks a-c – 删除标记a、b和c。</li><li>:delmarks a c-f – 删除标记a、c、d、e、f。</li><li>:delmarks! – 删除当前缓冲区的所有标记。</li><li>:help mark-motions 查看更多关于mark的知识。</li></ul><h3 id="插入文本"><a href="#插入文本" class="headerlink" title="插入文本"></a>插入文本</h3><h4 id="基本插入"><a href="#基本插入" class="headerlink" title="基本插入"></a>基本插入</h4><ul><li>i: 在光标前插入；一个小技巧：按8，再按i，进入插入模式，输入=， 按esc进入命令模式，就会出现8个=。 这在插入分割线时非常有用，如30i+<esc>就插入了36个+组成的分割线。</esc></li><li>I: 在当前行第一个非空字符前插入；</li><li>gI: 在当前行第一列插入；</li><li>a: 在光标后插入；</li><li>A: 在当前行最后插入；</li><li>o: 在下面新建一行插入；</li><li>O: 在上面新建一行插入；</li><li>:r filename在当前位置插入另一个文件的内容。</li><li>:[n]r filename在第n行插入另一个文件的内容。</li><li>:r !date 在光标处插入当前日期与时间。同理，:r !command可以将其它shell命令的输出插入当前文档。</li></ul><h4 id="改写插入"><a href="#改写插入" class="headerlink" title="改写插入"></a>改写插入</h4><ul><li>c[n]w：改写光标后第n个次</li><li>c[n]I：改写光标后的n个字母</li><li>c[n]h：改写光标前的n个字母</li><li>[n]cc：修改当前[n]行</li><li>[n]s：以输入的文本替代光标之后1(n)个字符</li><li>[n]S：删除指定数目的行，并以所输入文本代替</li></ul><h3 id="剪切复制和寄存器"><a href="#剪切复制和寄存器" class="headerlink" title="剪切复制和寄存器"></a>剪切复制和寄存器</h3><h4 id="剪切和复制、粘贴"><a href="#剪切和复制、粘贴" class="headerlink" title="剪切和复制、粘贴"></a>剪切和复制、粘贴</h4><ul><li>[n]x: 剪切光标右边n个字符，相当于d[n]l。</li><li>[n]X: 剪切光标左边n个字符，相当于d[n]h。</li><li>y: 复制在可视模式下选中的文本。</li><li>yy or Y: 复制整行文本。</li><li>y[n]w: 复制一(n)个词。</li><li>y[n]l: 复制光标右边1(n)个字符。</li><li>y[n]h: 复制光标左边1(n)个字符。</li><li>yor D: 删除（剪切）当前位置到行尾的内容。</li><li>d[n]w: 删除（剪切）1(n)个单词</li><li>d[n]l: 删除（剪切）光标右边1(n)个字符。</li><li>d[n]h: 删除（剪切）光标左边1(n)个字符。</li><li>d0: 删除（剪切）当前位置到行首的内容</li><li>[n] dd: 删除（剪切）1(n)行。</li><li>:m,nd<cr> 剪切m行到n行的内容。</cr></li><li>d1G或dgg: 剪切光标以上的所有行。</li><li>dG: 剪切光标以下的所有行。</li><li>daw和das：剪切一个词和剪切一个句子，即使光标不在词首和句首也没关系。</li><li>d/f<cr>：这是一个比较高级的组合命令，它将删除当前位置 到下一个f之间的内容。</cr></li><li>p: 在光标之后粘贴。</li><li>P: 在光标之前粘贴。</li></ul><p><strong><em>当然，我们也可以在视图模式下进行选择，然后进行复制剪切粘贴操作</em></strong></p><h4 id="文本对象"><a href="#文本对象" class="headerlink" title="文本对象"></a>文本对象</h4><ul><li>aw：一个词</li><li>as：一句</li><li>ap：一段</li><li>ab：一块<h4 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h4></li><li>a-z：都可以用作寄存器的名。“ayy把当前行的内容放入a寄存器。</li><li>A-Z：用大写字母索引寄存器，可以在寄存器中追加内容。</li><li>:reg：显示所有寄存器的内容</li><li>“”：不加寄存器索引时，默认使用的寄存器</li><li>“<em>：当前选择缓冲区，”</em>yy吧当前行的内容放入当前缓冲区。</li><li>“+：系统剪贴板。”+yy把当前行的内容放入系统剪贴板。</li></ul><h3 id="编辑多个文件"><a href="#编辑多个文件" class="headerlink" title="编辑多个文件"></a>编辑多个文件</h3><h4 id="一次编辑多个文件"><a href="#一次编辑多个文件" class="headerlink" title="一次编辑多个文件"></a>一次编辑多个文件</h4><pre><code>打开文件时：vi a.txt b.txt c.txt</code></pre><ul><li>使用：next(:n)编辑下一个文件</li><li>:2n编辑下2个文件</li><li>使用:previous或:N编辑上一个文件</li><li>使用:wnext，保存当前文件，并编辑下一个文件</li><li>使用:wprevious，保存当前文件，并编辑上一个文件</li><li>使用:args显示文件列表</li><li>:n filename或:args filename 指定新的文件列表</li><li>vi -o filename 在水平分割线的多个窗口编辑多个文件</li><li>vi -o filename 在垂直分割的多个窗口中编辑多个文件</li><li>vnew 在当前编辑文件时新增加一个编辑文件，:w filename 保存为filename的文件<h3 id="分屏编辑"><a href="#分屏编辑" class="headerlink" title="分屏编辑"></a>分屏编辑</h3></li><li>vim -o file1 file2 ：水平分割窗口，同时打开file1和file2</li><li>vim -O file1 file2 ：垂直分割窗口，同时打开file1和file2<h4 id="水平分割"><a href="#水平分割" class="headerlink" title="水平分割"></a>水平分割</h4></li><li>split(:sp) 把当前窗水平分割成两个窗口。(Ctrl-W s 或Ctrl-W ctrl-S)如果是在终端下，Ctrl-S可能会冻结终端，Ctrl-Q继续</li><li>split filename  水平分割窗口，并在新窗口中显示另外一个文件</li><li>nsplit(:nsp) 水平分割出一个n行高的窗口</li><li>C-W C-^ 水平分割一个窗口，打开刚才编辑的文件<h4 id="垂直分割"><a href="#垂直分割" class="headerlink" title="垂直分割"></a>垂直分割</h4></li><li>:vsplit(:vsp) 把当前窗口分割成水平分布的两个窗口</li><li>:[N]vne[W] 垂直分割出一各新窗口</li><li>:vertical 水平分割的命令，相应的垂直分割<h4 id="关闭子窗口"><a href="#关闭子窗口" class="headerlink" title="关闭子窗口"></a>关闭子窗口</h4></li><li>:qall  关闭所有窗口，退出vim</li><li>:wall 保存所有修改过的窗口</li><li>:only 只保留当前窗口，关闭其它窗口</li><li>:close 关闭当前窗口，Ctrl-W c能实现同样的功能<h4 id="调整窗口大小"><a href="#调整窗口大小" class="headerlink" title="调整窗口大小"></a>调整窗口大小</h4></li><li>Ctrl+w+  当前窗口增高一行。也可用n增高n行</li><li>Ctrl+w-  当前窗口减少一行。也可用n减少n行</li><li>Ctrl+w_  当前窗口扩展到尽可能的大。也可用n设定行数</li><li>resize n 当前窗口n行高</li><li>Ctrl+w&lt; 当前窗口减少一列。也可用n减少n列</li><li>Ctrl+w&gt; 当前窗口增加一列。也可用n增加n列<h4 id="切换和移动窗口"><a href="#切换和移动窗口" class="headerlink" title="切换和移动窗口"></a>切换和移动窗口</h4></li><li>Ctrl+w Ctrl+w 切换到下一个窗口(Ctrl+w w)</li><li>Ctrl+w p 切换到前一个窗口</li><li>Ctrl+w h(l,j,k) 切换到左（右，下，上）面</li><li>Ctrl+w r 旋转窗口位置</li><li>Ctrl+w T 将当前的窗口移动到新的标签页上</li></ul><h3 id="快速编辑"><a href="#快速编辑" class="headerlink" title="快速编辑"></a>快速编辑</h3><h4 id="改变大小写"><a href="#改变大小写" class="headerlink" title="改变大小写"></a>改变大小写</h4><ul><li>~: 反转光标所在字符的大小写</li><li>可视模式下的U或u：把选中的文本变为大写或小写</li><li>gu(U)接范围（如$，或G），可以把从光标当前位置到指定位置之间字母全部 转换成小写或大写。如ggguG，就是把开头到最后一行之间的字母全部变为小 写。再如gu5j，把当前行和下面四行全部变成小写。<h4 id="替换（正常模式）"><a href="#替换（正常模式）" class="headerlink" title="替换（正常模式）"></a>替换（正常模式）</h4></li><li>r: 替换光标处的字符，同样支持汉字。</li><li>R: 进入替换模式，按esc回到正常模式。</li></ul><h4 id="撤销与重做（正常模式）"><a href="#撤销与重做（正常模式）" class="headerlink" title="撤销与重做（正常模式）"></a>撤销与重做（正常模式）</h4><ul><li>[n] u: 取消一(n)个改动。</li><li>:undo 5 – 撤销5个改变。</li><li>:undolist – 你的撤销历史。</li><li>ctrl + r: 重做最后的改动。</li><li>U: 取消当前行中所有的改动。</li><li>:earlier 4m – 回到4分钟前</li><li>:later 55s – 前进55秒<h4 id="宏"><a href="#宏" class="headerlink" title="宏"></a>宏</h4></li><li>–重复上一个编辑动作</li><li>qa：开始录制宏a（键盘操作记录）</li><li>q：停止录制</li><li>@a：播放宏a</li></ul><h3 id="编辑特殊文件"><a href="#编辑特殊文件" class="headerlink" title="编辑特殊文件"></a>编辑特殊文件</h3><h4 id="文件加解密"><a href="#文件加解密" class="headerlink" title="文件加解密"></a>文件加解密</h4><ul><li>vim -x file 开始编辑一个加密文件</li><li>:X 为当前文件设置加密</li><li>:set key= 去除文件的密码<h4 id="文件的编码"><a href="#文件的编码" class="headerlink" title="文件的编码"></a>文件的编码</h4></li><li>:e ++enc=utf8 filename, 让vim用utf-8的编码打开这个文件。</li><li>:w ++enc=gbk，不管当前文件什么编码，把它转存成gbk编码。</li><li>:set fenc或:setfileencoding，查看当前文件的编码。</li><li>在vimrc中添加set fileencoding=ucs-bom,utf-8,cp936，vim会根据要打开的文件选择合适的编码。 注意：编码之间不要留空格。 cp936对应于gbk编码。 ucs-bom对应于windows下的文件格式。</li></ul><h3 id="编程辅助"><a href="#编程辅助" class="headerlink" title="编程辅助"></a>编程辅助</h3><ul><li>gd: 跳转到局部变量的定义处；</li><li>gD: 跳转到全局变量的定义处，从当前文件开头开始搜索；</li><li>g;: 上一个修改过的地方；</li><li>g,: 下一个修改过的地方；</li><li>[[: 跳转到上一个函数块开始，需要有单独一行的{。</li><li>]]: 跳转到下一个函数块开始，需要有单独一行的{。</li><li>[]: 跳转到上一个函数块结束，需要有单独一行的}。</li><li>][: 跳转到下一个函数块结束，需要有单独一行的}。</li><li>[{: 跳转到当前块开始处；</li><li>]}: 跳转到当前块结束处；</li><li>[/: 跳转到当前注释块开始处；</li><li>]/: 跳转到当前注释块结束处；</li><li>%: 不仅能移动到匹配的(),{}或[]上，而且能在#if，#else， #endif之间跳跃。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;\assets\js\APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;不知不觉，vim已经使用快一年了，虽然不是经常使用，这就导致每次使用时一些命令还是模糊，需要查查文档才能正确使用，因此就这篇博客分享给学习
      
    
    </summary>
    
      <category term="Linux" scheme="https://LiuZiQiao.github.io/categories/Linux/"/>
    
    
      <category term="vim" scheme="https://LiuZiQiao.github.io/tags/vim/"/>
    
  </entry>
  
  <entry>
    <title>MergeTwoSortedArray</title>
    <link href="https://LiuZiQiao.github.io/2018/09/20/MergeTwoSortedArray/"/>
    <id>https://LiuZiQiao.github.io/2018/09/20/MergeTwoSortedArray/</id>
    <published>2018-09-19T22:59:05.000Z</published>
    <updated>2018-09-21T13:06:20.277Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><a id="more"></a><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>给定两个有序整数数组 nums1 和 nums2，将 nums2 合并到 nums1 中，使得 num1 成为一个有序数组。</p><p>说明:</p><p>初始化 nums1 和 nums2 的元素数量分别为 m 和 n。<br>你可以假设 nums1 有足够的空间（空间大小大于或等于 m + n）来保存 nums2 中的元素。<br>示例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入:</span><br><span class="line">nums1 = [1,2,3,0,0,0], m = 3</span><br><span class="line">nums2 = [2,5,6],       n = 3</span><br><span class="line"></span><br><span class="line">输出: [1,2,2,3,5,6]</span><br></pre></td></tr></table></figure></p><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p>思路：申请一个大小是两个数组的临时空间用了存放排序后的元素，先对两个数组中的元素进行判断，小的放进临时数组中，直到一个数组放完后，把另外一个数组中的元素全部拷贝进去，最后将临时数组中的元素拷贝到原数组中。<br>以下是代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>* nums1, <span class="keyword">int</span> m, <span class="keyword">int</span>* nums2, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> cur1 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> cur2 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> *tmp = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>)*(m+n));</span><br><span class="line">assert(tmp);</span><br><span class="line"><span class="built_in">memset</span>(tmp,<span class="number">0</span>, m + n);</span><br><span class="line"><span class="keyword">while</span> (cur1 &lt; m &amp;&amp; cur2 &lt; n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (nums1[cur1] &lt; nums2[cur2])</span><br><span class="line">&#123;</span><br><span class="line">tmp[index] = nums1[cur1];</span><br><span class="line">index++;</span><br><span class="line">cur1++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(nums1[cur1] &gt; nums2[cur2])</span><br><span class="line">&#123;</span><br><span class="line">tmp[index] = nums2[cur2];</span><br><span class="line">index++;</span><br><span class="line">cur2++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (nums1[cur1] == nums2[cur2])</span><br><span class="line">&#123;</span><br><span class="line">tmp[index] = nums1[cur1];</span><br><span class="line">index++;</span><br><span class="line">tmp[index] = nums2[cur2];</span><br><span class="line">index++;</span><br><span class="line">cur1++;</span><br><span class="line">cur2++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//nums2没有元素，但nums1还有元素时，拷贝到tmp中</span></span><br><span class="line"><span class="keyword">while</span> (cur1 &lt; m)</span><br><span class="line">&#123;</span><br><span class="line">tmp[index++] = nums1[cur1++];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//nums1没有元素，但nums2还有元素时，拷贝到tmp中</span></span><br><span class="line"><span class="keyword">while</span> (cur2 &lt; n)</span><br><span class="line">&#123;</span><br><span class="line">tmp[index++] = nums2[cur2++];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将tmp中的元素放回nums1中</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m+n; i++)</span><br><span class="line">&#123;</span><br><span class="line">nums1[i] = tmp[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//释放掉申请的空间</span></span><br><span class="line"><span class="built_in">free</span>(tmp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>看了上面的代码，发现又长又繁琐，我们对其简化后的代码如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Merge</span><span class="params">(<span class="keyword">int</span> *nums1,<span class="keyword">int</span> m,<span class="keyword">int</span> *nums2,<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> count = m + n - <span class="number">1</span>;</span><br><span class="line">--m, --n;</span><br><span class="line"><span class="keyword">while</span> (n&gt;=<span class="number">0</span> &amp;&amp; m&gt;=<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">nums1[count--] = nums1[m] &gt; nums2[n] ? nums1[m--] : nums2[n--];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (m &gt;= <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">nums1[count--] = nums1[m--];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;\assets\js\APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h4 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h4&gt;&lt;p&gt;给定
      
    
    </summary>
    
      <category term="每日一题" scheme="https://LiuZiQiao.github.io/categories/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
    
      <category term="Array" scheme="https://LiuZiQiao.github.io/tags/Array/"/>
    
  </entry>
  
  <entry>
    <title>RemoveDuplicates2</title>
    <link href="https://LiuZiQiao.github.io/2018/09/18/RemoveDuplicates2/"/>
    <id>https://LiuZiQiao.github.io/2018/09/18/RemoveDuplicates2/</id>
    <published>2018-09-18T08:46:12.000Z</published>
    <updated>2018-09-19T00:57:13.015Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><a id="more"></a><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><blockquote><p>Follow up for “Remove Duplicates”:<br>What if duplicates are allowed at most twice?</p><p>For example,<br>Given sorted array nums = [1,1,1,2,2,3],</p><p>Your function should return length = 5, with the first five elements of nums being 1, 1, 2, 2 and 3. It doesn\’t matter what you leave beyond the new length.   </p></blockquote><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p><strong>思路</strong>：这道题是继Remove Duplicates from Sorted Array有序数组中出去重复项，这里运行最多重复次数是二次，因此我们需要定义一个count来记录重复次数，count初始化为1，当出现一次时count减1，下次再重复出现时，快指针直接前进一步，如果这时不是重复的则count恢复为1，该数组是有序的，所以一旦不出现重复的数，后面的数一定比这个数大。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">removeDuplicates</span><span class="params">(<span class="keyword">int</span>* nums, <span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (size &lt;= <span class="number">2</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (j&lt;size)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//当nums[i]== nums[j]，count == 0时，此时这个数是第一次和后面的一个数相等</span></span><br><span class="line"><span class="keyword">if</span> (nums[i] == nums[j] &amp;&amp; count == <span class="number">0</span>) &#123;</span><br><span class="line">++j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;<span class="comment">//此时判断是否与后面的数还能相等，相等时就 --count，</span></span><br><span class="line"><span class="comment">//否则不相等count还是1，说明这个数只出现两次</span></span><br><span class="line"><span class="keyword">if</span> (nums[i] == nums[j]) &#123;</span><br><span class="line">--count;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">count = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//此时我们让第二次出现的这个数后移动一位，并放在这个数后面</span></span><br><span class="line">nums[++i] = nums[j++];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> i+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;\assets\js\APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h3&gt;&lt;bloc
      
    
    </summary>
    
      <category term="每日一题" scheme="https://LiuZiQiao.github.io/categories/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
    
      <category term="Array" scheme="https://LiuZiQiao.github.io/tags/Array/"/>
    
  </entry>
  
  <entry>
    <title>RemoveDuplicates|</title>
    <link href="https://LiuZiQiao.github.io/2018/09/18/RemoveDuplicates1/"/>
    <id>https://LiuZiQiao.github.io/2018/09/18/RemoveDuplicates1/</id>
    <published>2018-09-18T08:23:27.000Z</published>
    <updated>2018-09-19T00:57:04.954Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><a id="more"></a><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><blockquote><p>Given a sorted array, remove the duplicates in place such that each element appear only once and return the new length.</p><p>Do not allocate extra space for another array, you must do this in place with constant memory.</p><p>For example,<br>Given input array nums = [1,1,2],</p><p>Your function should return length = 2, with the first two elements of nums being 1 and 2 respectively. It doesn\’t matter what you leave beyond the new length.</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p><strong>思路</strong>：这道题是让我们去掉数组里重复项，我们使用快慢指针来记录遍历的坐标，最开始两个指针指向第一个数，如果相同，快指针走一步，如果不同，都走一步，当快指针走完整个数组时，慢指针当前的坐标加1就是数组中不同数字的个数。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">removeDuplicates</span><span class="params">(<span class="keyword">int</span>* nums, <span class="keyword">int</span> numsSize)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (numsSize &lt;= <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; numsSize; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (nums[i] != nums[j])</span><br><span class="line">&#123;</span><br><span class="line">i++;</span><br><span class="line">nums[i] = nums[j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> i + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;\assets\js\APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h3&gt;&lt;bloc
      
    
    </summary>
    
      <category term="每日一题" scheme="https://LiuZiQiao.github.io/categories/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
    
      <category term="Array" scheme="https://LiuZiQiao.github.io/tags/Array/"/>
    
  </entry>
  
  <entry>
    <title>mySqrt</title>
    <link href="https://LiuZiQiao.github.io/2018/09/16/mySqrt/"/>
    <id>https://LiuZiQiao.github.io/2018/09/16/mySqrt/</id>
    <published>2018-09-16T01:33:22.000Z</published>
    <updated>2018-09-19T00:56:55.860Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><a id="more"></a><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>实现 int sqrt(int x) 函数。</p><p>计算并返回 x 的平方根，其中 x 是非负整数。</p><p>由于返回类型是整数，结果只保留整数的部分，小数部分将被舍去。</p><p>示例 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入: 4</span><br><span class="line">输出: 2</span><br><span class="line"></span><br><span class="line">输入: 8</span><br><span class="line">输出: 2</span><br><span class="line">说明: 8 的平方根是 2.82842..., </span><br><span class="line">     由于返回类型是整数，小数部分将被舍去。</span><br></pre></td></tr></table></figure></p><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p>通过二分法来确定取值区间<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mySqrt</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x &lt;= <span class="number">0</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> res = x;</span><br><span class="line"><span class="keyword">while</span> (res*res &gt; x)</span><br><span class="line">&#123;</span><br><span class="line">res = (res + x / res) / <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;\assets\js\APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h4 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h4&gt;&lt;p&gt;实现
      
    
    </summary>
    
    
      <category term="二分法" scheme="https://LiuZiQiao.github.io/tags/%E4%BA%8C%E5%88%86%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>哈希表(下)</title>
    <link href="https://LiuZiQiao.github.io/2018/09/14/%E5%93%88%E5%B8%8C%E8%A1%A8(%E4%B8%8B)/"/>
    <id>https://LiuZiQiao.github.io/2018/09/14/哈希表(下)/</id>
    <published>2018-09-14T10:10:45.000Z</published>
    <updated>2018-09-19T10:13:22.778Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><a id="more"></a><h3 id="哈希冲突的开散列方式"><a href="#哈希冲突的开散列方式" class="headerlink" title="哈希冲突的开散列方式"></a>哈希冲突的开散列方式</h3><p>在我的博客<a href="hhttps://LiuZiQiao.github.io/2018/09/07/哈希表(上">哈希表上</a>中详细介绍了哈希的概念以及处理哈希冲突的闭散列方式。在本文章中，主要介绍处理哈希冲突的另一种方式：开散列(链地址)。</p><h4 id="开散列的概念"><a href="#开散列的概念" class="headerlink" title="开散列的概念"></a>开散列的概念</h4><p>开散列：又叫链地址法、开链法。首先对关键码集合用哈希函数计算哈希地址，具有相同哈希地址的关键码归于同一子集合中，每一个子集合称为一个桶，各个桶中的元素通过一个单链表的方式链接起来（可以头插的方式将桶中元素链接起来），链表的第一个节点存放在哈希表中。</p><h4 id="代码实现部分"><a href="#代码实现部分" class="headerlink" title="代码实现部分"></a>代码实现部分</h4><p>关于代码的编程思路，在具体代码中有详细的说明！</p><h5 id="头文件的定义"><a href="#头文件的定义" class="headerlink" title="头文件的定义"></a>头文件的定义</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> KeyType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">KeyType key;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;Node;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">HashBucket</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">KeyType size;</span><br><span class="line">KeyType capacity;</span><br><span class="line">Node ** <span class="built_in">array</span>;</span><br><span class="line">&#125;HashBucket;</span><br></pre></td></tr></table></figure><h5 id="初始化及销毁操作"><a href="#初始化及销毁操作" class="headerlink" title="初始化及销毁操作"></a>初始化及销毁操作</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">HashBucketInit</span><span class="params">(HashBucket *pHB,<span class="keyword">int</span> capacity)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">pHB-&gt;<span class="built_in">array</span> = (Node **)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node*)* capacity);</span><br><span class="line">pHB-&gt;capacity = capacity;</span><br><span class="line">pHB-&gt;size = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; capacity; i++)</span><br><span class="line">&#123;</span><br><span class="line">pHB-&gt;<span class="built_in">array</span>[i] = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ListDestory</span><span class="params">(Node *first)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Node *next = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">for</span> (Node *cur = first; cur != <span class="literal">NULL</span>;cur = next)</span><br><span class="line">&#123;</span><br><span class="line">next = cur-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(cur);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">HashBucketDestory</span><span class="params">(HashBucket *pHB)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//需要先释放哈希桶 链表</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pHB-&gt;capacity; i++)</span><br><span class="line">&#123;</span><br><span class="line">ListDestory(pHB-&gt;<span class="built_in">array</span>[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//释放哈希桶</span></span><br><span class="line"><span class="built_in">free</span>(pHB-&gt;<span class="built_in">array</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="查找操作"><a href="#查找操作" class="headerlink" title="查找操作"></a>查找操作</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Node *<span class="title">HashFind</span><span class="params">(HashBucket* pHB,KeyType key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> index = key % pHB-&gt;capacity;</span><br><span class="line">Node *cur = pHB-&gt;<span class="built_in">array</span>[index];</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (cur != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (cur-&gt;key == key)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> cur;</span><br><span class="line">&#125;</span><br><span class="line">cur = cur-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="插入操作"><a href="#插入操作" class="headerlink" title="插入操作"></a>插入操作</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">HashInsert</span><span class="params">(HashBucket *pHB, <span class="keyword">int</span> key)</span></span>;</span><br><span class="line"><span class="comment">//插入之前我们判断是否需要扩容</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">IsExtend</span><span class="params">(HashBucket *pHB)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (pHB-&gt;size&lt;pHB-&gt;capacity)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">HashBucket *newHB = <span class="literal">NULL</span>;</span><br><span class="line">HashBucketInit(newHB,pHB-&gt;capacity*<span class="number">2</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pHB-&gt;capacity * <span class="number">2</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (Node *cur = pHB-&gt;<span class="built_in">array</span>[i]; cur != <span class="literal">NULL</span>;cur = cur-&gt;next)</span><br><span class="line">&#123;</span><br><span class="line">HashInsert(newHB,cur-&gt;key);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">HashBucketDestory(pHB);</span><br><span class="line">pHB-&gt;<span class="built_in">array</span> = newHB-&gt;<span class="built_in">array</span>;</span><br><span class="line">pHB-&gt;capacity = newHB-&gt;capacity;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//和开放地址不同的是，此时的插入不需要考虑负载因子</span></span><br><span class="line"><span class="comment">//插入成功返回0，失败返回-1</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">HashInsert</span><span class="params">(HashBucket *pHB,<span class="keyword">int</span> key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">IsExtend(pHB);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (HashFind(pHB,key) != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> index = key % pHB-&gt;capacity;</span><br><span class="line"></span><br><span class="line">Node *first = pHB-&gt;<span class="built_in">array</span>[index];</span><br><span class="line">Node *newNode = (Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line"></span><br><span class="line">newNode-&gt;key = key;</span><br><span class="line">newNode-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//头插</span></span><br><span class="line">newNode-&gt;next = first;</span><br><span class="line">pHB-&gt;<span class="built_in">array</span>[index] = newNode;  <span class="comment">//将新插入的结点地址改为原来在这个位置结点的地址</span></span><br><span class="line">pHB-&gt;size++;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除操作</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">HashBucketRemove</span><span class="params">(HashBucket *pHB,KeyType key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (HashFind(pHB, key) == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">Node *pre = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">int</span> index = key % pHB-&gt;capacity;</span><br><span class="line"><span class="keyword">for</span> (Node *cur = pHB-&gt;<span class="built_in">array</span>[index];cur != <span class="literal">NULL</span>;cur = cur-&gt;next)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (cur-&gt;key == key)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//删除</span></span><br><span class="line"><span class="keyword">if</span> (pre == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//如果要删除的结点是第一个结点</span></span><br><span class="line">pHB-&gt;<span class="built_in">array</span>[index] = cur-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">pre-&gt;next = cur-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">free</span>(cur);</span><br><span class="line">pHB-&gt;size--;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">pre = cur;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="打印操作"><a href="#打印操作" class="headerlink" title="打印操作"></a>打印操作</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">HashBucketPrint</span><span class="params">(HashBucket *pHB)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Node *pre = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;pHB-&gt;capacity;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (pHB-&gt;<span class="built_in">array</span>[i] != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (Node *cur = pHB-&gt;<span class="built_in">array</span>[i]; cur != <span class="literal">NULL</span>;cur = pre)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d --&gt; %p --&gt; %d\t"</span>,cur-&gt;key%pHB-&gt;capacity,cur,cur-&gt;key);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">pre = cur-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="测试操作"><a href="#测试操作" class="headerlink" title="测试操作"></a>测试操作</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">HashBucketTest</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">HashBucket hb;</span><br><span class="line">HashBucketInit(&amp;hb,<span class="number">11</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\n"</span>, HashInsert(&amp;hb, <span class="number">11</span>)==<span class="number">1</span> ? <span class="string">"插入成功"</span>:<span class="string">"插入失败"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\n"</span>, HashInsert(&amp;hb, <span class="number">13</span>)==<span class="number">1</span> ? <span class="string">"插入成功"</span>:<span class="string">"插入失败"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\n"</span>, HashInsert(&amp;hb, <span class="number">12</span>)==<span class="number">1</span> ? <span class="string">"插入成功"</span>:<span class="string">"插入失败"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\n"</span>, HashInsert(&amp;hb, <span class="number">22</span>)==<span class="number">1</span> ? <span class="string">"插入成功"</span>:<span class="string">"插入失败"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\n"</span>, HashInsert(&amp;hb, <span class="number">23</span>)==<span class="number">1</span> ? <span class="string">"插入成功"</span>:<span class="string">"插入失败"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\n"</span>, HashInsert(&amp;hb, <span class="number">16</span>)==<span class="number">1</span> ? <span class="string">"插入成功"</span>:<span class="string">"插入失败"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\n"</span>, HashInsert(&amp;hb, <span class="number">19</span>)==<span class="number">1</span> ? <span class="string">"插入成功"</span>:<span class="string">"插入失败"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\n"</span>, HashBucketRemove(&amp;hb, <span class="number">19</span>) == <span class="number">0</span> ? <span class="string">"删除成功"</span> : <span class="string">"删除失败"</span>);</span><br><span class="line"></span><br><span class="line">HashBucketPrint(&amp;hb);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;\assets\js\APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;哈希冲突的开散列方式&quot;&gt;&lt;a href=&quot;#哈希冲突的开散列方式&quot; class=&quot;headerlink&quot; title=&quot;哈希冲突
      
    
    </summary>
    
      <category term="数据结构" scheme="https://LiuZiQiao.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="链表" scheme="https://LiuZiQiao.github.io/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>ReverseNum</title>
    <link href="https://LiuZiQiao.github.io/2018/09/13/%E5%8F%8D%E8%BD%AC%E6%95%B4%E6%95%B0/"/>
    <id>https://LiuZiQiao.github.io/2018/09/13/反转整数/</id>
    <published>2018-09-13T15:01:43.000Z</published>
    <updated>2018-09-26T15:42:09.235Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><a id="more"></a><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>给定一个 32 位有符号整数，将整数中的数字进行反转。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">示例 1:</span><br><span class="line"></span><br><span class="line">输入: 123</span><br><span class="line">输出: 321</span><br><span class="line"> 示例 2:</span><br><span class="line"></span><br><span class="line">输入: -123</span><br><span class="line">输出: -321</span><br><span class="line">示例 3:</span><br><span class="line"></span><br><span class="line">输入: 120</span><br><span class="line">输出: 21</span><br></pre></td></tr></table></figure></p><p><strong>注意:</strong></p><p>假设我们的环境只能存储 32 位有符号整数，其数值范围是 [−231,  231 − 1]。根据这个假设，如果反转后的整数溢出，则返回 0。</p><h4 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h4><p><strong>Java解决方案</strong><br>安照正常的思考，我们的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (x!= <span class="number">0</span>) &#123;</span><br><span class="line">         </span><br><span class="line">temp = temp *<span class="number">10</span> +x%<span class="number">10</span>;</span><br><span class="line">x /= <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (temp &lt;Integer.MIN_VALUE||temp&gt;Integer.MAX_VALUE) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当输入1245678993<br>输出了-296201875<br>细心的人就会发现，此时栈溢出了；   </p><p>原因是多乘了一次10，解决办法就是，先判断是否已经栈溢出，再进行乘以10<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (x!= <span class="number">0</span>) &#123;</span><br><span class="line">           <span class="keyword">if</span> (temp &lt;Integer.MIN_VALUE/<span class="number">10</span>||temp&gt;Integer.MAX_VALUE/<span class="number">10</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">temp = temp *<span class="number">10</span> +x%<span class="number">10</span>;</span><br><span class="line">x /= <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>C语言解决方案</strong><br>和java一样，先判断是否越界，再进行反转操作，这里我们需要引入头文件”limits.h”<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span> x)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (x != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//正数是否越界</span></span><br><span class="line"><span class="keyword">if</span> (temp &gt; <span class="number">0</span> &amp;&amp; ((temp == INT_MAX / <span class="number">10</span> &amp;&amp; x % <span class="number">10</span> &gt; INT_MAX % <span class="number">10</span>) || temp &gt; INT_MAX / <span class="number">10</span>))</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//负数是否越界</span></span><br><span class="line"><span class="keyword">if</span> (temp &lt; <span class="number">0</span> &amp;&amp; ((temp == INT_MIN / <span class="number">10</span> &amp;&amp; x % <span class="number">10</span> &lt; (<span class="keyword">unsigned</span>)INT_MIN % <span class="number">10</span>) || temp &lt; INT_MIN / <span class="number">10</span>))</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">temp = temp * <span class="number">10</span> + x % <span class="number">10</span>;</span><br><span class="line">x /= <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;\assets\js\APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h4 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h4&gt;&lt;p&gt;给定
      
    
    </summary>
    
      <category term="每日一题" scheme="https://LiuZiQiao.github.io/categories/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
    
      <category term="java" scheme="https://LiuZiQiao.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>AddTwoNumbers</title>
    <link href="https://LiuZiQiao.github.io/2018/09/12/AddTwoNumbers/"/>
    <id>https://LiuZiQiao.github.io/2018/09/12/AddTwoNumbers/</id>
    <published>2018-09-12T04:06:40.000Z</published>
    <updated>2018-09-19T00:58:13.216Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><a id="more"></a><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>给定两个非空链表来表示两个非负整数。位数按照逆序方式存储，它们的每个节点只存储单个数字。将两数相加返回一个新的链表。</p><p>你可以假设除了数字 0 之外，这两个数字都不会以零开头。</p><p>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：(2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)</span><br><span class="line">输出：7 -&gt; 0 -&gt; 8</span><br><span class="line">原因：342 + 465 = 807</span><br></pre></td></tr></table></figure></p><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> val;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125; ListNode;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> ListNode * <span class="title">CreateNode</span><span class="params">(<span class="keyword">int</span> data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ListNode *newNode = (ListNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ListNode));</span><br><span class="line">assert(newNode);</span><br><span class="line">newNode-&gt;val = data;</span><br><span class="line">newNode-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> newNode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ListInsert</span><span class="params">(ListNode **<span class="built_in">list</span>,<span class="keyword">int</span> data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//if (*list == NULL)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line">ListNode *newNode = CreateNode(data);</span><br><span class="line"></span><br><span class="line">newNode-&gt;next = *<span class="built_in">list</span>;</span><br><span class="line">*<span class="built_in">list</span> = newNode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ListNode* <span class="title">addTwoNumbers</span><span class="params">(  ListNode *list1,<span class="keyword">const</span> ListNode *list2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> num1 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> num2 = <span class="number">0</span>;</span><br><span class="line">ListNode* l1 = list1;</span><br><span class="line">ListNode* l2 = list2;</span><br><span class="line"><span class="keyword">while</span> (l1 != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">num1 = num1*<span class="number">10</span>+l1-&gt;val;</span><br><span class="line">l1 = l1-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,num1); <span class="comment">// 321</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (l2 != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">num2 = num2*<span class="number">10</span>+l2-&gt;val;</span><br><span class="line">l2 = l2-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, num2);  <span class="comment">// 654</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> sum = num1 + num2;  <span class="comment">// 975</span></span><br><span class="line"></span><br><span class="line">ListNode *newNode = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (sum&gt;<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">ListInsert(&amp;newNode, sum %<span class="number">10</span>);</span><br><span class="line">sum = sum / <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*int lg = 1;</span></span><br><span class="line"><span class="comment">int temp = sum;</span></span><br><span class="line"><span class="comment">while (temp &gt; 10) &#123;</span></span><br><span class="line"><span class="comment">temp = temp / 10;</span></span><br><span class="line"><span class="comment">lg *= 10;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">while (sum &gt; 0) &#123;</span></span><br><span class="line"><span class="comment">ListInsert(&amp;newNode, sum/lg);</span></span><br><span class="line"><span class="comment">sum = sum - (sum / lg)*lg;</span></span><br><span class="line"><span class="comment">lg = lg / 10;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="comment">/*while (sum&gt;9)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">ListInsert(&amp;newNode,sum);</span></span><br><span class="line"><span class="comment">sum = sum % 10;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">ListInsert(&amp;newNode,sum);*/</span></span><br><span class="line"><span class="keyword">return</span> newNode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Print</span><span class="params">(<span class="keyword">int</span> sum)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (sum &lt; <span class="number">9</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>, sum);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">Print(sum/<span class="number">10</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>,sum%<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;\assets\js\APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h4 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h4&gt;&lt;p&gt;给定
      
    
    </summary>
    
      <category term="每日一题" scheme="https://LiuZiQiao.github.io/categories/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
    
      <category term="List" scheme="https://LiuZiQiao.github.io/tags/List/"/>
    
  </entry>
  
  <entry>
    <title>maxProfit</title>
    <link href="https://LiuZiQiao.github.io/2018/09/12/maxProfit/"/>
    <id>https://LiuZiQiao.github.io/2018/09/12/maxProfit/</id>
    <published>2018-09-12T02:55:17.000Z</published>
    <updated>2018-09-19T00:58:03.464Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><a id="more"></a><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。</p><p>如果你最多只允许完成一笔交易（即买入和卖出一支股票），设计一个算法来计算你所能获取的最大利润。</p><p>注意你不能在买入股票前卖出股票。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">示例 1:</span><br><span class="line"></span><br><span class="line">输入: [7,1,5,3,6,4]</span><br><span class="line">输出: 5</span><br><span class="line">解释: 在第 2 天（股票价格 = 1）的时候买入，在第 5 天（股票价格 = 6）的时候卖出，最大利润 = 6-1 = 5 。</span><br><span class="line">     注意利润不能是 7-1 = 6, 因为卖出价格需要大于买入价格。</span><br></pre></td></tr></table></figure></p><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><ul><li>C语言实现<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>* prices, <span class="keyword">int</span> pricesSize)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> s = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; pricesSize; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (j =i+<span class="number">1</span>; j &lt; pricesSize; j++)&#123;</span><br><span class="line">s = prices[j] - prices[i];</span><br><span class="line">max = (s &gt; max ? s : max);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;\assets\js\APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h4 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h4&gt;&lt;p&gt;给定
      
    
    </summary>
    
      <category term="每日一题" scheme="https://LiuZiQiao.github.io/categories/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
    
      <category term="Array" scheme="https://LiuZiQiao.github.io/tags/Array/"/>
    
  </entry>
  
  <entry>
    <title>七大排序算法</title>
    <link href="https://LiuZiQiao.github.io/2018/09/11/%E4%B8%83%E5%A4%A7%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    <id>https://LiuZiQiao.github.io/2018/09/11/七大排序算法/</id>
    <published>2018-09-11T15:14:16.000Z</published>
    <updated>2018-09-19T00:52:48.197Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><a id="more"></a><p>排序分为内部排序和外部排序，内部排序是数据记录在内存中进行排序，而外部排序是因排序的数据很大，一次不能容纳全部的排序记录，在排序过程中需要访问外存。<br>我们这里的八大排序就是内部排序。</p><p> <strong><em>快速排序：是目前基于比较的内部排序中被认为是最好的方法，当待排序的关键字是随机分布时，快速排序的平均时间最短；</em></strong></p><h4 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h4><p><strong>基本思想：</strong></p><p>在要排序的一组数中，对当前还未排好序的范围内的全部数，自上而下对相邻的两个数依次进行比较和调整，让较大的数往下沉，较小的往上冒。即：每当两相邻的数比较后发现它们的排序与排序要求相反时，就将它们互换。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//冒泡排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BubbleSort</span><span class="params">(<span class="keyword">int</span> *<span class="built_in">array</span>,<span class="keyword">int</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> flag = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">&#123;</span><br><span class="line">flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i+<span class="number">1</span>; j &lt; size; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">array</span>[i]&gt;<span class="built_in">array</span>[j])</span><br><span class="line">&#123;</span><br><span class="line">Swap(&amp;<span class="built_in">array</span>[i],&amp;<span class="built_in">array</span>[j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (flag == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h4><h5 id="单向选择排序"><a href="#单向选择排序" class="headerlink" title="单向选择排序"></a>单向选择排序</h5><p><strong>基本思想：</strong></p><p>在要排序的一组数中，选出最小（或者最大）的一个数与第1个位置的数交换；然后在剩下的数当中再找最小（或者最大）的与第2个位置的数交换，依次类推，直到第n-1个元素（倒数第二个数）和第n个元素（最后一个数）比较为止。<br><strong>操作方法：</strong></p><p>第一趟，从n 个记录中找出关键码最小的记录与第一个记录交换；</p><p>第二趟，从第二个记录开始的n-1 个记录中再选出关键码最小的记录与第二个记录交换；</p><p>以此类推…..</p><p>第i 趟，则从第i 个记录开始的n-i+1 个记录中选出关键码最小的记录与第i 个记录交换，</p><p>直到整个序列按关键码有序。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//选择排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SelectSort</span><span class="params">(<span class="keyword">int</span> *<span class="built_in">array</span>,<span class="keyword">int</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> min;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">&#123;</span><br><span class="line">min = i;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; size; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">array</span>[j] &lt; <span class="built_in">array</span>[min])</span><br><span class="line">&#123;</span><br><span class="line">min = j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (i != min)</span><br><span class="line">&#123;</span><br><span class="line">Swap(&amp;<span class="built_in">array</span>[min],&amp;<span class="built_in">array</span>[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h5 id="双向选择排序"><a href="#双向选择排序" class="headerlink" title="双向选择排序"></a>双向选择排序</h5><p><strong>基本思路</strong><br>与单向选择排序一样，在从头部开始排序的同时，我们让其从末端也进行排序，当前后前后两个下标索引相遇就停止，具体代码如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//双向选择排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SelectSort</span><span class="params">(<span class="keyword">int</span> arr[],<span class="keyword">int</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> minSpace = <span class="number">0</span>; </span><br><span class="line"><span class="keyword">int</span> maxSpace = size - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (minSpace &lt; maxSpace)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> minPos = minSpace;</span><br><span class="line"><span class="keyword">int</span> maxPos = minSpace;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = minSpace +<span class="number">1</span>; i &lt;= maxSpace; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (arr[i] &gt; arr[maxPos])</span><br><span class="line">&#123;</span><br><span class="line">maxPos = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (arr[i] &lt; arr[minPos])</span><br><span class="line">&#123;</span><br><span class="line">minPos = i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Swap(arr + minSpace,arr + minPos);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (minSpace == maxPos)</span><br><span class="line">&#123;</span><br><span class="line">maxPos = minPos;</span><br><span class="line">&#125;</span><br><span class="line">Swap(arr + maxSpace,arr + maxPos);</span><br><span class="line">minSpace++;</span><br><span class="line">maxSpace--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序:"></a>插入排序:</h4><p><strong>基本思想</strong><br>将一个记录插入到已排序好的有序表中，从而得到一个新，记录数增1的有序表。即：先将序列的第1个记录看成是一个有序的子序列，然后从第2个记录逐个进行插入，直至整个序列有序为止。</p><p>要点：设立哨兵，作为临时存储和判断数组边界之用。<br>如果碰见一个和插入元素相等的，那么插入元素把想插入的元素放在相等元素的后面。所以，相等元素的前后顺序没有改变，从原无序序列出去的顺序就是排好序后的顺序，所以插入排序是稳定的。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//直接插入排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InsertSort</span><span class="params">(<span class="keyword">int</span> *<span class="built_in">array</span>, <span class="keyword">int</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> temp,i,j;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; size; i++)</span><br><span class="line">&#123;</span><br><span class="line">temp = <span class="built_in">array</span>[i];<span class="comment">//取出一个未排序的数</span></span><br><span class="line"><span class="keyword">for</span> (j = i<span class="number">-1</span>; j &gt;= <span class="number">0</span> ;j--) <span class="comment">//在排序序列中查找位置</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(temp&lt;<span class="built_in">array</span>[j])</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">array</span>[j + <span class="number">1</span>] = <span class="built_in">array</span>[j]; <span class="comment">// 向后移动数据</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">array</span>[j+<span class="number">1</span>] = temp;  <span class="comment">//将数据插入</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//优化后的插入排序--折半插入排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BinaryInsertSort</span><span class="params">(<span class="keyword">int</span> *<span class="built_in">array</span>,<span class="keyword">int</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, j, left, right, mid;</span><br><span class="line"><span class="keyword">int</span> key;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i&lt;size;i++)</span><br><span class="line">&#123;</span><br><span class="line">key = <span class="built_in">array</span>[i];</span><br><span class="line">left = <span class="number">0</span>;</span><br><span class="line">right = i - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (left &lt;= right)</span><br><span class="line">&#123;</span><br><span class="line">mid = left + (right - left);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">array</span>[mid]&lt;= key)</span><br><span class="line">&#123;</span><br><span class="line">left = mid + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">right = mid - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (j = i; j&gt;left; j--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">array</span>[j] = <span class="built_in">array</span>[j - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">array</span>[left] = key;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//希尔排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShellSort</span><span class="params">(<span class="keyword">int</span> *arr,<span class="keyword">int</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> d, i, j, x;</span><br><span class="line">d = size / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">while</span>(d&gt;=<span class="number">1</span>)  <span class="comment">//循环至增量为1时结束</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> ( i = d; i &lt; size; i++)</span><br><span class="line">&#123;</span><br><span class="line">x = arr[i];  <span class="comment">//获取序列中的下一个数据</span></span><br><span class="line">j = i - d;<span class="comment">// 序列中前一个数据的序号</span></span><br><span class="line"><span class="keyword">while</span> (j &gt;= <span class="number">0</span>&amp;&amp;arr[j]&gt;x) <span class="comment">// 下一个数大于前一个数</span></span><br><span class="line">&#123;</span><br><span class="line">arr[j + d] = arr[j];  <span class="comment">//将后一个数向前移动</span></span><br><span class="line">j = j - d;<span class="comment">//修改序号，继续向前比较</span></span><br><span class="line">&#125;</span><br><span class="line">arr[j + d] = x;  <span class="comment">//保存数据</span></span><br><span class="line">&#125;</span><br><span class="line">d /= <span class="number">2</span>;  <span class="comment">//缩小增量</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h4><p>堆排序:树形选择排序，将带排序记录看成完整的二叉树，第一步：建立初堆，第二步：调整堆   </p><h5 id="方案一：降序排序，建立小堆"><a href="#方案一：降序排序，建立小堆" class="headerlink" title="方案一：降序排序，建立小堆"></a>方案一：降序排序，建立小堆</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第二步：调整堆</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">HeapAdjust</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> s, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//调整为小根堆，从小到大</span></span><br><span class="line"><span class="keyword">int</span> rc = arr[s];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">2</span> * s; j &lt;= n; j *= <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (j&lt;n &amp;&amp; arr[j]&gt;arr[j + <span class="number">1</span>])<span class="comment">//判断左右子数大小</span></span><br><span class="line">j++;</span><br><span class="line"><span class="keyword">if</span> (rc &lt;= arr[j])</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">arr[s] = arr[j];</span><br><span class="line">s = j;</span><br><span class="line">&#125;</span><br><span class="line">arr[s] = rc;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//第一步：建初堆</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreatHeap</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//小根堆</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = n / <span class="number">2</span>; i &gt; <span class="number">0</span>; i--)</span><br><span class="line">HeapAdjust(arr, i, n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//整合</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">HeapSort</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">CreatHeap(arr, n);<span class="comment">//第一步，建立初堆</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt; <span class="number">1</span>; i--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x = arr[<span class="number">1</span>];<span class="comment">//堆顶与最后一个元素互换</span></span><br><span class="line">arr[<span class="number">1</span>] = arr[i];</span><br><span class="line">arr[i] = x;</span><br><span class="line">HeapAdjust(arr, <span class="number">1</span>, i - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="方案二：升序排序，建立大堆"><a href="#方案二：升序排序，建立大堆" class="headerlink" title="方案二：升序排序，建立大堆"></a>方案二：升序排序，建立大堆</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AdjustDown</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> size, <span class="keyword">int</span> root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span>right = <span class="number">0</span>;;</span><br><span class="line"><span class="keyword">int</span> maxChild = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">left = <span class="number">2</span> * root + <span class="number">1</span>;</span><br><span class="line">right = <span class="number">2</span> * root + <span class="number">2</span>;</span><br><span class="line"><span class="comment">//判断左孩子是否越界</span></span><br><span class="line"><span class="keyword">if</span> (left &gt;= size)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断左右孩子谁是最大的</span></span><br><span class="line">maxChild = left;   <span class="comment">//假设是左孩子</span></span><br><span class="line"><span class="keyword">if</span> (right &lt;size &amp;&amp; arr[right] &gt; arr[left])</span><br><span class="line">&#123;</span><br><span class="line">maxChild = right;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断最大的是不是在根处，不是的话进行交换</span></span><br><span class="line"><span class="keyword">if</span> (arr[root] &gt;= arr[maxChild])</span><br><span class="line">&#123;  <span class="comment">//判断是否满足大堆性质</span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">Swap(&amp;arr[root],&amp;arr[maxChild]);</span><br><span class="line"></span><br><span class="line">root = maxChild;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">HeapSort</span><span class="params">(<span class="keyword">int</span> arr[],<span class="keyword">int</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//建立初堆</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = (size - <span class="number">2</span>) / <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">&#123;</span><br><span class="line">AdjustDown(arr, size, i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; size - <span class="number">1</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line">Swap(&amp;arr[<span class="number">0</span>],&amp;arr[size-j<span class="number">-1</span>]);</span><br><span class="line">AdjustDown(arr,size-j<span class="number">-1</span>,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h4><p>思路：利用递归的方法递归划分一个无序数组，直到每个数组只有一个元素时，对相邻的两个数组进行归并。</p><h5 id="递归写法"><a href="#递归写法" class="headerlink" title="递归写法"></a>递归写法</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//归并排序</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第三步：合并两个有序数组为一个数组</span></span><br><span class="line"><span class="keyword">void</span> _MergeArray(<span class="keyword">int</span> arr[], <span class="keyword">int</span> begin, <span class="keyword">int</span> mid, <span class="keyword">int</span> end, <span class="keyword">int</span>* tmp)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> cur1 = begin;</span><br><span class="line"><span class="keyword">int</span> cur2 = mid;</span><br><span class="line"><span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (cur1 &lt; mid &amp;&amp; cur2 &lt; end)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (arr[cur1] &lt; arr[cur2])</span><br><span class="line">&#123;</span><br><span class="line">tmp[index] = arr[cur1];</span><br><span class="line">index++;</span><br><span class="line">cur1++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">tmp[index] = arr[cur2];</span><br><span class="line">index++;</span><br><span class="line">cur2++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//当cur1指向的数组元素都比较完后，cur2指向的数组还有元素时，将cur2指向的全部元素拷贝到tmp中</span></span><br><span class="line"><span class="keyword">while</span> (cur1 &lt; mid)</span><br><span class="line">&#123;</span><br><span class="line">tmp[index++] = arr[cur1++];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (cur2 &lt; end)</span><br><span class="line">&#123;</span><br><span class="line">tmp[index++] = arr[cur2++];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//最后将tmp中的元素全部拷贝到原来的数组中</span></span><br><span class="line"><span class="built_in">memcpy</span>(arr + begin, tmp, <span class="keyword">sizeof</span>(<span class="keyword">int</span>)*index);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//对无序数组进行划分为只有一个元素的数组后再对数组进行归并</span></span><br><span class="line"><span class="keyword">void</span> _MergeSort(<span class="keyword">int</span> arr[],<span class="keyword">int</span> begin,<span class="keyword">int</span> end,<span class="keyword">int</span> *tmp)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (end - begin &lt;= <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> mid = begin + (end - begin) / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">_MergeSort(arr,begin,mid,tmp);</span><br><span class="line">_MergeSort(arr, mid, end, tmp);</span><br><span class="line">_MergeArray(arr,begin,mid,end,tmp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MergeSort</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (size &lt;= <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> *tmp = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>)*size);</span><br><span class="line">_MergeSort(arr, <span class="number">0</span>, size, tmp);</span><br><span class="line"><span class="built_in">free</span>(tmp);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="非递归写法"><a href="#非递归写法" class="headerlink" title="非递归写法"></a>非递归写法</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MergeSort</span><span class="params">(<span class="keyword">int</span> arr[],<span class="keyword">int</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (size &lt;= <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> *tmp = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>)*size);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> gap = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (; gap &lt; size; gap*=<span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (;i &lt; size; i +=<span class="number">2</span>* gap)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> begin = i;</span><br><span class="line"><span class="keyword">int</span> mid = gap + i;</span><br><span class="line"><span class="keyword">if</span> (mid &gt; size)</span><br><span class="line">&#123;</span><br><span class="line">mid = size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> end = i + <span class="number">2</span> * gap;</span><br><span class="line"><span class="keyword">if</span> (end &gt; size)</span><br><span class="line">&#123;</span><br><span class="line">end = size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">_MergeArray(arr,begin,mid,end,tmp);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h4><h5 id="方法一：左右指针法"><a href="#方法一：左右指针法" class="headerlink" title="方法一：左右指针法"></a>方法一：左右指针法</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//左右指针法，选的基准值放在最右边</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Partion</span><span class="params">(<span class="keyword">int</span> arr[],<span class="keyword">int</span> left,<span class="keyword">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> pivot = arr[right];</span><br><span class="line"><span class="keyword">int</span> begin = left;</span><br><span class="line"><span class="keyword">int</span> end = right;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (begin &lt; end)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (begin &lt; end &amp;&amp;arr[begin] &lt;= pivot)</span><br><span class="line">&#123;</span><br><span class="line">begin++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (begin &lt; end &amp;&amp;arr[end] &gt;= pivot)</span><br><span class="line">&#123; </span><br><span class="line">end--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (begin == end)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Swap(arr + begin,arr + end);</span><br><span class="line">&#125;</span><br><span class="line">Swap(arr + begin, arr + right);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> begin;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="方法二：挖坑法"><a href="#方法二：挖坑法" class="headerlink" title="方法二：挖坑法"></a>方法二：挖坑法</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//挖坑法</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Partion2</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> pivot = arr[right];</span><br><span class="line"><span class="keyword">int</span> begin = left;</span><br><span class="line"><span class="keyword">int</span> end = right;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (begin &lt; end)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (begin &lt; end &amp;&amp; arr[begin] &lt;= pivot)</span><br><span class="line">&#123;</span><br><span class="line">begin++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (begin == end)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">arr[end] = arr[begin];</span><br><span class="line"> </span><br><span class="line"><span class="keyword">while</span> (begin &lt; end &amp;&amp; arr[end] &gt;= pivot)</span><br><span class="line">&#123;</span><br><span class="line">end--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">arr[begin] = arr[end];</span><br><span class="line">&#125;</span><br><span class="line">arr[begin] = pivot;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> begin;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="方法三：前后指针法"><a href="#方法三：前后指针法" class="headerlink" title="方法三：前后指针法"></a>方法三：前后指针法</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//前后指针法</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Partion3</span><span class="params">(<span class="keyword">int</span> arr[],<span class="keyword">int</span> left,<span class="keyword">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> pivot = arr[right];</span><br><span class="line"><span class="keyword">int</span> part = left;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> cur = left; cur &lt;= right; cur++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (arr[cur] &lt; pivot)</span><br><span class="line">&#123;</span><br><span class="line">Swap(arr + cur, arr + part);</span><br><span class="line">part++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Swap(arr + right, arr + part);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> part;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="快速排序-1"><a href="#快速排序-1" class="headerlink" title="快速排序"></a>快速排序</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> _QuickSort(<span class="keyword">int</span> arr[],<span class="keyword">int</span> left,<span class="keyword">int</span> right)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (left &gt;= right)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> pivot = arr[right];  <span class="comment">//选取最右边的一个作为基准值</span></span><br><span class="line"><span class="keyword">int</span> part = Partion3(arr,left,right);</span><br><span class="line">_QuickSort(arr,left,part<span class="number">-1</span>);</span><br><span class="line">_QuickSort(arr,part+<span class="number">1</span>,right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QuickSort</span><span class="params">(<span class="keyword">int</span> arr[],<span class="keyword">int</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">_QuickSort(arr, <span class="number">0</span>, size - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;\assets\js\APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;排序分为内部排序和外部排序，内部排序是数据记录在内存中进行排序，而外部排序是因排序的数据很大，一次不能容纳全部的排序记录，在排序过程中需要
      
    
    </summary>
    
      <category term="数据结构" scheme="https://LiuZiQiao.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="算法" scheme="https://LiuZiQiao.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Linux基本操作</title>
    <link href="https://LiuZiQiao.github.io/2018/09/10/Linux%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%E4%B8%8A/"/>
    <id>https://LiuZiQiao.github.io/2018/09/10/Linux基本操作上/</id>
    <published>2018-09-10T12:07:27.000Z</published>
    <updated>2018-10-01T06:43:07.056Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><a id="more"></a><h3 id="什么是Linux"><a href="#什么是Linux" class="headerlink" title="什么是Linux"></a>什么是Linux</h3><p>和Windows操作系统软件一样，Linux也是一个操作系统软件。但是和Windows不同的是，Linux是一套开放源代码程序的、并可以自由传播的类Unix操作系统软件（Unix系统是Linux系统的前身，具备很多优秀特性）。其在设计之初，就是基于Intel x86系列CPU架构的计算机的。它是一个基于POSIX的多用户、多任务并且支持多线程和多CPU的操作系统。</p><p>Linux是由世界各地成千上万的程序员设计和开发实现的。当初开发Linux系统的目的就是建立不受任何商业化软件版权制约的、全世界都能自由使用的类Unix操作系统兼容产品。在过去的20年里，Linux系统主要应用于服务器端、嵌入式开发和个人PC桌面三大领域，其中服务器端领域是重中之重。</p><p>大型、超大型互联网企业（百度、Sina、淘宝等）都在使用Linux系统作为其服务器端的程序运行平台，全球及国内排名前十的网站使用的主流系统几乎都是Linux系统。</p><p><strong>Linux操作系统之所以如此流行，是因为它具有如下一下特点：</strong></p><ul><li>开发源代码的程序，可自由修改。</li><li>Unix系统兼容，具备Unix几乎所有优秀特性。</li><li>可自由传播，无任何商业化版权制约。</li><li>适合Intel等x86 CPU系列架构的计算机。</li></ul><h3 id="目录介绍"><a href="#目录介绍" class="headerlink" title="目录介绍"></a>目录介绍</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">/ 根目录</span><br><span class="line"></span><br><span class="line">/bin 存放必要的命令</span><br><span class="line"></span><br><span class="line">/boot 存放内核以及启动所需的文件等</span><br><span class="line"></span><br><span class="line">/dev 存放设备文件</span><br><span class="line"></span><br><span class="line">/etc 存放系统的配置文件</span><br><span class="line"></span><br><span class="line">/home 用户文件的主目录，用户数据存放在其主目录中</span><br><span class="line"></span><br><span class="line">/lib 存放必要的运行库</span><br><span class="line"></span><br><span class="line">/mnt 存放临时的映射文件系统，我们常把软驱和光驱挂装在这里的floppy和cdrom子目录下。</span><br><span class="line"></span><br><span class="line">/proc 存放存储进程和系统信息</span><br><span class="line"></span><br><span class="line">/root 超级用户的主目录</span><br><span class="line"></span><br><span class="line">/sbin 存放系统管理程序</span><br><span class="line"></span><br><span class="line">/tmp 存放临时文件的目录</span><br><span class="line"></span><br><span class="line">/usr 包含了一般不需要修改的应用程序，命令程序文件、程序库、手册和其它文档。</span><br><span class="line"></span><br><span class="line">/var 包含系统产生的经常变化的文件</span><br></pre></td></tr></table></figure><h3 id="基础指令"><a href="#基础指令" class="headerlink" title="基础指令"></a>基础指令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ls: 列出目录   </span><br><span class="line">-a ：全部的文件，连同隐藏档( 开头为 . 的文件) 一起列出来(常用)   </span><br><span class="line">-d ：仅列出目录本身，而不是列出目录内的文件数据(常用)   </span><br><span class="line">-l ：长数据串列出，包含文件的属性与权限等等数据；(常用)   </span><br><span class="line"></span><br><span class="line">cd：切换目录   </span><br><span class="line">pwd：显示目前的目录   </span><br><span class="line">mkdir：创建一个新的目录   </span><br><span class="line">创建多个层次文件时，需要加  -p</span><br></pre></td></tr></table></figure><p><strong><em>示例</em></strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost]# mkdir test1/test2/test3/test4</span><br><span class="line">mkdir: cannot create directory `test1/test2/test3/test4&apos;: </span><br><span class="line">No such file or directory       &lt;== 没办法直接创建此目录啊！</span><br><span class="line">[root@localhost]# mkdir -p test1/test2/test3/test4</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rmdir：删除一个空的目录   </span><br><span class="line">cp: 复制文件或目录</span><br></pre></td></tr></table></figure><h4 id="一些常用参数"><a href="#一些常用参数" class="headerlink" title="一些常用参数"></a>一些常用参数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">-a：相当于 -pdr的意思，至于pdr请参考下列说明；(常用)</span><br><span class="line"> </span><br><span class="line">-d：若来源档为连结档的属性(link file)，则复制连结档属性而非文件本身；</span><br><span class="line"> </span><br><span class="line">-f：为强制(force)的意思，若目标文件已经存在且无法开启，则移除后再尝试一次；</span><br><span class="line"> </span><br><span class="line">-i：若目标档(destination)已经存在时，在覆盖时会先询问动作的进行(常用)</span><br><span class="line"> </span><br><span class="line">-l：进行硬式连结(hard link)的连结档创建，而非复制文件本身；</span><br><span class="line"> </span><br><span class="line">-p：连同文件的属性一起复制过去，而非使用默认属性(备份常用)；</span><br><span class="line"> </span><br><span class="line">-r：递归持续复制，用於目录的复制行为；(常用)</span><br><span class="line"> </span><br><span class="line">-s：复制成为符号连结档 (symbolic link)，亦即『捷径』文件；</span><br><span class="line"> </span><br><span class="line">-u：若 destination 比 source 旧才升级 destination ！</span><br><span class="line">- rm: 移除文件或目录</span><br></pre></td></tr></table></figure><p><strong>选项与参数：</strong></p><p>-f ：就是 force的意思，忽略不存在的文件，不会出现警告信息；<br>-i ：互动模式，在删除前会询问使用者是否动作<br>-r ：递归删除啊！最常用在目录的删除了！这是非常危险的选项！！！   </p><ul><li>mv (移动文件与目录，或修改名称)<br>-f ：force 强制的意思，如果目标文件已经存在，不会询问而直接覆盖；<br>-i ：若目标文件 (destination) 已经存在时，就会询问是否覆盖！<br>-u ：若目标文件已经存在，且 source 比较新，才会升级 (update)   </li></ul><h3 id="文件内容查看"><a href="#文件内容查看" class="headerlink" title="文件内容查看"></a>文件内容查看</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">cat  由第一行开始显示文件内容   </span><br><span class="line">tac  从最后一行开始显示，可以看出 tac 是 cat 的倒著写！   </span><br><span class="line">nl   显示的时候，顺道输出行号！   </span><br><span class="line">more 一页一页的显示文件内容   </span><br><span class="line">空白键 (space)：代表向下翻一页；   </span><br><span class="line">Enter         ：代表向下翻『一行』；   </span><br><span class="line">/字串            ：代表在这个显示的内容当中，向下搜寻『字串』这个关键字；   </span><br><span class="line">:f            ：立刻显示出档名以及目前显示的行数；  </span><br><span class="line">q            ：代表立刻离开more，不再显示该文件内容。   </span><br><span class="line">b 或 [ctrl]-b ：代表往回翻页，不过这动作只对文件有用，对管线无用。   </span><br><span class="line">less 与 more 类似，但是比 more 更好的是，他可以往前翻页！   </span><br><span class="line">空白键    ：向下翻动一页；   </span><br><span class="line">[pagedown]：向下翻动一页；   </span><br><span class="line">[pageup]  ：向上翻动一页；   </span><br><span class="line">/字串     ：向下搜寻『字串』的功能；   </span><br><span class="line">?字串     ：向上搜寻『字串』的功能；   </span><br><span class="line">n         ：重复前一个搜寻 (与 / 或 ? 有关！)   </span><br><span class="line">N         ：反向的重复前一个搜寻 (与 / 或 ?    有关！)   </span><br><span class="line">q         ：离开 less 这个程序；   </span><br><span class="line"></span><br><span class="line">head 只看头几行 </span><br><span class="line">head [参数]...[文件]</span><br><span class="line">tail 只看尾巴几行</span><br><span class="line">-f 循环读取</span><br><span class="line">-n&lt;行数&gt;显示行数</span><br></pre></td></tr></table></figure><h4 id="时间相关的指令"><a href="#时间相关的指令" class="headerlink" title="时间相关的指令"></a>时间相关的指令</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">date 显示</span><br><span class="line">date 用法：date[OPTION]...[+FORMAT]</span><br></pre></td></tr></table></figure><p><strong>Cal指令</strong><br>命令格式 ： cal[参数][月份][年份]<br><strong>find指令</strong>：（非常重要） -name<br>语法：find pathname -option<br>功能：用于在文件树中查找文件，并作出相应的处理<br><strong>grep 指令</strong><br>语法：grep[选项]搜寻字符串 文件<br>功能：在文件中搜索字符串，将找到的行打印出来<br><strong>常用选项</strong>：</p><ul><li>-i:忽略大小写的不同，所以大小写视为相同</li><li>-n:顺便输出行号</li><li>-v:反向选择，亦即显示出没有’搜寻字符串’内容的那一行    </li></ul><p><strong>zip/unzip指令</strong><br>语法：zip压缩文件.zip目录或文件<br>功能：将目录或文件压缩成zip格式</p><p>常用选项：</p><ul><li>-r递归处理，将指令目录下的所有文件和子目录一并处理   </li></ul><p>举例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">将test目录压缩： zip test.zip test/*</span><br><span class="line">解压到tmp目录：unzip test.zip -d /tmp</span><br></pre></td></tr></table></figure></p><p><strong>tar指令</strong><br>tar [-cxtzjvf]文件与目录…参数：</p><ul><li>-c:建立一个压缩文件的参数指令（create）；</li><li>-x:解压一个压缩文件的参数指令；</li><li>-t:查看tarfile里面的文件；</li><li>-z:是否同时具有gzip的属性，是否需要用gzip压缩</li><li>-j:是否同时具有bzip2的属性，是否需要用bzip2压缩</li><li>-v:压缩过程中显示文件</li><li>-f:使用档名，f用在最后</li><li>-C:解压到指定目录<h4 id="重要的几个热键"><a href="#重要的几个热键" class="headerlink" title="重要的几个热键"></a>重要的几个热键</h4></li></ul><p>[ctrl]-c:让当前程序停止<br>[ctrl]-d:通常代表着：键盘输入结束的意思<br>[Tab]:按键具有命令补全和档案补齐功能</p><h4 id="关机"><a href="#关机" class="headerlink" title="关机"></a>关机</h4><p>shutdown [选项]<br>常见选项：</p><ul><li>-h：将系统服务停止后，立即关机</li><li>-r:在将系统服务停止之后就重新启动</li><li>-t sec:-t后面加秒数，意思是过几秒关机的意思</li></ul><h4 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h4><h5 id="du命令：du-选项-文件"><a href="#du命令：du-选项-文件" class="headerlink" title="du命令：du [选项] 文件"></a>du命令：du [选项] 文件</h5><blockquote><p>功能该命令是显示指定文件以及下的所有文件占用系统数据块的情况，如果没有文件，默认为是当前工作目录</p></blockquote><ul><li><p>-a     显示所有文件对系统数据块的使用情况</p></li><li><p>-b     显示数据块大小时以字节为基本单位</p></li><li><p>-c     除了显示文件对系统数据块的使用情况外还显示出文件的总和</p></li><li><p>-s     只显示文件数据块总大小，不显示文件名</p></li><li><p>-x     只显示当前目录，但不统计子目录</p></li></ul><h5 id="df命令：du-选项-文件名"><a href="#df命令：du-选项-文件名" class="headerlink" title="df命令：du [选项] 文件名"></a>df命令：du [选项] 文件名</h5><blockquote><p>功能该命令与du命令相似，只不过是df计算的是当前文件所以数据快的使用情况（包括前不久删除的文件），而du只是计算当前存在的所有文件的数据快的使用情况</p></blockquote><ul><li><p>-a     递归显示各文件及其子目录的数据块利用</p></li><li><p>-h     方便阅读时显示</p></li><li><p>-H     和-h一样，只不过1k = 1000;而不是1024</p></li><li><p>-i     显示inode信息</p></li><li><p>-k     区块为1024字节</p></li><li><p>-T     文件系统类型</p></li></ul><h6 id="top命令"><a href="#top命令" class="headerlink" title="top命令:"></a>top命令:</h6><blockquote><p>功能：相当于windows下的资源管理器，可以查看当前CPU的使用情况，各进程的状况</p></blockquote><ul><li>-b     批处理</li></ul><ul><li>-I     忽略过失</li></ul><ul><li><p>-c     显示完整的治命令</p></li><li><p>-s     保密模式</p></li></ul><h5 id="free命令"><a href="#free命令" class="headerlink" title="free命令"></a>free命令</h5><blockquote><p>功能:显示所有内存利用率。包括实体内存，虚拟的交换文件内存，共享内存区段，以及系统使用的缓冲区等。</p></blockquote><ul><li><p>-b     以bype为单位显示</p></li><li><p>-k     以KB为单位显示</p></li><li><p>-m     以MB为单位显示</p></li><li><p>-o     不显示缓冲区</p></li><li><p>-t     显示内存总和列</p></li></ul><h5 id="pstack命令"><a href="#pstack命令" class="headerlink" title="pstack命令"></a>pstack命令</h5><blockquote><p> 功能:进程跟踪</p><h5 id="su命令"><a href="#su命令" class="headerlink" title="su命令"></a>su命令</h5><p>功能:切换用户(由root用户向普通用户切换时不需要密码，由普通用户向root用户切换时需要密码)</p></blockquote><p><strong>password命令用来修改用户命令，但需要注意，root用户可以修改任何用户的密码，但普通用户只能修改自己的密码</strong></p><h5 id="useradd"><a href="#useradd" class="headerlink" title="useradd"></a>useradd</h5><blockquote><p>useradd 选项 用户名</p></blockquote><p>添加新的用户账号使用useradd命令</p><ul><li>-c comment 指定一段注释性描述。</li><li>-d 目录 指定用户主目录，如果此目录不存在，则同时使用-m选项，可以创建主目录。</li><li>-g 用户组 指定用户所属的用户组。</li><li>-G 用户组，用户组 指定用户所属的附加组。</li><li>-s Shell文件 指定用户的登录Shell。</li><li>-u 用户号 指定用户的用户号，如果同时有-o选项，则可以重复使用其他用户的标识号。</li></ul><h5 id="sudo命令"><a href="#sudo命令" class="headerlink" title="sudo命令"></a>sudo命令</h5><blockquote><p> sudo命令以系统管理者的身份执行指令，也就是说，经由sudo所执行的指令就好像是root亲自执行。</p><p>使用权限：在/ etc / sudoers中有出现的使用者。</p></blockquote><ul><li>-V显示版本编号</li><li>-h会显示版本编号及指令的使用方式说明</li><li>-l显示出自己（执行sudo的使用者）的权限</li><li>-v因为sudo在第一次执行时或是在N分钟内没有执行（N预设为五）会问密码，这个参数是重新做一次确认，如果超过N分钟，也会问密码</li><li>-k将会强迫使用者在下一次执行sudo时问密码（不论有没有超过N分钟）</li><li>-b将要执行的指令放在背景执行</li><li>-p prompt可以更改问密码的提示语，其中％u会代换为使用者的帐号名称，％h会显示主机名称</li><li>-u username / #uid不加此参数，代表要以root的身份执行指令，而加了此参数，可以以username的身份执行指令（#uid为该用户名的使用者号码）</li><li>-s执行环境变数中的SHELL所指定的shell，或是/ etc / passwd里所指定的shell</li><li>-H将环境变数中的HOME（家目录）指定为要变更身份的使用者家目录（如不加-u参数就是系统管理者root）</li><li>command要以系统管理者身份（或以-u更改为其他人）执行的指令</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;\assets\js\APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;什么是Linux&quot;&gt;&lt;a href=&quot;#什么是Linux&quot; class=&quot;headerlink&quot; title=&quot;什么是Linux
      
    
    </summary>
    
      <category term="Linux" scheme="https://LiuZiQiao.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://LiuZiQiao.github.io/tags/Linux/"/>
    
  </entry>
  
</feed>
