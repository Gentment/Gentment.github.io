<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LiuxiaoKun</title>
  
  <subtitle>My Awesome Site</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-08-30T10:41:59.467Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>LiuXiaoKun</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>面向对象之封装</title>
    <link href="http://yoursite.com/2018/08/29/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%B9%8B%E5%B0%81%E8%A3%85/"/>
    <id>http://yoursite.com/2018/08/29/面向对象之封装/</id>
    <published>2018-08-28T16:03:09.000Z</published>
    <updated>2018-08-30T10:41:59.467Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h4 id="封装概述："><a href="#封装概述：" class="headerlink" title="封装概述："></a>封装概述：</h4><pre><code>封装就是隐藏对象的属性和实现细节，仅对外提供访问方式</code></pre><h4 id="封装的好处："><a href="#封装的好处：" class="headerlink" title="封装的好处："></a>封装的好处：</h4><pre><code>隐藏对象属性和实现细节，提供公共访问方式提高代码的复用性提高了安全性</code></pre><h4 id="封装原则"><a href="#封装原则" class="headerlink" title="封装原则"></a>封装原则</h4><p>  将不需要对外提供的内容隐藏起来<br>  把属性隐藏，提供公共方法对其访问</p><h4 id="关键字的介绍"><a href="#关键字的介绍" class="headerlink" title="关键字的介绍"></a>关键字的介绍</h4><p>   (1) private 关键字 ：</p><pre><code>a：修改属性的可见性来限制对属性的访问特点：是一个修饰符，可以修饰成员变量和成员方法，被修饰的成员只能在本类中被访问</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public class Person &#123;</span><br><span class="line">    private String name;</span><br><span class="line">    private int age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  这段代码中，将 name 和 age 属性设置为私有的，只能本类才能访问，其他类都访问不了，如此就对信息进行了隐藏。</p><pre><code>b： 对每个值属性提供对外的公共方法访问，也就是创建一对赋取值方法，用于对私有属性的访问 </code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public class Person&#123;</span><br><span class="line">    private String name;</span><br><span class="line">    private int age;</span><br><span class="line">​</span><br><span class="line">    public int getAge()&#123;</span><br><span class="line">      return age;</span><br><span class="line">    &#125;</span><br><span class="line">​</span><br><span class="line">    public String getName()&#123;</span><br><span class="line">      return name;</span><br><span class="line">    &#125;</span><br><span class="line">​</span><br><span class="line">    public void setAge(int age)&#123;</span><br><span class="line">      this.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">​</span><br><span class="line">    public void setName(String name)&#123;</span><br><span class="line">      this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>   (2) this 关键字：是为了解决实例变量（private String name）和局部变量（setName(String name)中的name变量）之间发生的同名的冲突。</p><pre><code>特点：代表当前对象的引用</code></pre><p><strong><em>以下是一个java封装实例</em></strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">public class Test&#123;</span><br><span class="line"> </span><br><span class="line">   private String name;</span><br><span class="line">   private String idNum;</span><br><span class="line">   private int age;</span><br><span class="line"> </span><br><span class="line">   public int getAge()&#123;</span><br><span class="line">      return age;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   public String getName()&#123;</span><br><span class="line">      return name;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   public String getIdNum()&#123;</span><br><span class="line">      return idNum;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   public void setAge( int newAge)&#123;</span><br><span class="line">      age = newAge;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   public void setName(String newName)&#123;</span><br><span class="line">      name = newName;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   public void setIdNum( String newId)&#123;</span><br><span class="line">      idNum = newId;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>public方法是外部类访问该类成员变量的入口。</strong></p><p>通常情况下，这些方法被称为getter和setter方法。</p><p><strong><em>因此，任何要访问类中私有成员变量的类都要通过这些getter和setter方法。</em></strong></p><p>通过如下的例子说明Test类的变量怎样被访问：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class RunEncap&#123;</span><br><span class="line">   public static void main(String args[])&#123;</span><br><span class="line">      Test test= new Test();</span><br><span class="line">      test.setName(&quot;James&quot;);</span><br><span class="line">      test.setAge(20);</span><br><span class="line">      test.setIdNum(&quot;12343ms&quot;);</span><br><span class="line"> </span><br><span class="line">      System.out.print(&quot;Name : &quot; + test.getName()+ </span><br><span class="line">                             &quot; Age : &quot;+ test.getAge());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>以上代码编译运行结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Name : James Age : 20</span><br></pre></td></tr></table></figure></p><p><strong><em>本人学习总结所用，如有纰漏错误之处请指正，定虚心学习改正！谢谢。</em></strong></p><p><strong>不为失败找借口，只为成功找方法！！！！</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;\assets\js\APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h4 id=&quot;封装概述：&quot;&gt;&lt;a href=&quot;#封装概述：&quot; class=&quot;headerlink&quot; title=&quot;封装概述：&quot;&gt;&lt;/a&gt;封装概述：&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;
      
    
    </summary>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>二叉堆</title>
    <link href="http://yoursite.com/2018/08/28/%E4%BA%8C%E5%8F%89%E5%A0%86/"/>
    <id>http://yoursite.com/2018/08/28/二叉堆/</id>
    <published>2018-08-28T00:44:48.000Z</published>
    <updated>2018-08-29T15:27:40.547Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><a id="more"></a><h4 id="堆的概念"><a href="#堆的概念" class="headerlink" title="堆的概念"></a>堆的概念</h4><ul><li>如果有一个关键码的集合K = {k0，k1， k2，…，kn-1}，把它的所有元<br>素按完全二叉树的顺序存储方式存储在一个一维数组中，并满足：<br>Ki &lt;= K2<em>i+1 且 Ki&lt;= K2</em>i+2 (Ki &gt;= K2<em>i+1 且 Ki &gt;= K2</em>i+2) i = 0，1，2…，则称为小堆(或大堆)。   </li><li><p>小堆(大堆)中：任一结点的关键码均小于(大于)等于它的左右孩子的关键码，位于堆顶结点的关键码最小(最大)，从根节点到每个结点的路径上数组元素组成的序列都是递增(递减)的</p></li><li><p>堆存储在下标为0开始的数组中，因此在堆中给定下标为i的结点时：<br>(1)如果i=0，结点i是根节点，没有双亲节点；否则结点i的双亲结点为结点(i-1)/2<br>(2)如果2 <em> i + 1 &lt;= n - 1，则结点i的左孩子为结点2 </em> i + 1，否则结点i无左孩子<br>(3)如果2 <em> i + 2 &lt;= n - 1，则结点i的右孩子为结点2 </em> i + 2，否则结<br>点i无右孩子</p></li></ul><h4 id="堆的实现"><a href="#堆的实现" class="headerlink" title="堆的实现"></a>堆的实现</h4><p><strong><em>将二叉树调整为最小堆的原理：<br>从最后一个非叶子结点开始调整，一直到根节点为止，将每个结点及其子树调整到满足小堆的性质即可</em></strong></p><h5 id="头文件的定义"><a href="#头文件的定义" class="headerlink" title="头文件的定义"></a>头文件的定义</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#pragma once</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">#define MAX_SIZE 100</span><br><span class="line"></span><br><span class="line">typedef struct Heap&#123;</span><br><span class="line">int array[MAX_SIZE];</span><br><span class="line">int size;</span><br><span class="line">&#125;Heap;</span><br></pre></td></tr></table></figure><h5 id="堆的初始化"><a href="#堆的初始化" class="headerlink" title="堆的初始化"></a>堆的初始化</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">void HeapInit(Heap *pH,int arr[],int size)</span><br><span class="line">&#123;</span><br><span class="line">for (int i = 0; i &lt; pH-&gt;size; i++)</span><br><span class="line">&#123;</span><br><span class="line">pH-&gt;array[i] = arr[i];</span><br><span class="line">&#125;</span><br><span class="line">pH-&gt;size = size;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="堆的创建"><a href="#堆的创建" class="headerlink" title="堆的创建"></a>堆的创建</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">//向下调整</span><br><span class="line">void HeaoAdjustDown(Heap *pH,int root)</span><br><span class="line">&#123;</span><br><span class="line">int parent = root;</span><br><span class="line"></span><br><span class="line">while (1)</span><br><span class="line">&#123;</span><br><span class="line">//当左孩子存在时</span><br><span class="line">int left = parent * 2 + 1;</span><br><span class="line">//判断左孩子是否越界</span><br><span class="line">if (left &gt;= pH-&gt;size)</span><br><span class="line">&#123;</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//当一定有右孩子时</span><br><span class="line">int MaxChild = left;</span><br><span class="line">if (parent*2+2&lt;pH-&gt;size &amp;&amp; pH-&gt;array[parent*2+2]&gt;MaxChild)</span><br><span class="line">&#123;</span><br><span class="line">MaxChild = parent * 2 + 2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if (pH-&gt;array[parent]&gt;pH-&gt;array[MaxChild])</span><br><span class="line">&#123;</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int temp = pH-&gt;array[parent];</span><br><span class="line">pH-&gt;array[parent] = pH-&gt;array[MaxChild];</span><br><span class="line">pH-&gt;array[MaxChild] = temp;</span><br><span class="line"></span><br><span class="line">parent = MaxChild;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//创建堆</span><br><span class="line">void HeapMake(Heap *pH)</span><br><span class="line">&#123;</span><br><span class="line">for (int i = (pH-&gt;size-2)/2; i &gt; 0; i--)</span><br><span class="line">&#123;</span><br><span class="line">HeaoAdjustDown(pH,i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="堆的插入操作"><a href="#堆的插入操作" class="headerlink" title="堆的插入操作"></a>堆的插入操作</h5><p><strong><em>堆的插入：在已经建成的最小堆的后面插入新元素，插入之后，当树中结点不满足堆的性质时，就需要对堆进行重新调整</em></strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//插入</span><br><span class="line">void HeapPush(Heap *pH,int data)</span><br><span class="line">&#123;</span><br><span class="line">assert(pH-&gt;size &lt; MAX_SIZE);</span><br><span class="line">pH-&gt;array[pH-&gt;size++] = data;</span><br><span class="line">HeapAdjustUp(pH, pH-&gt;size - 1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h5 id="堆的插入操作-1"><a href="#堆的插入操作-1" class="headerlink" title="堆的插入操作"></a>堆的插入操作</h5><p><strong><em>堆的删除：删除时每次删除堆顶元素</em></strong><br>具体方法：将最后一个元素顶替堆顶元素，将堆中元素个数减少一个，相当于将堆中最后一个元素删掉，此时堆结构可能破坏，在向下调整使其满足堆的性质<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//删除</span><br><span class="line">void HeapPop(Heap *pH)</span><br><span class="line">&#123;</span><br><span class="line">pH-&gt;array[0] = pH-&gt;array[pH-&gt;size - 1];</span><br><span class="line">pH-&gt;size--;</span><br><span class="line"></span><br><span class="line">HeapAdjustUp(pH, 0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">//升序</span><br><span class="line">void HeapSort(int array[],int size)</span><br><span class="line">&#123;</span><br><span class="line">//建立大堆</span><br><span class="line">for ( int i = (size-2)/2; i &gt; 0;  i--)</span><br><span class="line">&#123;</span><br><span class="line">ArrayAdjustDown(array,size,i);</span><br><span class="line">&#125;</span><br><span class="line">//开始排序</span><br><span class="line">for (int j = 0; j &lt; size; j++)</span><br><span class="line">&#123;</span><br><span class="line">int s = size - 1 - j;</span><br><span class="line">Swap(array, array + s);</span><br><span class="line">ArrayAdjustDown(array, size - 1 - j, 0);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="查找最小-大-的前K个数"><a href="#查找最小-大-的前K个数" class="headerlink" title="查找最小(大)的前K个数"></a>查找最小(大)的前K个数</h4><p><strong><em>100亿个数中找出最小的前K个数（海量数据top K问题）</em></strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">int *TopK(int array[],int size,int k)</span><br><span class="line">&#123;</span><br><span class="line">int *heapArray = (int *)malloc(k * sizeof(int));</span><br><span class="line">assert(heapArray);</span><br><span class="line"></span><br><span class="line">//搬前K个数</span><br><span class="line">for (int i = 0; i &lt; k; i++)</span><br><span class="line">&#123;</span><br><span class="line">heapArray[i] = array[i];</span><br><span class="line">&#125;</span><br><span class="line">//建立堆(大堆)</span><br><span class="line">for ( int j = (k-2)/2; j &gt;= 0; j--)</span><br><span class="line">&#123;</span><br><span class="line">ArrayAdjustDown(heapArray,k,j);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//将第K个与堆中最大元素比较</span><br><span class="line">for (int i = k; i &lt; size; i++)</span><br><span class="line">&#123;</span><br><span class="line">if (array[i] &gt;= heapArray[0])</span><br><span class="line">&#123;</span><br><span class="line">continue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">heapArray[0] = array[i];     //替换堆中最大元素</span><br><span class="line">ArrayAdjustDown(heapArray,k,0);</span><br><span class="line">&#125;</span><br><span class="line">return heapArray;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h5 id="测试部分"><a href="#测试部分" class="headerlink" title="测试部分"></a>测试部分</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">void TestHeap()</span><br><span class="line">&#123;</span><br><span class="line">int array[] = &#123; 53, 17, 78, 9, 45, 65, 87, 23, 31 &#125;;</span><br><span class="line">int size = sizeof(array) / sizeof(int);</span><br><span class="line"></span><br><span class="line">Heapheap;</span><br><span class="line">HeapInit(&amp;heap, array, size);</span><br><span class="line">HeapMake(&amp;heap);</span><br><span class="line"></span><br><span class="line">printf(&quot;建堆完成\n&quot;);</span><br><span class="line"></span><br><span class="line">//查找最小的前K个数</span><br><span class="line">int array[] = &#123; 1,4,9,4,5,2,7,8,5,3,6,6,2,3 &#125;;</span><br><span class="line">int sz = sizeof(array) / sizeof(array[0]);</span><br><span class="line"></span><br><span class="line">int *ret = TopK(array, sz, 10);</span><br><span class="line"></span><br><span class="line">for (int i = 0; i &lt; 10; i++)</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;%d &quot;,ret[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;\assets\js\APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h4 id=&quot;堆的概念&quot;&gt;&lt;a href=&quot;#堆的概念&quot; class=&quot;headerlink&quot; title=&quot;堆的概念&quot;&gt;&lt;/a&gt;堆的概念&lt;/
      
    
    </summary>
    
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="堆" scheme="http://yoursite.com/tags/%E5%A0%86/"/>
    
  </entry>
  
  <entry>
    <title>面向对象之类以及内部类</title>
    <link href="http://yoursite.com/2018/08/28/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%B9%8B%E5%86%85%E9%83%A8%E7%B1%BB/"/>
    <id>http://yoursite.com/2018/08/28/面向对象之内部类/</id>
    <published>2018-08-28T00:40:24.000Z</published>
    <updated>2018-08-28T00:52:24.507Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h3 id="面向对象之内部类"><a href="#面向对象之内部类" class="headerlink" title="面向对象之内部类"></a>面向对象之内部类</h3><h4 id="类及其常见修饰符"><a href="#类及其常见修饰符" class="headerlink" title="类及其常见修饰符"></a>类及其常见修饰符</h4><ul><li>A：修饰符<br>权限修饰符  private 默认的，protected，public<br>状态修饰符  static，final<br>抽象修饰符  abstract</li><li>B：类<br>权限修饰符  默认的，public<br>状态修饰符  final<br>抽象修饰符  abstract</li><li>C：成员变量<br>权限修饰符  private 默认的，protected，public<br>状态修饰符  static，final</li><li>D：构造方法<br>权限修饰符  private 默认的，protected，public</li><li>E：成员方法：<br>  权限修饰符：private，默认的，protected，public<br>  状态修饰符：static，final<br>  抽象修饰符：abstract    </li><li>F：除此以外的组合规则：<ul><li>成员变量：public static final</li><li>成员方法：<ul><li>public static </li><li>public abstract</li><li>public final<br>内部类访问特点<br>a:内部类可以直接访问外部类的成员，包括私有。<br>b:外部类要访问内部类的成员，必须创建对象。<br>外部类名.内部类名 对象名 = 外部类对象.内部类对象;<br>案例演示<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">public class test &#123;</span><br><span class="line"> </span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">Outer.Inner  io = new Outer().new Inner();</span><br><span class="line">io.print();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">class Outer&#123;</span><br><span class="line">public int num = 10;</span><br><span class="line">public class Inner&#123;</span><br><span class="line">public int num = 20;</span><br><span class="line">public void print() &#123;</span><br><span class="line">int num = 30;</span><br><span class="line">System.out.println(num);</span><br><span class="line">System.out.println(this.num);</span><br><span class="line">System.out.println(Outer.this.num);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output：</span><br><span class="line">30</span><br><span class="line">20</span><br><span class="line">10</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h4 id="静态类及其方法访问"><a href="#静态类及其方法访问" class="headerlink" title="静态类及其方法访问"></a>静态类及其方法访问</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">public class test2 &#123;</span><br><span class="line"> </span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">Outer.Inner oi = new Outer.Inner();</span><br><span class="line">oi.method();</span><br><span class="line">Outer.Inner2.method2();//静态方法调用</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">class Outer&#123;</span><br><span class="line">static class Inner&#123;</span><br><span class="line">public void method() &#123;</span><br><span class="line">System.out.println(&quot;method&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">static class Inner2&#123;</span><br><span class="line">public static void method2() &#123;</span><br><span class="line">System.out.println(&quot;method2&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="私有类及其访问特点"><a href="#私有类及其访问特点" class="headerlink" title="私有类及其访问特点"></a>私有类及其访问特点</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public class test1 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">Outer oi = new Outer();</span><br><span class="line">oi.print();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">class Outer&#123;</span><br><span class="line">private int num = 30;</span><br><span class="line">private class Inner&#123;</span><br><span class="line">private int num = 20;</span><br><span class="line">private void method() &#123;</span><br><span class="line">System.out.println(num);   //20</span><br><span class="line">System.out.println(Outer.this.num);  //30</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">public void print() &#123;</span><br><span class="line">Inner inner = new Inner();</span><br><span class="line">inner.method();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>匿名类<br>。。。未完待续</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;\assets\js\APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h3 id=&quot;面向对象之内部类&quot;&gt;&lt;a href=&quot;#面向对象之内部类&quot; class=&quot;headerlink&quot; title=&quot;面向对象之内部类&quot;&gt;&lt;/a&gt;面向对象之内部类&lt;/h3
      
    
    </summary>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>二叉树基本操作下</title>
    <link href="http://yoursite.com/2018/08/26/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%E4%B8%8B/"/>
    <id>http://yoursite.com/2018/08/26/二叉树基本操作下/</id>
    <published>2018-08-26T13:43:52.000Z</published>
    <updated>2018-08-28T13:27:17.893Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h3 id="二叉树进阶"><a href="#二叉树进阶" class="headerlink" title="二叉树进阶"></a>二叉树进阶</h3><h4 id="将三种递归遍历改写成非递归遍历形式"><a href="#将三种递归遍历改写成非递归遍历形式" class="headerlink" title="将三种递归遍历改写成非递归遍历形式"></a>将三种递归遍历改写成非递归遍历形式</h4><p><strong>头文件引用</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#pragma once</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">二叉树的遍历非递归、层序遍历、是否是完全二叉树</span><br><span class="line">*/</span><br><span class="line">#include &quot;BTree.h&quot;</span><br><span class="line">#include &quot;Stack.h&quot;   //递归遍历用stack完成</span><br><span class="line">#include &quot;Queue.h&quot;  //层序遍历用queue完成</span><br></pre></td></tr></table></figure></p><p><strong>先序遍历</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">void preOrderTraverse(BTreeNode *root)</span><br><span class="line">&#123;</span><br><span class="line">BTreeNode *cur = root;</span><br><span class="line">BTreeNode *top = NULL;</span><br><span class="line">Stack stack;</span><br><span class="line">StackInit(&amp;stack);</span><br><span class="line">while (cur != NULL || !StackEmpty(&amp;stack))</span><br><span class="line">&#123;</span><br><span class="line">while (cur != NULL)</span><br><span class="line">&#123;</span><br><span class="line">StackPush(&amp;stack, cur);</span><br><span class="line">printf(&quot;%d &quot;, cur-&gt;data);</span><br><span class="line">cur = cur-&gt;LeftChild;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">top = StackTop(&amp;stack);</span><br><span class="line">StackPop(&amp;stack);</span><br><span class="line">cur = top-&gt;RightChild;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>中序遍历</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">void inOrderTraverse(BTreeNode *root)</span><br><span class="line">&#123;</span><br><span class="line">BTreeNode *cur = root;</span><br><span class="line">BTreeNode *top;</span><br><span class="line">Stack stack;</span><br><span class="line">StackInit(&amp;stack);</span><br><span class="line">while (cur != NULL || !StackEmpty(&amp;stack))</span><br><span class="line">&#123;</span><br><span class="line">while (cur!=NULL)</span><br><span class="line">&#123;</span><br><span class="line">StackPush(&amp;stack, cur);</span><br><span class="line">cur = cur-&gt;LeftChild;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">top = StackTop(&amp;stack);</span><br><span class="line">printf(&quot;%d &quot;,top-&gt;data);</span><br><span class="line">StackPop(&amp;stack);</span><br><span class="line">cur = top-&gt;RightChild;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>后序遍历</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">void lastOrderTraverse(BTreeNode *root)</span><br><span class="line">&#123;</span><br><span class="line">BTreeNode *cur = root;</span><br><span class="line">BTreeNode *top,*last = NULL;</span><br><span class="line">Stack stack;</span><br><span class="line">StackInit(&amp;stack);</span><br><span class="line">while (cur != NULL || !StackEmpty(&amp;stack))</span><br><span class="line">&#123;</span><br><span class="line">while (cur != NULL)</span><br><span class="line">&#123;</span><br><span class="line">StackPush(&amp;stack, cur);</span><br><span class="line">cur = cur-&gt;LeftChild;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">top = StackTop(&amp;stack);</span><br><span class="line">if (top-&gt;RightChild == NULL || top-&gt;RightChild == last)</span><br><span class="line">&#123;</span><br><span class="line">//判断右子树是否遍历过</span><br><span class="line">StackPop(&amp;stack);</span><br><span class="line">printf(&quot;%d &quot;, top-&gt;data);</span><br><span class="line">last = top;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">cur = top-&gt;RightChild;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>层序遍历非递归算法</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">//层序遍历</span><br><span class="line">void LevelTraverse(BTreeNode *root)</span><br><span class="line">&#123;</span><br><span class="line">Queue queue;</span><br><span class="line">QueueInit(&amp;queue);</span><br><span class="line">BTreeNode *pre;</span><br><span class="line"></span><br><span class="line">if (root == NULL)</span><br><span class="line">&#123;</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">QueuePush(&amp;queue,root); //存放结点地址，不是结点</span><br><span class="line">while (!QueueEmpty(&amp;queue))</span><br><span class="line">&#123;</span><br><span class="line">pre = QueueFront(&amp;queue);</span><br><span class="line">QueuePop(&amp;queue);</span><br><span class="line"></span><br><span class="line">if (pre-&gt;LeftChild != NULL)</span><br><span class="line">&#123;</span><br><span class="line">QueuePush(&amp;queue, pre-&gt;LeftChild);</span><br><span class="line">&#125;</span><br><span class="line">if (pre-&gt;RightChild != NULL)</span><br><span class="line">&#123;</span><br><span class="line">QueuePush(&amp;queue, pre-&gt;RightChild);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">printf(&quot;%d &quot;, pre-&gt;data);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="二叉树的其他操作"><a href="#二叉树的其他操作" class="headerlink" title="二叉树的其他操作"></a>二叉树的其他操作</h4><p>1.判断一棵树是不是完全二叉树<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">//判断一棵树是不是完全二叉树</span><br><span class="line">int IsCompleteBTree(BTreeNode *root)</span><br><span class="line">&#123;</span><br><span class="line">Queue queue;</span><br><span class="line">QueueInit(&amp;queue);</span><br><span class="line">BTreeNode *pre;</span><br><span class="line">//这里和层序遍历的区别：pre 可能是NULL</span><br><span class="line">if (root == NULL)</span><br><span class="line">&#123;</span><br><span class="line">//如果是完全二叉树，剩下的结点应该全是NULL</span><br><span class="line">return 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">QueuePush(&amp;queue, root);</span><br><span class="line">while (!QueueEmpty(&amp;queue))</span><br><span class="line">&#123;</span><br><span class="line">pre = QueueFront(&amp;queue);</span><br><span class="line">QueuePop(&amp;queue);</span><br><span class="line">if (pre == NULL)</span><br><span class="line">&#123;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">QueuePush(&amp;queue, pre-&gt;LeftChild);</span><br><span class="line">QueuePush(&amp;queue, pre-&gt;RightChild);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//队列剩余结点是否都是NULL</span><br><span class="line">//判定队列为空 </span><br><span class="line">while (!QueueEmpty(&amp;queue))</span><br><span class="line">&#123;</span><br><span class="line">pre = QueueFront(&amp;queue);</span><br><span class="line">QueuePop(&amp;queue);</span><br><span class="line">if (pre != NULL)</span><br><span class="line">&#123;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>2.求二叉树的镜像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">//求镜像 递归写法</span><br><span class="line">void Mirror(BTreeNode *root)</span><br><span class="line">&#123;</span><br><span class="line">if (root == NULL)</span><br><span class="line">&#123;</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Mirror(root-&gt;LeftChild);</span><br><span class="line">Mirror(root-&gt;RightChild);</span><br><span class="line"></span><br><span class="line">BTreeNode *t = root-&gt;LeftChild;</span><br><span class="line">root-&gt;LeftChild = root-&gt;RightChild;</span><br><span class="line">root-&gt;RightChild = t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//非递归写法</span><br><span class="line"></span><br><span class="line">void Mirror2(BTreeNode *root)</span><br><span class="line">&#123;</span><br><span class="line">BTreeNode *cur = root;</span><br><span class="line">BTreeNode *top, *last = NULL;</span><br><span class="line">Stack stack;</span><br><span class="line">StackInit(&amp;stack);</span><br><span class="line">while (cur != NULL || !StackEmpty(&amp;stack))</span><br><span class="line">&#123;</span><br><span class="line">while (cur != NULL)</span><br><span class="line">&#123;</span><br><span class="line">StackPush(&amp;stack, cur);</span><br><span class="line">cur = cur-&gt;LeftChild;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//top的左子树已经遍历过了</span><br><span class="line">top = StackTop(&amp;stack);</span><br><span class="line">if (top-&gt;RightChild == NULL || top-&gt;RightChild == last)</span><br><span class="line">&#123;</span><br><span class="line">//判断右子树是否遍历过</span><br><span class="line"></span><br><span class="line">BTreeNode *t = top-&gt;LeftChild;</span><br><span class="line">top-&gt;LeftChild = top-&gt;RightChild;</span><br><span class="line">top-&gt;RightChild = t;</span><br><span class="line"></span><br><span class="line">//记录这个被遍历的结点</span><br><span class="line">last = top;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">cur = top-&gt;RightChild;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.有前序遍历和中序遍历重建二叉树(前序遍历结果：1,2,3,4,5,6 ;中序遍历结果：4, 2, 5, 1, 6, 3)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">BTreeNode* CreateTree(int preOrder[],int inOrder[],int size)</span><br><span class="line">&#123;</span><br><span class="line">if (size &lt;= 0)</span><br><span class="line">&#123;</span><br><span class="line">return NULL;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int rootValue = preOrder[0];</span><br><span class="line"></span><br><span class="line">int rootIndexInOrder = -1;</span><br><span class="line">for (int i = 0; i &lt; size; i++)</span><br><span class="line">&#123;</span><br><span class="line">if (inOrder[i] == rootValue)</span><br><span class="line">&#123;</span><br><span class="line">rootIndexInOrder = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">assert(rootIndexInOrder != -1);</span><br><span class="line"></span><br><span class="line">BTreeNode *root = CreateNode(rootValue);</span><br><span class="line">root-&gt;LeftChild = CreateTree(preOrder+1,inOrder,rootIndexInOrder);</span><br><span class="line">root-&gt;RightChild = CreateTree(preOrder + 1 + rootIndexInOrder, </span><br><span class="line">inOrder + 1 + rootIndexInOrder, size - 1 - rootIndexInOrder);</span><br><span class="line"></span><br><span class="line">return root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>4.测试<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">//测试</span><br><span class="line">void TestBTree()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">int arr[] = &#123; 1, 2, 3, -1, 4, 5, -1, -1, -1, 6, -1, -1, 7, 8, -1, -1, 9, -1, 10 &#125;;</span><br><span class="line">int size = sizeof(arr) / sizeof(arr[0]);</span><br><span class="line">int pUsedSize;</span><br><span class="line"></span><br><span class="line">BTreeNode *root = CreateBTree(arr, size, &amp;pUsedSize);</span><br><span class="line"></span><br><span class="line">preOrderTraverse(root);</span><br><span class="line">printf(&quot;\n&quot;);</span><br><span class="line">inOrderTraverse(root);</span><br><span class="line">printf(&quot;\n&quot;);</span><br><span class="line">lastOrderTraverse(root);</span><br><span class="line">printf(&quot;\n&quot;);</span><br><span class="line"></span><br><span class="line">LevelTraverse(root);</span><br><span class="line">printf(&quot;\n&quot;);</span><br><span class="line"></span><br><span class="line">IsCompleteBTree(root) == 1 ? printf(&quot;是完全二叉树\n&quot;): printf(&quot;是完全二叉树\n&quot;);</span><br><span class="line"></span><br><span class="line">Mirror(root);</span><br><span class="line"></span><br><span class="line">//二叉树重建测试</span><br><span class="line">int preOrder[] = &#123; 1,2,3,4,5,6,7 &#125;;</span><br><span class="line">int inOrder[] = &#123; 2,1,4,6,7,5,3 &#125;;</span><br><span class="line">int size = sizeof(preOrder) / sizeof(int);</span><br><span class="line">BTreeNode * root = CreateTree(preOrder,inOrder,size);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;\assets\js\APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h3 id=&quot;二叉树进阶&quot;&gt;&lt;a href=&quot;#二叉树进阶&quot; class=&quot;headerlink&quot; title=&quot;二叉树进阶&quot;&gt;&lt;/a&gt;二叉树进阶&lt;/h3&gt;&lt;h4 id=&quot;将三种
      
    
    </summary>
    
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="二叉树" scheme="http://yoursite.com/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>二叉树基本操作上</title>
    <link href="http://yoursite.com/2018/08/25/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%E4%B8%8A/"/>
    <id>http://yoursite.com/2018/08/25/二叉树基本操作上/</id>
    <published>2018-08-25T00:26:19.000Z</published>
    <updated>2018-08-27T00:30:58.811Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h3 id="二叉树的概念"><a href="#二叉树的概念" class="headerlink" title="二叉树的概念"></a>二叉树的概念</h3><p>一棵二叉树是结点的一个有限集合，该集合或者为空，或者是由一个根节点加上两棵分别称为左子树和右子树的二叉树组成<br><strong>二叉树特点</strong>：</p><ul><li>每个结点最多有两棵子树，即二叉树不存在度大于2的结点</li><li>二叉树的子树有左右之分，其子树的次序不能颠倒   </li></ul><p>因此：二叉树是通过上述形式的组合或嵌套而形成   </p><h3 id="满二叉树-amp-完全二叉树"><a href="#满二叉树-amp-完全二叉树" class="headerlink" title="满二叉树&amp;完全二叉树"></a>满二叉树&amp;完全二叉树</h3><ul><li>满二叉树：在一棵二叉树中，如果所有分支结点都存在左子树和右子树，并且所有叶子节点都在同一层上</li><li>完全二叉树：如果一棵具有N个结点的二叉树的结构与满二叉树的前N个结点的结构相同，称为完全二叉树</li></ul><h3 id="二叉树的性质"><a href="#二叉树的性质" class="headerlink" title="二叉树的性质"></a>二叉树的性质</h3><ul><li>若规定根节点的层数为1，则一棵非空二叉树的第i层上最多有<br>(i&gt;0)个结点</li><li>若规定只有根节点的二叉树的深度为1，则深* 度为K的二叉树的最大<br>结点数是(k&gt;=0)</li><li>对任何一棵二叉树, 如果其叶结点个数为 n0, 度为2的非叶结点个数<br>为 n2,则有n0＝n2＋1</li><li>具有n个结点的完全二叉树的深度k为上取整<br>对于具有n个结点的完全二叉树，如果按照从上至下从左至右的顺序</li><li>对所有节点从0开始编号，则对于序号为i的结点有：<br>  1.若i&gt;0，双亲序号：(i-1)/2；<br>  i=0，i为根节点编号，无双亲结点<br>  2.若2i+1<n,左孩子序号：2i+1,否则无左孩子 3.若2i+1="">n,右孩子序号：2i+1,否则无右孩子</n,左孩子序号：2i+1,否则无左孩子></li></ul><h3 id="二叉树的存储结构"><a href="#二叉树的存储结构" class="headerlink" title="二叉树的存储结构"></a>二叉树的存储结构</h3><p><strong>二叉树主要有顺序存储和链式存储结构</strong></p><ul><li>顺序存储结构<br>对于一棵完全二叉树所有结点按照层序自顶向下，同一层自左向右顺<br>序编号，就得到一个节点的顺序序列<br>1.优点：存储完全二叉树，简单省空间<br>2.缺点：存储一般二叉树尤其单支树，存储空间利用不高</li><li>链式存储<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">struct BinTreeNode</span><br><span class="line">&#123;</span><br><span class="line">struct BinTreeNode* _pLeft; // 当前节点左孩子</span><br><span class="line">struct BinTreeNode* _pRight; // 当前节点右孩子</span><br><span class="line">DataType _data; // 当前节点值域</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><h3 id="二叉树基本操作"><a href="#二叉树基本操作" class="headerlink" title="二叉树基本操作"></a>二叉树基本操作</h3><h4 id="二叉树的创建"><a href="#二叉树的创建" class="headerlink" title="二叉树的创建"></a>二叉树的创建</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">typedef int DataType;</span><br><span class="line"></span><br><span class="line">typedef struct BTreeNode</span><br><span class="line">&#123;</span><br><span class="line">DataType data;</span><br><span class="line">struct BTreeNode *LeftChild;</span><br><span class="line">struct BTreeNode *RightChild;</span><br><span class="line">&#125; BTreeNode;</span><br><span class="line"></span><br><span class="line">//二叉树的初始化</span><br><span class="line">void BTreeInit(BTreeNode *root)</span><br><span class="line">&#123;</span><br><span class="line">root-&gt;data = 0;</span><br><span class="line">root = NULL;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//创建结点</span><br><span class="line">BTreeNode * CreateNode(DataType data)</span><br><span class="line">&#123;</span><br><span class="line">BTreeNode *node = (BTreeNode *)malloc(sizeof(BTreeNode));</span><br><span class="line">node-&gt;data = data;</span><br><span class="line">node-&gt;LeftChild = node-&gt;RightChild = NULL;</span><br><span class="line"></span><br><span class="line">return node;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//创建二叉树</span><br><span class="line">BTreeNode * CreateBTree( int arr[],int size,int *pUsedSize)</span><br><span class="line">&#123;</span><br><span class="line">if (size &lt;= 0)</span><br><span class="line">&#123;</span><br><span class="line">*pUsedSize = 0;</span><br><span class="line">return NULL;</span><br><span class="line">&#125;</span><br><span class="line">int leftUse, rightUse;</span><br><span class="line">int data = arr[0];</span><br><span class="line">if (data == -1)</span><br><span class="line">&#123;</span><br><span class="line">*pUsedSize = 1;</span><br><span class="line">return NULL;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BTreeNode *root = CreateNode(data);</span><br><span class="line"></span><br><span class="line">root-&gt;LeftChild = CreateBTree(arr + 1,size - 1,&amp;leftUse);</span><br><span class="line">root-&gt;RightChild = CreateBTree(arr + 1+leftUse, size - leftUse - 1,&amp;rightUse);</span><br><span class="line"></span><br><span class="line">*pUsedSize = leftUse + rightUse + 1;</span><br><span class="line"></span><br><span class="line">return root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="二叉树的遍历"><a href="#二叉树的遍历" class="headerlink" title="二叉树的遍历"></a>二叉树的遍历</h4><p>遵循某种次序，遍历二叉树中的所有节点，使得每个结点被访问一次，而且仅访问一次。“访问”：即对结点施行某些操作。<br>若规定VLR分别代表：遍历根节点、遍历根节点的左子树、遍历根节点的右子树，则有：<br>前序：VLR<br>中序：LVR<br>后序：LRV<br><strong>前序遍历递归算法</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//先序遍历</span><br><span class="line">void PreOrderTraverse(BTreeNode *root)</span><br><span class="line">&#123;</span><br><span class="line">if (root == NULL)</span><br><span class="line">&#123;</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">printf(&quot;%d &quot;,root-&gt;data);</span><br><span class="line">PreOrderTraverse(root-&gt;LeftChild);</span><br><span class="line">PreOrderTraverse(root-&gt;RightChild);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>中序遍历递归算法</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//中序遍历</span><br><span class="line">void InOrderTraverse(BTreeNode *root)</span><br><span class="line">&#123;</span><br><span class="line">if (root == NULL)</span><br><span class="line">&#123;</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">InOrderTraverse(root-&gt;LeftChild);</span><br><span class="line">printf(&quot;%d &quot;, root-&gt;data);</span><br><span class="line">InOrderTraverse(root-&gt;RightChild);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>后序遍历递归算法</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//后序遍历</span><br><span class="line">void  LastOrderTraverse(BTreeNode *root)</span><br><span class="line">&#123;</span><br><span class="line">if (root == NULL)</span><br><span class="line">&#123;</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">LastOrderTraverse(root-&gt;LeftChild);</span><br><span class="line">LastOrderTraverse(root-&gt;RightChild);</span><br><span class="line">printf(&quot;%d &quot;, root-&gt;data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="二叉树的其他操作："><a href="#二叉树的其他操作：" class="headerlink" title="二叉树的其他操作："></a>二叉树的其他操作：</h4><p>　1. 求二叉树的高度<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#define MAX(a,b) ((a)&gt;(b)?(a):(b))</span><br><span class="line">int GetHight(BTreeNode *root)</span><br><span class="line">&#123;</span><br><span class="line">if (root ==NULL)</span><br><span class="line">&#123;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return MAX(GetHight(root-&gt;LeftChild) ,GetHight(root-&gt;RightChild)) + 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>　2. 求二叉树叶子结点的个数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">int GetLeafNum(BTreeNode *root)</span><br><span class="line">&#123;</span><br><span class="line">if (root == NULL)</span><br><span class="line">&#123;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">if (root-&gt;LeftChild == NULL &amp;&amp; root-&gt;RightChild == NULL)</span><br><span class="line">&#123;</span><br><span class="line">return 1;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">return GetLeafNum(root-&gt;LeftChild) + GetLeafNum(root-&gt;RightChild);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>　3. 求二叉树结点的个数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">//方法一</span><br><span class="line">int count;</span><br><span class="line">int GetNodeNum(BTreeNode *root)</span><br><span class="line">&#123;</span><br><span class="line">if (root == NULL)</span><br><span class="line">&#123;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line">GetNodeNum(root-&gt;LeftChild);</span><br><span class="line">GetNodeNum(root-&gt;RightChild);</span><br><span class="line">count++;</span><br><span class="line">return count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//方法二</span><br><span class="line">int GetNodeNum2(BTreeNode *root)</span><br><span class="line">&#123;</span><br><span class="line">if (root == NULL)</span><br><span class="line">&#123;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line">int left = GetNodeNum2(root-&gt;LeftChild);</span><br><span class="line">int right = GetNodeNum2(root-&gt;RightChild);</span><br><span class="line"></span><br><span class="line">return left + right + 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ol><li>求二叉树第K层结点的个数   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">int GetLevelKNum(BTreeNode *root,DataType k)</span><br><span class="line">&#123;</span><br><span class="line">assert(k&gt;=1);</span><br><span class="line"></span><br><span class="line">if (root == NULL)</span><br><span class="line">&#123;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line">if (k == 1)</span><br><span class="line">&#123;</span><br><span class="line">return 1;</span><br><span class="line">&#125;</span><br><span class="line">DataType left = GetLevelKNum(root-&gt;LeftChild, k-1);</span><br><span class="line">DataType right = GetLevelKNum(root-&gt;RightChild, k-1);</span><br><span class="line"></span><br><span class="line">return left + right;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>　5. 判断一个节点是否在一棵二叉树中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">BTreeNode * FindNode(BTreeNode *root,DataType data)</span><br><span class="line">&#123;</span><br><span class="line">if (root == NULL)</span><br><span class="line">&#123;</span><br><span class="line">return NULL;</span><br><span class="line">&#125;</span><br><span class="line">if (root-&gt;data == data)</span><br><span class="line">&#123;</span><br><span class="line">return root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BTreeNode *result1 = FindNode(root-&gt;LeftChild,data);</span><br><span class="line">BTreeNode *result2 = FindNode(root-&gt;LeftChild, data);</span><br><span class="line"></span><br><span class="line">return result1 == NULL ? result1 : result2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;\assets\js\APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h3 id=&quot;二叉树的概念&quot;&gt;&lt;a href=&quot;#二叉树的概念&quot; class=&quot;headerlink&quot; title=&quot;二叉树的概念&quot;&gt;&lt;/a&gt;二叉树的概念&lt;/h3&gt;&lt;p&gt;一棵二叉
      
    
    </summary>
    
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="二叉树" scheme="http://yoursite.com/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>复杂链表的复制</title>
    <link href="http://yoursite.com/2018/08/24/%E5%A4%8D%E6%9D%82%E9%93%BE%E8%A1%A8%E7%9A%84%E5%A4%8D%E5%88%B6/"/>
    <id>http://yoursite.com/2018/08/24/复杂链表的复制/</id>
    <published>2018-08-24T00:46:06.000Z</published>
    <updated>2018-08-25T14:05:55.075Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h3 id="复制链表的复制"><a href="#复制链表的复制" class="headerlink" title="复制链表的复制"></a>复制链表的复制</h3><p>在复杂链表中，每个结点除了有一个next指针指向下一个结点之外，还有一个random指向链表中的任意结点或者NULL。<br><a id="more"></a><br>结点定义如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">typedef struct Link_C&#123;</span><br><span class="line">int data;</span><br><span class="line">struct Link_C *next;</span><br><span class="line">    struct Link_C *random;</span><br><span class="line"></span><br><span class="line">&#125;Link_C;</span><br></pre></td></tr></table></figure></p><p>思路：（我们分三步骤）   </p><ul><li>第一步：复制结点，将新结点连接在原结点后</li><li>第二步：复制random</li><li>第三步：拆分新旧结点</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">typedef int DataType;</span><br><span class="line"></span><br><span class="line">typedef struct Link_C&#123;</span><br><span class="line">int data;</span><br><span class="line">struct Link_C *next;</span><br><span class="line">    struct Link_C *random;</span><br><span class="line"></span><br><span class="line">&#125;Link_C;</span><br><span class="line"></span><br><span class="line">static Link_C * linkCreateNode(DataType data)</span><br><span class="line">&#123;</span><br><span class="line">Link_C *node = (Link_C *)malloc(sizeof(Link_C));</span><br><span class="line">node-&gt;data = data;</span><br><span class="line">node-&gt;next = NULL;</span><br><span class="line">node-&gt;random = NULL;</span><br><span class="line"></span><br><span class="line">return node;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Link_C * LinkCopy(Link_C *head)</span><br><span class="line">&#123;</span><br><span class="line">//第一步，复制结点</span><br><span class="line">Link_C *cur = head;</span><br><span class="line">Link_C *newNode;</span><br><span class="line">Link_C *newLink;</span><br><span class="line">Link_C *pre;</span><br><span class="line">while (cur != NULL)</span><br><span class="line">&#123;</span><br><span class="line">newNode = linkCreateNode(cur-&gt;data);</span><br><span class="line">newNode-&gt;next = cur-&gt;next;</span><br><span class="line">cur-&gt;next = newNode;</span><br><span class="line"></span><br><span class="line">cur = cur-&gt;next-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//第二步，复制random</span><br><span class="line"></span><br><span class="line">cur = head;</span><br><span class="line">while (cur != NULL)</span><br><span class="line">&#123;</span><br><span class="line">if (cur-&gt;random != NULL)</span><br><span class="line">&#123;</span><br><span class="line">cur-&gt;next-&gt;random = cur-&gt;random-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">cur = cur-&gt;next-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//第三步，新旧链表拆开</span><br><span class="line">cur = head;</span><br><span class="line">newLink = cur-&gt;next;</span><br><span class="line">while ( cur != NULL)</span><br><span class="line">&#123;</span><br><span class="line">pre = cur-&gt;next;</span><br><span class="line"></span><br><span class="line">cur-&gt;next = pre-&gt;next;</span><br><span class="line">if (cur-&gt;next != NULL)</span><br><span class="line">&#123;</span><br><span class="line">pre-&gt;next = cur-&gt;next-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">pre-&gt;next = NULL;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cur = cur-&gt;next;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return newLink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为测试方便查看写了打印<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">void Print(Link_C *head)</span><br><span class="line">&#123;</span><br><span class="line">Link_C *node = head;</span><br><span class="line">while (node != NULL)</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;[%d  random(%p)-&gt;%d ] \n&quot;,</span><br><span class="line">node-&gt;data,</span><br><span class="line">node-&gt;random,</span><br><span class="line">node-&gt;random ? node-&gt;random-&gt;data:0);</span><br><span class="line"></span><br><span class="line">node = node-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">printf(&quot;\n&quot;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>以下为测试部分<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">oid TestCopy()</span><br><span class="line">&#123;</span><br><span class="line">Link_C *n1 = linkCreateNode(1);</span><br><span class="line">Link_C *n2 = linkCreateNode(2);</span><br><span class="line">Link_C *n3 = linkCreateNode(3);</span><br><span class="line">Link_C *n4 = linkCreateNode(4);</span><br><span class="line">Link_C *n5 = linkCreateNode(5);</span><br><span class="line">Link_C *n6 = linkCreateNode(6);</span><br><span class="line"></span><br><span class="line">Link_C *result;</span><br><span class="line"></span><br><span class="line">n1-&gt;next = n2;</span><br><span class="line">n2-&gt;next = n3;</span><br><span class="line">n3-&gt;next = n4;</span><br><span class="line">n4-&gt;next = n5;</span><br><span class="line">n5-&gt;next = n6;</span><br><span class="line"></span><br><span class="line">n1-&gt;random = n3;</span><br><span class="line">n2-&gt;random = n6;</span><br><span class="line">n3-&gt;random = n3;</span><br><span class="line">n4-&gt;random = n4;</span><br><span class="line">n5-&gt;random = n2;</span><br><span class="line"></span><br><span class="line">Print(n1);</span><br><span class="line"></span><br><span class="line">printf(&quot;\n----------------\n&quot;);</span><br><span class="line">result = LinkCopy(n1);</span><br><span class="line">Print(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>测试结果就不在这里赘述了，有兴趣的伙伴可以自己尝试</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;复制链表的复制&quot;&gt;&lt;a href=&quot;#复制链表的复制&quot; class=&quot;headerlink&quot; title=&quot;复制链表的复制&quot;&gt;&lt;/a&gt;复制链表的复制&lt;/h3&gt;&lt;p&gt;在复杂链表中，每个结点除了有一个next指针指向下一个结点之外，还有一个random指向链表中的任意结点或者NULL。&lt;br&gt;
    
    </summary>
    
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="链表" scheme="http://yoursite.com/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>判断元素出栈入栈合法性</title>
    <link href="http://yoursite.com/2018/08/23/%E5%88%A4%E6%96%AD%E5%85%83%E7%B4%A0%E5%87%BA%E6%A0%88%E5%85%A5%E6%A0%88%E5%90%88%E6%B3%95%E6%80%A7/"/>
    <id>http://yoursite.com/2018/08/23/判断元素出栈入栈合法性/</id>
    <published>2018-08-23T08:27:33.000Z</published>
    <updated>2018-08-24T15:40:10.020Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h3 id="判断元素入栈出栈的合法性"><a href="#判断元素入栈出栈的合法性" class="headerlink" title="判断元素入栈出栈的合法性"></a>判断元素入栈出栈的合法性</h3><p>一般来说，这种判断性的问题会出现在一些面试题目的选择题中，当然学习了栈之后，我们就要有解决这种问题的能力。<br><strong>思路：</strong> 判断元素是否相同，相同就进行下一个元素比较，当栈不为空并且栈顶元素和输出的栈元素相同，则将该元素出栈并指向输出元素的下一个，否则就将该元素进栈，并指向比较的元素的下一个 ，直到所有元素比较完<br>然后按出栈顺序进行比较，当栈不为空时，将栈顶元素与当前元素进行比较，不相同直接返回，则判断出栈元素不合法，否则将该元素出栈，并指向下一个元素；</p><p><strong>创建一个Valid.h的文件，在这里我们引入了stack.h文件</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">#pragma once</span><br><span class="line"></span><br><span class="line">#include &quot;Stack.h&quot;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line"></span><br><span class="line">int Valid(char in[], char out[],int size)</span><br><span class="line">&#123;</span><br><span class="line">int ii = 0;</span><br><span class="line">int io = 0;</span><br><span class="line">Stack stack;</span><br><span class="line">StackInit(&amp;stack);</span><br><span class="line"></span><br><span class="line">while (ii &lt; size)</span><br><span class="line">&#123;</span><br><span class="line">if (in[ii] == out[io])</span><br><span class="line">&#123;</span><br><span class="line">ii++;</span><br><span class="line">io++;</span><br><span class="line">&#125;</span><br><span class="line">else if (!StackEmpty(&amp;stack) &amp;&amp; StackTop(&amp;stack) == out[io])</span><br><span class="line">&#123;</span><br><span class="line">StackPop(&amp;stack);</span><br><span class="line">io++;</span><br><span class="line">&#125;</span><br><span class="line">else </span><br><span class="line">&#123;</span><br><span class="line">StackPush(&amp;stack,in[ii]);</span><br><span class="line">ii++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">while (!StackEmpty(&amp;stack))</span><br><span class="line">&#123;</span><br><span class="line">if (StackTop(&amp;stack) == out[io])</span><br><span class="line">&#123;</span><br><span class="line">StackPop(&amp;stack);</span><br><span class="line">io++;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line">return 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>接下来我们进行测试</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">void TestValid()</span><br><span class="line">&#123;</span><br><span class="line">char *in = &quot;abcdefg&quot;;</span><br><span class="line">char *out1 = &quot;decfbga&quot;;</span><br><span class="line">char *out2 = &quot;fegdacb&quot;;</span><br><span class="line">char *out3 = &quot;efdgbca&quot;;</span><br><span class="line">char *out4 = &quot;cdbefag&quot;;</span><br><span class="line"></span><br><span class="line">printf(&quot;%s\n&quot;,Valid(in,out1,strlen(in)) ? &quot;合法顺序&quot;:&quot;非法顺序&quot; );</span><br><span class="line">printf(&quot;%s\n&quot;,Valid(in,out2,strlen(in)) ? &quot;合法顺序&quot;:&quot;非法顺序&quot; );</span><br><span class="line">printf(&quot;%s\n&quot;,Valid(in,out3,strlen(in)) ? &quot;合法顺序&quot;:&quot;非法顺序&quot; );</span><br><span class="line">printf(&quot;%s\n&quot;,Valid(in,out4,strlen(in)) ? &quot;合法顺序&quot;:&quot;非法顺序&quot; );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输出结果：</span><br><span class="line">合法顺序</span><br><span class="line">非法顺序</span><br><span class="line">非法顺序</span><br><span class="line">合法顺序</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;\assets\js\APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h3 id=&quot;判断元素入栈出栈的合法性&quot;&gt;&lt;a href=&quot;#判断元素入栈出栈的合法性&quot; class=&quot;headerlink&quot; title=&quot;判断元素入栈出栈的合法性&quot;&gt;&lt;/a&gt;
      
    
    </summary>
    
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="栈" scheme="http://yoursite.com/tags/%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>栈实现括号匹配</title>
    <link href="http://yoursite.com/2018/08/23/%E6%A0%88%E5%AE%9E%E7%8E%B0%E6%8B%AC%E5%8F%B7%E5%8C%B9%E9%85%8D/"/>
    <id>http://yoursite.com/2018/08/23/栈实现括号匹配/</id>
    <published>2018-08-23T00:57:33.000Z</published>
    <updated>2018-08-24T15:40:46.672Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h3 id="栈实现括号匹配"><a href="#栈实现括号匹配" class="headerlink" title="栈实现括号匹配"></a>栈实现括号匹配</h3><p><strong>匹配思想</strong>：从左至右扫描一个字符串(或表达式)，则每个右括号将与最近遇到的那个左括号相匹配。则可以在从左至右扫描过程中把所遇到的左括号存放到堆栈中。每当遇到一个右括号时，就将它与栈顶的左括号(如果存在)相匹配，同时从栈顶删除该左括号。<br><strong>算法思想</strong>：设置一个栈，当读到左括号时，左括号进栈。当读到右括号时，则从栈中弹出一个元素，与读到的左括号进行匹配，若匹配成功，继续读入；否则匹配失败，返回FLASE。另外,在算法的开始和结束时,栈都应该是空的.所以匹配到最后还要判断栈是否为空,若非空,则说明匹配失败.   </p><p><strong>创建一个StackTest.h的文件</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">//以下是括号匹配具体代码</span><br><span class="line">void BracketMatch(const char *str,int size)</span><br><span class="line">&#123;</span><br><span class="line">Stack stack;</span><br><span class="line">char ch;</span><br><span class="line">char leftBracket;</span><br><span class="line">int i = 0;</span><br><span class="line">StackInit(&amp;stack);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">for (i=0;i&lt;size;i++)</span><br><span class="line">&#123;</span><br><span class="line">ch = str[i];</span><br><span class="line"></span><br><span class="line">switch(ch)</span><br><span class="line">&#123;</span><br><span class="line">case &apos;(&apos;:</span><br><span class="line">case &apos;[&apos;:</span><br><span class="line">case &apos;&#123;&apos;:</span><br><span class="line">StackPush(&amp;stack,(DataType)ch);</span><br><span class="line">break;</span><br><span class="line">case &apos;)&apos;:</span><br><span class="line">case &apos;]&apos;:</span><br><span class="line">case &apos;&#125;&apos;:</span><br><span class="line">if (StackEmpty(&amp;stack))</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;右括号多\n&quot;);</span><br><span class="line">StackDestory(&amp;stack);</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">leftBracket = (char)StackTop(&amp;stack);</span><br><span class="line">StackPop(&amp;stack);</span><br><span class="line"></span><br><span class="line">if (leftBracket == &apos;(&apos; &amp;&amp; ch != &apos;)&apos;)</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;不匹配\n&quot;);</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if (leftBracket == &apos;[&apos; &amp;&amp; ch != &apos;]&apos;)</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;不匹配\n&quot;);</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">if (leftBracket == &apos;&#123;&apos; &amp;&amp; ch != &apos;&#125;&apos;)</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;不匹配\n&quot;);</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">default:</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">if (!StackEmpty(&amp;stack))</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;左括号多\n&quot;);</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;匹配正常\n&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">//以下是Stack.h文件</span><br><span class="line">typedef int DataType;</span><br><span class="line"></span><br><span class="line">#define MAX_SIZE (100)</span><br><span class="line"></span><br><span class="line">typedef struct Stack&#123;</span><br><span class="line"></span><br><span class="line">DataType arr[MAX_SIZE];</span><br><span class="line">int top;</span><br><span class="line">&#125;Stack;</span><br><span class="line"></span><br><span class="line">void StackInit(Stack *stack)</span><br><span class="line">&#123;</span><br><span class="line">stack-&gt;top = 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void StackDestory(Stack *stack)</span><br><span class="line">&#123;</span><br><span class="line">stack-&gt;top = 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void StackPush(Stack *stack,DataType data)</span><br><span class="line">&#123;</span><br><span class="line">assert(stack-&gt;top &lt;MAX_SIZE);</span><br><span class="line">stack-&gt;arr[stack-&gt;top++] = data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">void StackPop(Stack *stack)</span><br><span class="line">&#123;</span><br><span class="line">assert(stack-&gt;top &gt; 0);</span><br><span class="line">stack-&gt;top--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DataType StackTop(const Stack *stack)</span><br><span class="line">&#123;</span><br><span class="line">assert(stack-&gt;top &gt; 0);</span><br><span class="line">return stack-&gt;arr[stack-&gt;top-1];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int stackSize(Stack *stack)</span><br><span class="line">&#123;</span><br><span class="line">return stack-&gt;top;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int StackFull(Stack *stack)</span><br><span class="line">&#123;</span><br><span class="line">return stack-&gt;top &gt;= MAX_SIZE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int StackEmpty(Stack *stack)</span><br><span class="line">&#123;</span><br><span class="line">return stack-&gt;top &lt;= 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">//以下我们测试括号是否匹配</span><br><span class="line">void TestBracket()</span><br><span class="line">&#123;</span><br><span class="line">const char *seq[]=&#123;</span><br><span class="line">&quot;(())abc&#123;[(])&#125;&quot;,</span><br><span class="line">&quot;(()))abc&#123;[]&#125;&quot;,</span><br><span class="line">&quot;(()()abc&#123;[]&#125;&quot;,</span><br><span class="line">&quot;(())abc&#123;[]()&#125;&quot;</span><br><span class="line">&#125;;</span><br><span class="line">int i = 0;</span><br><span class="line">for (i=0;i&lt;4;i++)</span><br><span class="line">&#123;</span><br><span class="line">BracketMatch(seq[i],strlen(seq[i]));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">打印结果：</span><br><span class="line">不匹配   </span><br><span class="line">右括号多  </span><br><span class="line">左括号多  </span><br><span class="line">匹配正常</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">//以上就是括号匹配的问题，如有问题望批评指正</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;\assets\js\APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h3 id=&quot;栈实现括号匹配&quot;&gt;&lt;a href=&quot;#栈实现括号匹配&quot; class=&quot;headerlink&quot; title=&quot;栈实现括号匹配&quot;&gt;&lt;/a&gt;栈实现括号匹配&lt;/h3&gt;&lt;p&gt;
      
    
    </summary>
    
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="栈" scheme="http://yoursite.com/tags/%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>搭建git服务器教程</title>
    <link href="http://yoursite.com/2018/07/25/git%E6%95%99%E7%A8%8B/"/>
    <id>http://yoursite.com/2018/07/25/git教程/</id>
    <published>2018-07-25T08:51:38.000Z</published>
    <updated>2018-08-24T15:40:28.847Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="1-下载安装git"><a href="#1-下载安装git" class="headerlink" title="1.下载安装git"></a>1.下载安装git</h2><h3 id="安装依赖库和编译工具"><a href="#安装依赖库和编译工具" class="headerlink" title="安装依赖库和编译工具"></a>安装依赖库和编译工具</h3><p>为了后续安装能正常进行，我们先来安装一些相关依赖库和编译工具    </p><pre><code>yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel</code></pre><p>安装编译工具  </p><pre><code>yum install gcc perl-ExtUtils-MakeMaker</code></pre><h3 id="下载git"><a href="#下载git" class="headerlink" title="下载git"></a>下载git</h3><p>选一个目录，用来放下载下来的安装包，这里将安装包放在 /usr/local/src 目录里   </p><pre><code>cd /usr/local/src    </code></pre><p>到官网找一个新版稳定的源码包下载到 /usr/local/src 文件夹里    </p><pre><code>wget https://www.kernel.org/pub/software/scm/git/git-2.10.0.tar.gz</code></pre><h3 id="解压和编译"><a href="#解压和编译" class="headerlink" title="解压和编译"></a>解压和编译</h3><p>解压下载的资源包 </p><pre><code>tar -zvxf git-2.10.0.tar.gz</code></pre><p>解压后进入git-2.10.0  </p><pre><code>cd git-2.10.0</code></pre><p>执行编译</p><pre><code>make all prefix=/usr/local/git</code></pre><p>编译完成后, 安装到 /usr/local/git 目录下   </p><pre><code>make install prefix=/usr/local/git</code></pre><h2 id="2-配置环境变量"><a href="#2-配置环境变量" class="headerlink" title="2.配置环境变量"></a>2.配置环境变量</h2><h3 id="将git目录加入PATH"><a href="#将git目录加入PATH" class="headerlink" title="将git目录加入PATH"></a>将git目录加入PATH</h3><p>将原来的PATH指向目录修改为现在的目录   </p><pre><code>echo &apos;export PATH=$PATH:/usr/local/git/bin&apos; &gt;&gt; /etc/bashrc</code></pre><p>生成环境变量   </p><pre><code>source /etc/bashrc</code></pre><p>此时我们查看git版本号，说明我们已经安装成功了。   </p><pre><code>git --version</code></pre><h2 id="3-创建git账号密码"><a href="#3-创建git账号密码" class="headerlink" title="3.创建git账号密码"></a>3.创建git账号密码</h2><h3 id="创建git账号"><a href="#创建git账号" class="headerlink" title="创建git账号"></a>创建git账号</h3><p>为我们刚刚搭建好的 git 创建一个账号   </p><pre><code>useradd -m gituser</code></pre><p>然后为这个账号设置密码[?]   </p><pre><code>passwd gituser</code></pre><h2 id="4-初始化git仓库并配置用户权限"><a href="#4-初始化git仓库并配置用户权限" class="headerlink" title="4.初始化git仓库并配置用户权限"></a>4.初始化git仓库并配置用户权限</h2><h3 id="创建git参考并初始化"><a href="#创建git参考并初始化" class="headerlink" title="创建git参考并初始化"></a>创建git参考并初始化</h3><p>我们创建 /data/repositories 目录用于存放 git 仓库   </p><pre><code>mkdir -p /data/repositories</code></pre><p>创建好后，初始化这个仓库   </p><pre><code>cd /data/repositories/ &amp;&amp; git init --bare test.git</code></pre><h3 id="配置用户权限"><a href="#配置用户权限" class="headerlink" title="配置用户权限"></a>配置用户权限</h3><p>给 git 仓库目录设置用户和用户组并设置权限   </p><pre><code>chown -R gituser:gituser /data/repositorieschmod 755 /data/repositories</code></pre><p>[查找 git-shell 所在目录] , 编辑 /etc/passwd 文件，将最后一行关于 gituser 的登录 shell 配置改为 如下</p><p>示例代码：/etc/passwd</p><pre><code>gituser:x:500:500::/home/gituser:/usr/local/git/bin/git-shell</code></pre><h3 id="使用搭建好的-Git-服务"><a href="#使用搭建好的-Git-服务" class="headerlink" title="使用搭建好的 Git 服务"></a>使用搭建好的 Git 服务</h3><p>克隆test repo 到本地</p><pre><code>cd ~ &amp;&amp; git clone gituser@&lt;您的 CVM IP 地址&gt;:/data/repositories/test.git</code></pre><p>恭喜，Git 服务器搭建完成, 从此以后你可以方便地将你的本地代码提交到 Git 服务器托管了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;\assets\js\APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h2 id=&quot;1-下载安装git&quot;&gt;&lt;a href=&quot;#1-下载安装git&quot; class=&quot;headerlink&quot; title=&quot;1.下载安装git&quot;&gt;&lt;/a&gt;1.下载安装git
      
    
    </summary>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Welcome To MyBlog</title>
    <link href="http://yoursite.com/2018/07/19/index/"/>
    <id>http://yoursite.com/2018/07/19/index/</id>
    <published>2018-07-19T04:23:57.000Z</published>
    <updated>2018-08-28T15:32:55.801Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p><strong>今晚12点前向我发暑假学习计划及安排，以word形式私发给我，具体学习计划及内容如下，每人至少选择两个课程，如果有其它想法，可以写word一同发给我，暑假期间将进行不定期考察学习成果，开学将进行统一考核评优，希望各位小伙伴在放假期间也不要耽误学习哦，另外需要学习资源的可以私我</strong></p><a id="more"></a><h2 id="大一到大二："><a href="#大一到大二：" class="headerlink" title="大一到大二："></a>大一到大二：</h2><h3 id="主攻方向："><a href="#主攻方向：" class="headerlink" title="主攻方向："></a>主攻方向：</h3><p>大二必修课：数据结构  </p><p>Web前端：HTML+CSS+JavaScript  </p><p>主流语言：Java，PHP，python，</p><h2 id="大二到大三："><a href="#大二到大三：" class="headerlink" title="大二到大三："></a>大二到大三：</h2><p>大三必修课：操作系统，java，  </p><p>Linux操作系统，C++</p><h3 id="其他：hexo-GitHub-node-js个人博客搭建"><a href="#其他：hexo-GitHub-node-js个人博客搭建" class="headerlink" title="其他：hexo+GitHub+node.js个人博客搭建"></a>其他：hexo+GitHub+node.js个人博客搭建</h3><p>（学习过程中最好使用CSDN养成写博客的习惯）</p><p>不忘初心，方得始终。。。。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;今晚12点前向我发暑假学习计划及安排，以word形式私发给我，具体学习计划及内容如下，每人至少选择两个课程，如果有其它想法，可以写word一同发给我，暑假期间将进行不定期考察学习成果，开学将进行统一考核评优，希望各位小伙伴在放假期间也不要耽误学习哦，另外需要学习资源的可以私我&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
</feed>
