<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LiuxiaoKun</title>
  
  <subtitle>My Awesome Site</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://LiuZiQiao.github.io/"/>
  <updated>2018-10-19T15:26:51.370Z</updated>
  <id>https://LiuZiQiao.github.io/</id>
  
  <author>
    <name>LiuXiaoKun</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>github+hexo搭建博客教程</title>
    <link href="https://LiuZiQiao.github.io/2018/10/19/github-hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/"/>
    <id>https://LiuZiQiao.github.io/2018/10/19/github-hexo搭建博客教程/</id>
    <published>2018-10-19T15:21:20.000Z</published>
    <updated>2018-10-19T15:26:51.370Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><a id="more"></a>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;\assets\js\APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
      
    
    </summary>
    
      <category term="Git" scheme="https://LiuZiQiao.github.io/categories/Git/"/>
    
    
  </entry>
  
  <entry>
    <title>Linux内核初窥探-进程</title>
    <link href="https://LiuZiQiao.github.io/2018/10/16/Linux%E5%86%85%E6%A0%B8%E5%88%9D%E7%AA%A5%E6%8E%A2/"/>
    <id>https://LiuZiQiao.github.io/2018/10/16/Linux内核初窥探/</id>
    <published>2018-10-16T15:31:42.000Z</published>
    <updated>2018-10-21T07:31:32.809Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><a id="more"></a><h3 id="Linux下多任务介绍"><a href="#Linux下多任务介绍" class="headerlink" title="Linux下多任务介绍"></a>Linux下多任务介绍</h3><p>首先，简单介绍下多任务系统，任务，进程，线程分别是什么？之间的区别是什么？从宏观角度理解后再针对每一个仔细探究   </p><ul><li><p>什么叫多任务系统：多任务系统指可以同一时间内运行多个应用程序，每个应用程序被称作一个任务。</p></li><li><p>任务定义:任务是一个逻辑概念,指由一个软件完成的任务，或者是一系列共同达到某一目的的操作。</p></li><li><p>进程定义:进程是指一个具有独立功能的程序在某个数据集上的一次动态执行过程，它是系统进行资源分配和调度的最小单元。</p></li><li><p>线程定义:线程是进程内独立的一条运行路线，是处理器调度的最小单元，也可以成为轻量级进程。</p><p> 看了定义，还是不太理解，那就通俗的说一下它们的区别吧。<br> ①通常一个任务是一个程序的一次执行，一个任务包含一个或多个完成独立功能的子任务，这个独立的子任务就是进程或线程。<br> ②一个进程可以拥有多个线程，每个线程必须有一个父进程。</p></li></ul><h3 id="任务"><a href="#任务" class="headerlink" title="任务"></a>任务</h3><p>任务是一个逻辑概念，指有一个软件完成的任务，或者由一系列共同达到某一目的的操作。通常一个任务是一个程序的一次执行，一个任务包含一个或多个完成独立功能的子任务，这个独立的子任务就是一个进程或线程。任务、进程、线程之间的关系如图   </p><p><img src="https://img-blog.csdn.net/20181019235344883?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5NDc4MjM3/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="1"></p><h3 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h3><h4 id="进程的基本概念"><a href="#进程的基本概念" class="headerlink" title="进程的基本概念"></a>进程的基本概念</h4><p>进程是指一个具有独立功能的程序在某个数据集上的一次动态执行的过程，是系统进程资源分配和调度的基本单元。一次任务的运行可以并发激活多个进程，这些进程相互合作完成该任务的一个最终目标。<br>操作系统对进程的描述：PCB（进程控制块）Linux下的进程描述——task_struct     </p><p>进程具有并发性、动态性、交互性、独立性、异步性等主要特性   </p><p>进程和程序之间的区别：程序是一段代码，是一些保存在存储器上的指令有序集合，没有执行的概念；而进程是一个动态的概念，是程序执行的过程，包括动态创建、调度、消亡的整个过程，它是程序执行和资源管理的最小单位。</p><h4 id="Linux下的进程结构"><a href="#Linux下的进程结构" class="headerlink" title="Linux下的进程结构"></a>Linux下的进程结构</h4><p>  进程不但包括程序指令和数据，还包括程序计数器和处理器的所有寄存器及存储临时数据的进程堆栈，因此，正在执行的进程包括处理器当前的一切活动   </p><p>  内核将所有进程存放在双向循环链表（进程链表）中，其中链表的头是init_task描述符。链表的每一项都是类型为 task_struct，称为进程描述符的结构，该结构包含了一个进程相关的所有信息，定义在<include linux="" sched.h="">文件中。task_struct内核结构比较大，它能完整的描述一个进程，如进程的状态、进程的基本信息、进程标识符、内存相关信息、父进程相关信息、与进程相关的终端信息、当前工作目录、打开的文件信息、所接收的信号信息等。</include></p><p>task_struct结构体中最重要的两个域：state（进程状态）和pid（进程标识符），下面就详细说说这两个</p><h4 id="进程标识符"><a href="#进程标识符" class="headerlink" title="进程标识符"></a>进程标识符</h4><p>Linux内核通过唯一的进程标识符 PID 来标识每个进程(就和文件描述符一样)。PID存放在进程描述符的 pid 字段中，新创建的 PID 通常是前一个进程的 PID 加1，不过PID的值有上限（最大值=PID_MAX_DEFAULT-1，通常为32767），读者可以查看/proc/sys/kernel/pid_max 来确定该系统的进程数上限。</p><p>   当系统启动后，内核通常作为某一个进程的代表。一个指向task_struct的宏current用来记录正在运行的进程。current经常作为进程描述符结构指针的形式出现在内核代码中，例如，current-&gt;pid 表示处理器正在执行的进程的PID。当系统需要查看所有的进程时，则调用for_each_process()宏，这将比系统搜索数组的速度要快的多。</p><h4 id="查看进程"><a href="#查看进程" class="headerlink" title="查看进程"></a>查看进程</h4><p>进程的信息可以通过/proc系统文件夹查看   </p><ul><li>如：要获取PID为1 的进程，我们需要查看 /proc/1这个文件夹</li><li><p>大多数进程信息同样可以使用top和ps这些用户级工具来获取</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>通过系统调用获取进程标识符<br><strong>在Linux中获得当前进程号的（PID）和父进程号（PPID）的系统调用函数分别为 getpid() 和 getppid()。</strong>   </p></li></ul><p>下面演示在Linux中获取进程pid<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//getpid获取当前进程ID</span></span><br><span class="line"><span class="comment">//getppid获取父进程ID</span></span><br><span class="line"><span class="comment">//pid_t是C语言中用户自定义类型</span></span><br><span class="line"><span class="comment">//在sys/types.h中定义</span></span><br><span class="line"><span class="comment">//进程标识符演示</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span>  <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"pid:%d\n"</span>,getpid());</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"ppid:%d"</span>,getppid());</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="进程状态"><a href="#进程状态" class="headerlink" title="进程状态"></a>进程状态</h4><p>  Linux中的进程有以下几种状态:</p><p>   ● 运行状态（TASK_RUNNING）:进程当前正在运行，或者正在运行队列中等待调度。</p><p>   ● 可中断的阻塞状态（TASK_INTERRUPTIBLE）：进程处于阻塞(睡眠)状态，正在等待某些事件发生或能够占用某些资源。处在这种状态下的进程可以被信号中断。接收到信号或被显式的唤醒呼叫（如调用 wake_up 系列宏:wake_up、wake_up_interruptible等）唤醒之后，进程将转变为 TASK_RUNNING 状态。</p><p>   ● 不可中断的阻塞状态（TASK_UNINTERRUPTIBLE）:此进程状态类似于可中断的阻塞状态（TASK_INTERRUPTIBLE），只是它不会处理信号，把信号传递到这种状态下的进程不能改变它的状态。在一些特定的情况下（进程必须等待，直到某些不能被中断的事件发生），这种状态是很有用的。只有在它所等待的事件发生时，进程才被显示的唤醒呼叫唤醒。</p><p>   ● 可终止的阻塞状态（TASK_KILLABLE）:该状态的运行机制类似于TASK_UNINTERRUPTIBLE，只不过处在该状态下的进程可以响应致命信号。它可以替代有效但可能无法终止的不可中断的阻塞状态（TASK_UNINTERRUPTIBLE）,以及易于唤醒但安全性欠佳的可中断的阻塞状态TASK_INTERRUPTIBLE）。</p><p>   ● 暂停状态（TASK_STOPPED）:进程的执行被暂停，当进程收到 SIGSTOP、SIGSTP、SIGTTIN、SIGTTOU等信号时，就会进入暂停状态。</p><p>   ● 跟踪状态（TASK_TRACED）:进程的执行被调试器暂停。当一个进程被另一个监控时（如调试器使用ptrace()系统调用监控测试程序），任何信号都可以把这个进程置于跟踪状态。</p><p>   ● 僵尸状态（EXIT_ZOMBIE）:子进程先于父进程退出，它要保留退出原因在pcb中，因此退出后不会自动释放所有资源，子进程退出后操作系统通知父进程说子进程退出了，需要去获取原因，然后释放子进程资源。假如父进程不管子进程的退出状态，那么这个子进程将进入僵死状态，成为僵尸进程。</p><p>   ● 僵尸撤销状态（EXIT_DEAD）:这是最终状态，父进程调用 wait 函数族“收尸”后，进程彻底由系统删除。</p><h4 id="进程的创建、执行、终止"><a href="#进程的创建、执行、终止" class="headerlink" title="进程的创建、执行、终止"></a>进程的创建、执行、终止</h4><h5 id="fork函数认识"><a href="#fork函数认识" class="headerlink" title="fork函数认识"></a>fork函数认识</h5><ul><li>运行man fork</li><li>fork 有两个返回值,若直线成功，在父进程中返回子进程的pid，在子进程中返回0</li><li><p>父子进程代码共享，数据各自开辟空间</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/typees&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret = fork();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"hello proc:%d,ret:%d\n"</span>,getpid(),ret);</span><br><span class="line">    sleep(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>fork 之后通常要用if分流</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret = fork();</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">"fork"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(ret == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"i am child:%d,ret:%d\n"</span>,getpid(),ret);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"i am father :%d,ret:%d\n"</span>,getpid(),ret);</span><br><span class="line">    &#125;</span><br><span class="line">    sleep(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="僵尸进程"><a href="#僵尸进程" class="headerlink" title="僵尸进程"></a>僵尸进程</h5><p>僵尸进程的危害：资源泄漏<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//zombie.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pid = fork();</span><br><span class="line">    <span class="keyword">if</span>(pid &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">"fork error"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;    </span><br><span class="line">    &#125;<span class="keyword">else</span> ifpid == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"this is child\n"</span>);    </span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"this is parent\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h5 id="孤儿进程"><a href="#孤儿进程" class="headerlink" title="孤儿进程"></a>孤儿进程</h5><p>父进程先于子进程退出，子进程将成为孤儿进程,当子进程成为孤儿进程时，Init进程将会回收，也就是说，父进程将变成init进程，init将负责释放资源<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//orphan.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pid = fork();</span><br><span class="line">    <span class="keyword">if</span>(pid &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;    </span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(pid &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"this is parent，%d\n"</span>,getpid());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"this is child,%d\n"</span>,getpid());        </span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;\assets\js\APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;Linux下多任务介绍&quot;&gt;&lt;a href=&quot;#Linux下多任务介绍&quot; class=&quot;headerlink&quot; title=&quot;Li
      
    
    </summary>
    
      <category term="Linux" scheme="https://LiuZiQiao.github.io/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>Ubuntu18.04安装教程</title>
    <link href="https://LiuZiQiao.github.io/2018/10/15/Ubuntu18-04%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/"/>
    <id>https://LiuZiQiao.github.io/2018/10/15/Ubuntu18-04安装教程/</id>
    <published>2018-10-15T12:33:18.000Z</published>
    <updated>2018-10-16T10:54:04.257Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><a id="more"></a><h3 id="Ubuntu"><a href="#Ubuntu" class="headerlink" title="Ubuntu"></a>Ubuntu</h3><p>Ubuntu 叫法很多（友帮拓、优班图、乌班图），是一个一琢磨应用为主的开源GUN/Linux操作系统，接下来记录了在VMware Workstation Pro 中安装Ubuntu 18.04</p><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><h4 id="下载安装VMware虚拟机"><a href="#下载安装VMware虚拟机" class="headerlink" title="下载安装VMware虚拟机"></a>下载安装VMware虚拟机</h4><p>VMware下载地址：<a href="https://www.vmware.com/cn/products/workstation-pro/workstation-pro-evaluation.html" target="_blank" rel="noopener">https://www.vmware.com/cn/products/workstation-pro/workstation-pro-evaluation.html</a><br>安装过程中可能会出现需要激活，这里有我用的激活码<br>链接：<a href="https://pan.baidu.com/s/1VzC5w_Ini4SU0TwpC87Geg" target="_blank" rel="noopener">https://pan.baidu.com/s/1VzC5w_Ini4SU0TwpC87Geg</a><br>提取码：nhom<br>安装完毕之后</p><h4 id="下载Ubuntu-18-04LTS"><a href="#下载Ubuntu-18-04LTS" class="headerlink" title="下载Ubuntu 18.04LTS"></a>下载Ubuntu 18.04LTS</h4><p>进入官网：<a href="https://www.ubuntu.com/" target="_blank" rel="noopener">https://www.ubuntu.com/</a><br>或者直接进入下载页面：<a href="https://www.ubuntu.com/download/desktop" target="_blank" rel="noopener">https://www.ubuntu.com/download/desktop</a><br>选择相应的版本进行下载</p><h3 id="安装虚拟机"><a href="#安装虚拟机" class="headerlink" title="安装虚拟机"></a>安装虚拟机</h3><h4 id="创建新的虚拟机"><a href="#创建新的虚拟机" class="headerlink" title="创建新的虚拟机"></a>创建新的虚拟机</h4><p>1、 打开VMware Workstation<br><img src="https://img-blog.csdn.net/20180610193243886" alt="1"><br>2、选择自定义(高级)，然后下一步<br><img src="https://img-blog.csdn.net/20180610193508149" alt="2"><br>3、默认，直接下一步<br><img src="https://img-blog.csdn.net/20180610193706658" alt="3"><br>4、选择“稍后安装操作系统”，然后下一步<br><img src="https://img-blog.csdn.net/20180610193751797" alt="4"><br>5、客户机操作系统选择Linux，版本选择“Ubuntu 64”，下一步<br><img src="https://img-blog.csdn.net/20180610193904307" alt="5"><br>6、根据自身电脑情况，给虚拟机命名和指定安装位置（建议不要放在系统盘），然后下一步<br><img src="https://img-blog.csdn.net/20180610194240208" alt="6"><br>7、根据电脑配置为虚拟机配置处理器和内存大小，默认即可<br><img src="https://img-blog.csdn.net/20180610195053728" alt="7"><br><img src="https://img-blog.csdn.net/20180610195124226" alt="8"><br>8、选择网络类型默认为“使用网络地址转换(NAT)”即可，下一步<br><img src="https://img-blog.csdn.net/20180610195546393" alt="9"><br>9、选择I/O控制器类型和磁盘类型，这两步都默认选择，下一步<br><img src="https://img-blog.csdn.net/20180610195912938" alt="10"><br><img src="https://img-blog.csdn.net/20180610195933859" alt="11"><br>10、根据自身设置磁盘大小（建议60G+），选择“将虚拟磁盘存储为单个文件”，下一步<br><img src="https://img-blog.csdn.net/20180610200118583" alt="12"><br>11、选择下一步即可，然后选择“自定义硬件”<br><img src="https://img-blog.csdn.net/20180610200431726" alt="13"><br>12、弹出框中选择CD/DVD（STAT），然后在右边选择使用ISO映像文件，此时选择我们下载好的镜像文件的路径，然后点击关闭，完成即可<br><img src="https://img-blog.csdn.net/20180610201122123" alt="14"><br>13、开启虚拟机，开启过程可能会报错，如果你是第一次安装，那就需要开启电脑虚拟化支持，关机并开机，开机过程中按F10（根据自己电脑的按键，我这里是F10键），进入boss页面后找到虚拟化支持开启。重启后再进入虚拟机开启虚拟机<br><img src="https://img-blog.csdn.net/20180610201701798" alt="15"><br>14、此时你将看到下面页面，选择中文即可<br><img src="https://img-blog.csdn.net/20180610202441243" alt="16"><br>15、默认汉语，选择继续，在选择正常安装，点击继续<br><img src="https://img-blog.csdn.net/20180610203622745" alt="17"><br><img src="https://img-blog.csdn.net/20180610203856154" alt="18"><br>16、默认选项点击现在安装<br><img src="https://img-blog.csdn.net/20180610203935245" alt="19"><br>17、弹出确认框，点击继续，在默认城市，点击继续 <img src="https://img-blog.csdn.net/20180610204141526" alt="20"><br><img src="https://img-blog.csdn.net/20180610204314399" alt="21"><br>18、设置用户名和密码（建议密码设置简单6位即可，每次开机或登录将使用密码），点击继续<br><img src="https://img-blog.csdn.net/20180610204450783" alt="22"><br>19、接着进入安装界面，下面会显示安装进度<br><img src="https://img-blog.csdn.net/20180610204732619" alt="23"><br>20、接下来你可以去喝杯，因此次过程比较缓慢<br>21、安装完成后点击“现在重启”<br><img src="https://img-blog.csdn.net/20180610204836829" alt="24"><br>22、重启之后进入登录页面<br>23、然后打开浏览器检查网络是否连接成功<br><img src="https://img-blog.csdn.net/20180610210401357" alt="25"></p><h3 id="安装VMware-Tools"><a href="#安装VMware-Tools" class="headerlink" title="安装VMware Tools"></a>安装VMware Tools</h3><p>Ubuntu安装成功，你会发现VMware全屏时，Ubuntu桌面在VMware中不能全屏显示，因此我们需要安装VMware Tools 工具<br>1、此时可以点击界面底部提醒我们安装VMware Tools的弹框的“安装Tools”按钮，或者，点击VMware 导航栏上的“虚拟机”，然后在下拉框中点击“安装VMware Tools”；<br><img src="https://img-blog.csdn.net/20180610211441253" alt="26"><br>2、完成后进入Ubuntu，桌面会出现VMware Tools的光盘，点击进入其中<br><img src="https://img-blog.csdn.net/20180610211921565" alt="27"><br>3、进入后看到一个压缩文件VMwareTools-10.25-8068393.tar.gz（中间数组不同的虚拟机版本可能会不同），复制文件到主目录下面（即home 个人用户名的目录下）<br><img src="https://img-blog.csdn.net/20180610212233588" alt="28"><br><img src="https://img-blog.csdn.net/20180610212938367" alt="29"><br>4、按【Ctrl+Alt+T】调出终端命令界面，输入命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf VMware Tools-10.25-8068393.tar.gz</span><br></pre></td></tr></table></figure></p><p>然后回车，解压文件是快捷方式输入括号里的【tar -zxvf V】后按Tab 会自动补全文件名字<br><img src="https://img-blog.csdn.net/20180610213100618" alt="30"><br>5、解压完成后会出现一个vmware-tools-distrib的文件<br><img src="https://img-blog.csdn.net/20180610214634905" alt="31"><br>6、输入命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd vmware-tools-distrib</span><br></pre></td></tr></table></figure></p><p>回车后输入命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ./vmware-install.pl</span><br></pre></td></tr></table></figure></p><p>回车后输入密码，然后就开始安装，遇到yes就输入yes，其他一律回车<br>7、如图显示VMware tools安装成功<br><img src="https://img-blog.csdn.net/20180610220242127" alt="32"><br>以上就是博主整个安装Ubuntu 18.04LTS的过程</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;\assets\js\APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;Ubuntu&quot;&gt;&lt;a href=&quot;#Ubuntu&quot; class=&quot;headerlink&quot; title=&quot;Ubuntu&quot;&gt;&lt;/a&gt;
      
    
    </summary>
    
      <category term="Linux" scheme="https://LiuZiQiao.github.io/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>队列实现栈</title>
    <link href="https://LiuZiQiao.github.io/2018/10/14/%E9%98%9F%E5%88%97%E5%AE%9E%E7%8E%B0%E6%A0%88/"/>
    <id>https://LiuZiQiao.github.io/2018/10/14/队列实现栈/</id>
    <published>2018-10-14T12:20:34.000Z</published>
    <updated>2018-10-14T12:59:48.442Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><a id="more"></a><h3 id="利用两个队列实现一个栈"><a href="#利用两个队列实现一个栈" class="headerlink" title="利用两个队列实现一个栈"></a>利用两个队列实现一个栈</h3><p><strong>要求：</strong><br>Push：往非空队列里插入（如果两个队列都是空，选第一个插入）</p><p>Pop：从非空队列中 move  size - 1 个元素到 空队列中，pop 剩下的一个</p><p>Top: 从非空队列中 move  size - 1 个元素到 空队列中，返回剩下的一个的值，<br>     把剩下的一个也放入另一个队列中</p><h3 id="实现部分"><a href="#实现部分" class="headerlink" title="实现部分"></a>实现部分</h3><h4 id="结构体定义"><a href="#结构体定义" class="headerlink" title="结构体定义"></a>结构体定义</h4><p>以下代码基于队列的基本操作Queue.h，关于Queue.h请自行在本博客中查找<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Queue.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">QStack</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">Queue queue1;</span><br><span class="line">Queue queue2;</span><br><span class="line">&#125;QStack;</span><br></pre></td></tr></table></figure></p><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QStackInit</span><span class="params">(QStack *pQS)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">QueueInit(&amp;(pQS-&gt;queue1));</span><br><span class="line">QueueInit(&amp;(pQS-&gt;queue2));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="销毁"><a href="#销毁" class="headerlink" title="销毁"></a>销毁</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QStackDestory</span><span class="params">(QStack *pQS)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">QueueDestroy(&amp;(pQS-&gt;queue1));</span><br><span class="line">QueueDestroy(&amp;(pQS-&gt;queue2));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QStackPush</span><span class="params">(QStack *pQS,QDataType data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Queue *pNotEmpty = &amp;(pQS-&gt;queue2);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (QueueEmpty(pNotEmpty))    <span class="comment">// 如果队列二为空，则不为空的就假设为队列一，就将队列一中的插入队列二</span></span><br><span class="line">&#123;</span><br><span class="line">pNotEmpty = &amp;(pQS-&gt;queue1);<span class="comment">//如果队列二不为空，则直接将队列一中的插入队列二</span></span><br><span class="line">&#125;</span><br><span class="line">QueuePush(pNotEmpty,data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QStackPop</span><span class="params">(QStack *pQS)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Queue *pEmpty = &amp;(pQS-&gt;queue1);</span><br><span class="line">Queue *pNotEmpty = &amp;(pQS-&gt;queue2);</span><br><span class="line"><span class="keyword">if</span> (QueueEmpty(pNotEmpty)) <span class="comment">//假设队列二是空，如果队列二空，则不空的就是队列一</span></span><br><span class="line">&#123;</span><br><span class="line">pEmpty = &amp;(pQS-&gt;queue2);</span><br><span class="line">pNotEmpty = &amp;(pQS-&gt;queue1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (QueueSize(pNotEmpty) &gt; <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">QDataType data = QueueFront(pNotEmpty);</span><br><span class="line">QueuePop(pNotEmpty);</span><br><span class="line">QueuePush(pEmpty,data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">QueuePop(pNotEmpty);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="获取压入的元素"><a href="#获取压入的元素" class="headerlink" title="获取压入的元素"></a>获取压入的元素</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">QDataType <span class="title">QStackTop</span><span class="params">(QStack *pQS)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">QDataType data;</span><br><span class="line">QDataType r;</span><br><span class="line">Queue *pEmpty = &amp;(pQS-&gt;queue1);</span><br><span class="line">Queue *pNotEmpty = &amp;(pQS-&gt;queue2);</span><br><span class="line"><span class="keyword">if</span> (QueueEmpty(pNotEmpty)) <span class="comment">//假设队列二是空，如果队列二空，则不空的就是队列一</span></span><br><span class="line">&#123;</span><br><span class="line">pEmpty = &amp;(pQS-&gt;queue2);</span><br><span class="line">pNotEmpty = &amp;(pQS-&gt;queue1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (QueueSize(pNotEmpty) &gt; <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">data = QueueFront(pNotEmpty);</span><br><span class="line">QueuePop(pNotEmpty);</span><br><span class="line">QueuePush(pEmpty,data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">r = QueueFront(pNotEmpty);</span><br><span class="line">QueuePop(pNotEmpty);</span><br><span class="line">QueuePush(pEmpty,r);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TestQStack</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">QStack qstack;</span><br><span class="line">QStackInit(&amp;qstack);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;<span class="number">9</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">QStackPush(&amp;qstack,i);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"压入第%d ,压入 %d\n"</span>,i+<span class="number">1</span>,QStackTop(&amp;qstack));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Top = %d "</span>,QStackTop(&amp;qstack));</span><br><span class="line"><span class="comment">//QStackPop(&amp;qstack);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;\assets\js\APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;利用两个队列实现一个栈&quot;&gt;&lt;a href=&quot;#利用两个队列实现一个栈&quot; class=&quot;headerlink&quot; title=&quot;利用
      
    
    </summary>
    
      <category term="数据结构" scheme="https://LiuZiQiao.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="Queue" scheme="https://LiuZiQiao.github.io/tags/Queue/"/>
    
  </entry>
  
  <entry>
    <title>栈实现队列</title>
    <link href="https://LiuZiQiao.github.io/2018/10/14/%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97/"/>
    <id>https://LiuZiQiao.github.io/2018/10/14/栈实现队列/</id>
    <published>2018-10-14T12:19:07.000Z</published>
    <updated>2018-10-14T12:54:44.455Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><a id="more"></a><h3 id="结构体定义"><a href="#结构体定义" class="headerlink" title="结构体定义"></a>结构体定义</h3><p>首先我们需要引入栈文件Stack.h<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Stack.h"</span></span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*两个栈实现一个队列</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Queues</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">Stack stack1;</span><br><span class="line">Stack stack2;</span><br><span class="line">&#125;Queues;</span><br></pre></td></tr></table></figure></p><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QueuesInit</span><span class="params">(Queues *pQs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">StackInit(&amp;(pQs-&gt;stack1));</span><br><span class="line">StackInit(&amp;(pQs-&gt;stack2));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="插入元素"><a href="#插入元素" class="headerlink" title="插入元素"></a>插入元素</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QueuesPush</span><span class="params">(Queues *pQs,DataType data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">StackPush(&amp;(pQs-&gt;stack1),data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QueuesPop</span><span class="params">(Queues *pQs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (StackEmpty(&amp;(pQs-&gt;stack2)))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (!StackEmpty(&amp;(pQs-&gt;stack1)))</span><br><span class="line">&#123;</span><br><span class="line">DataType data = StackTop(&amp;(pQs-&gt;stack1));</span><br><span class="line">StackPush(&amp;(pQs-&gt;stack2),data);</span><br><span class="line">StackPop(&amp;(pQs-&gt;stack1));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">StackPop(&amp;(pQs-&gt;stack2));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="获取队列队首元素"><a href="#获取队列队首元素" class="headerlink" title="获取队列队首元素"></a>获取队列队首元素</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function">DataType <span class="title">QueuesFront</span><span class="params">(Queues *pQs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (StackEmpty(&amp;(pQs-&gt;stack2)))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> ( !StackEmpty(&amp;(pQs-&gt;stack1)))</span><br><span class="line">&#123;</span><br><span class="line">DataType data = StackTop(&amp;(pQs-&gt;stack1));</span><br><span class="line">StackPush(&amp;(pQs-&gt;stack2),data);</span><br><span class="line">StackPop(&amp;(pQs-&gt;stack1));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> StackTop(&amp;(pQs-&gt;stack2));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TestQueues</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">Queues queues;</span><br><span class="line"><span class="keyword">int</span> arr[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;;</span><br><span class="line">QueuesInit(&amp;queues);</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;<span class="number">9</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">QueuesPush(&amp;queues,arr[i]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>,QueuesFront(&amp;queues));</span><br><span class="line">QueuesPop(&amp;queues);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;\assets\js\APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;结构体定义&quot;&gt;&lt;a href=&quot;#结构体定义&quot; class=&quot;headerlink&quot; title=&quot;结构体定义&quot;&gt;&lt;/a&gt;结构体
      
    
    </summary>
    
      <category term="数据结构" scheme="https://LiuZiQiao.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="Stack" scheme="https://LiuZiQiao.github.io/tags/Stack/"/>
    
  </entry>
  
  <entry>
    <title>位运算实现加减乘除</title>
    <link href="https://LiuZiQiao.github.io/2018/10/12/%E4%BD%8D%E8%BF%90%E7%AE%97%E5%AE%9E%E7%8E%B0%E5%8A%A0%E5%87%8F%E4%B9%98%E9%99%A4/"/>
    <id>https://LiuZiQiao.github.io/2018/10/12/位运算实现加减乘除/</id>
    <published>2018-10-12T15:19:54.000Z</published>
    <updated>2018-10-13T10:53:28.919Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><a id="more"></a><p>数据在计算机内存中是以二进制存储的。<br>几种常用的位运算：   </p><p>与运算&amp;： 对应位均为1时为1，其它为0。<br>或运算|： 对应位均为0时为0，其它为1。<br>异或运算^： 对应位不相同时为1，相同时为0.<br>按位取反~： 每一位取反<br>右移&gt;&gt;: 将二进制进行右移，低位丢掉，高位补零。<br>左移&lt;&lt;： 将二进制进行左移，低位补零，高位丢掉。   </p><h3 id="加"><a href="#加" class="headerlink" title="加"></a>加</h3><p>以0111 + 0101为例，观察异或运算和与运算的结果</p><blockquote><p>0111 ^ 0101 = 0010; //结果的每一位等于对应位相加模二，刚好是不带进位的加法结果。</p><p>0111 &amp; 0101 = 0101; //结果的1表示对应位相加为2，0表示对应位相加小于二，刚好是进位标识。</p></blockquote><p>又因为进位是向高位进位，也就是说如果第二位是1，则表示在计算过程中要向第三位进位，所以可以将与运算结果左移一位后和异或运算的结果做加法。<br>代码如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span>  (b == <span class="number">0</span>) ?a: add(a^b, (a&amp;b) &lt;&lt; <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">if(b == 0)</span></span><br><span class="line"><span class="comment">return a;</span></span><br><span class="line"><span class="comment">else</span></span><br><span class="line"><span class="comment">return add(a^b,(a&amp;b)&lt;&lt;1);</span></span><br><span class="line"><span class="comment">//异或结果 + 与运算结果左移一位</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="减"><a href="#减" class="headerlink" title="减"></a>减</h3><p>减法和加法相同，减去一个数相当于加上这个数的相反数，所以完全可以利用加法操作，唯一需要做的就是求出被减数的相反数。<br>求相反数的方法：每一位取反，末位加一。<br>代码如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//求n的相反数</span></span><br><span class="line"><span class="comment">//~：按位取反</span></span><br><span class="line"><span class="comment">//add：加法操作，末位加一</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">negtive</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> add(~n,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Sub</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> add(a, negtive(b));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="乘"><a href="#乘" class="headerlink" title="乘"></a>乘</h3><p>平时在笔算乘法数据都是十进制的，而抛去思维定势，把数看成是二进制，也可以进行笔算乘法，像这样<br><img src="https://img-blog.csdn.net/20170607225733749?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc2luYXRfMzUyNjEzMTU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="123"></p><p>根据算式可以知道，对于a * b，每次只需要将a左移一位乘上b的对应位，然后同上一次的结果做加法即可。<br>也就意味着当b的对应位为1时，对a左移一位然后同上一次的结果做加法。<br>如果b的对应位为0，只对a左移一位。<br>当然，上述这些运算不包括符号位，所以两个操作数都需要先转换成正数，符号需要单独考虑。对于4个字节（32位整数）来说，获取符号位只需要取出第31位的值即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取符号位，判断是正负</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getSign</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> n &gt;&gt; <span class="number">31</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 求绝对值</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">PosAbs</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (getSign(n) &amp; <span class="number">1</span>) ? negtive(n) : n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Mul</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="comment">//如果两个数符号位不相容，则结果为负</span></span><br><span class="line"><span class="keyword">int</span> flag = <span class="number">0</span>; <span class="comment">// </span></span><br><span class="line"><span class="keyword">if</span> (getSign(a) ^ getSign(b))</span><br><span class="line">flag = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">a = PosAbs(a);</span><br><span class="line">b = PosAbs(b);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (b | <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"> <span class="comment">//如果两个数符号位不相容，则结果为负</span></span><br><span class="line"><span class="keyword">if</span> (b &amp; <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">res = add(res, a);</span><br><span class="line">&#125;</span><br><span class="line">a = a &lt;&lt; <span class="number">1</span>;</span><br><span class="line">b = b &gt;&gt; <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> flag == <span class="number">1</span> ? negtive(res) : res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="除"><a href="#除" class="headerlink" title="除"></a>除</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Div</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (b == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> falg = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (getSign(a) ^ getSign(b))</span><br><span class="line">falg = <span class="number">1</span>;</span><br><span class="line">a = PosAbs(a);</span><br><span class="line">b = PosAbs(b);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (a&gt;=b)</span><br><span class="line">&#123;</span><br><span class="line">res = add(res, <span class="number">1</span>);</span><br><span class="line">a = Sub(a, b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> falg == <span class="number">1</span> ? negtive(res) : res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;\assets\js\APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;数据在计算机内存中是以二进制存储的。&lt;br&gt;几种常用的位运算：   &lt;/p&gt;
&lt;p&gt;与运算&amp;amp;： 对应位均为1时为1，其它为0。&lt;b
      
    
    </summary>
    
      <category term="C/C++" scheme="https://LiuZiQiao.github.io/categories/C-C/"/>
    
    
      <category term="位运算" scheme="https://LiuZiQiao.github.io/tags/%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>Symmetric binary tree</title>
    <link href="https://LiuZiQiao.github.io/2018/10/09/%E5%AF%B9%E7%A7%B0%E4%BA%8C%E5%8F%89%E6%A0%91%E5%88%A4%E6%96%AD/"/>
    <id>https://LiuZiQiao.github.io/2018/10/09/对称二叉树判断/</id>
    <published>2018-10-08T23:40:14.000Z</published>
    <updated>2018-10-09T07:39:04.539Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><a id="more"></a><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>请实现一个函数，用来判断一颗二叉树是不是对称的。注意，如果一个二叉树同此二叉树的镜像是同样的，定义其为对称的。</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p><strong>思路：首先判断其根结点是否为空，然后判断左右结点是否对称，也就是左右结点是不是同时为空并且值相等</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">struct TreeNode &#123;</span></span><br><span class="line"><span class="comment">    int val;</span></span><br><span class="line"><span class="comment">    struct TreeNode *left;</span></span><br><span class="line"><span class="comment">    struct TreeNode *right;</span></span><br><span class="line"><span class="comment">    TreeNode(int x) :</span></span><br><span class="line"><span class="comment">            val(x), left(NULL), right(NULL) &#123;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isSymmetrical</span><span class="params">(TreeNode* pRoot)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(pRoot == <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">bool</span> res = isTreeSymmetrical(pRoot-&gt;left,pRoot-&gt;right);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isTreeSymmetrical</span><span class="params">(TreeNode* pHead1,TreeNode* pHead2)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(pHead1 == <span class="literal">NULL</span> &amp;&amp; pHead2 == <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(pHead1 == <span class="literal">NULL</span> || pHead2 == <span class="literal">NULL</span>) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>((pHead1-&gt;val == pHead2-&gt;val))</span><br><span class="line">        &#123;</span><br><span class="line">             <span class="keyword">return</span> isTreeSymmetrical(pHead1-&gt;left,pHead2-&gt;right)&amp;&amp;isTreeSymmetrical(pHead1-&gt;right,pHead2-&gt;left);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;\assets\js\APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h3&gt;&lt;p&gt;请实
      
    
    </summary>
    
      <category term="每日一题" scheme="https://LiuZiQiao.github.io/categories/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
    
      <category term="二叉树" scheme="https://LiuZiQiao.github.io/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>TwoArrayIntesection</title>
    <link href="https://LiuZiQiao.github.io/2018/10/07/%20IntersectionofTwoArrays/"/>
    <id>https://LiuZiQiao.github.io/2018/10/07/ IntersectionofTwoArrays/</id>
    <published>2018-10-07T15:39:46.000Z</published>
    <updated>2018-10-08T23:50:38.683Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><a id="more"></a><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>Given two arrays, write a function to compute their intersection.</p><p>Example 1:</p><p>Input: nums1 = [1,2,2,1], nums2 = [2,2]<br>Output: [2]<br>Example 2:</p><p>Input: nums1 = [4,9,5], nums2 = [9,4,9,8,4]<br>Output: [9,4]<br>Note:</p><p>Each element in the result must be unique.<br>The result can be in any order.</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] intersection(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span>[] nums2) &#123;</span><br><span class="line">    Set&lt;Integer&gt; set1 = <span class="keyword">new</span> HashSet();</span><br><span class="line">Set&lt;Integer&gt; set2 = <span class="keyword">new</span> HashSet();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums1.length; i++) &#123;</span><br><span class="line">set1.add(nums1[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; nums2.length; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (set1.contains(nums2[j])) &#123;</span><br><span class="line">set2.add(nums2[j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span>[] num = <span class="keyword">new</span> <span class="keyword">int</span>[set2.size()];</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (Integer n : set2) &#123;</span><br><span class="line">num[i] = n;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;\assets\js\APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h3&gt;&lt;p&gt;Gi
      
    
    </summary>
    
      <category term="每日一题" scheme="https://LiuZiQiao.github.io/categories/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
    
      <category term="Set" scheme="https://LiuZiQiao.github.io/tags/Set/"/>
    
  </entry>
  
  <entry>
    <title>Sum of the first n consecutive integers</title>
    <link href="https://LiuZiQiao.github.io/2018/10/06/%E6%B1%82%E5%89%8Dn%E4%B8%AA%E6%95%B0%E7%9A%84%E5%92%8C/"/>
    <id>https://LiuZiQiao.github.io/2018/10/06/求前n个数的和/</id>
    <published>2018-10-06T07:52:03.000Z</published>
    <updated>2018-10-06T07:58:35.173Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><a id="more"></a><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>For 1 + 2 + 3 +… +n, you cannot use the multiplication/division, for, while, if, else, switch, case and other keywords and conditional judgment statement (A? B, C).</p><p>该题翻译过来就是求1+2+3+…+n，要求不能使用乘除法、for、while、if、else、switch、case等关键字及条件判断语句（A?B:C）。以下是给出的C解决方案</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>**思路：让其从最后一个数开始相加，直到n为0，则加完<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//辅助函数求和保存在i中</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Sum</span><span class="params">(<span class="keyword">int</span> n )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">i = i + n;</span><br><span class="line">n--;</span><br><span class="line"><span class="keyword">return</span> Sum_Solution(n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//函数入口</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">Sum_Solution</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> n==<span class="number">0</span> ? i : Sum(n);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;\assets\js\APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h3&gt;&lt;p&gt;Fo
      
    
    </summary>
    
      <category term="剑指offer" scheme="https://LiuZiQiao.github.io/categories/%E5%89%91%E6%8C%87offer/"/>
    
    
  </entry>
  
  <entry>
    <title>链表面试题</title>
    <link href="https://LiuZiQiao.github.io/2018/10/05/%E9%93%BE%E8%A1%A8%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>https://LiuZiQiao.github.io/2018/10/05/链表面试题/</id>
    <published>2018-10-05T04:26:26.000Z</published>
    <updated>2018-10-05T05:02:12.786Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><a id="more"></a><p>关于链表已经学了有一段时间了，今天抽空进行了整理，列出来常见的有关链表的面试题，以下想法如有瑕疵望批评指出，希望能给初学者带来一点参考和价值</p><h3 id="从尾到头打印单链表"><a href="#从尾到头打印单链表" class="headerlink" title="从尾到头打印单链表"></a>从尾到头打印单链表</h3><h4 id="递归打印"><a href="#递归打印" class="headerlink" title="递归打印"></a>递归打印</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1、从尾到头打印单链表 递归</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ListReversePrint</span><span class="params">(ListNode *Node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (Node == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ListReversePrint(Node-&gt;next);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d--&gt;"</span>,Node-&gt;data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="非递归打印"><a href="#非递归打印" class="headerlink" title="非递归打印"></a>非递归打印</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ListReveresePrint2</span><span class="params">(ListNode *Node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ListNode *end = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">while</span> (end != Node)</span><br><span class="line">&#123;</span><br><span class="line">ListNode *cur = Node;</span><br><span class="line"><span class="keyword">while</span> (cur-&gt;next != end)</span><br><span class="line">&#123;</span><br><span class="line">cur = cur-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d--&gt;"</span>,cur-&gt;data);</span><br><span class="line">end = cur;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删除一个无头单链表的非尾结点（不能遍历链表）"><a href="#删除一个无头单链表的非尾结点（不能遍历链表）" class="headerlink" title="删除一个无头单链表的非尾结点（不能遍历链表）"></a>删除一个无头单链表的非尾结点（不能遍历链表）</h3><h4 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//2. 删除一个无头单链表的非尾结点（不能遍历链表）</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ListDelNotFirst</span><span class="params">(ListNode **Node ,ListNode *pos)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ListNode *del;</span><br><span class="line"><span class="keyword">if</span> (Node == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//pos 位置为第一个结点时，修改指针</span></span><br><span class="line"><span class="keyword">if</span> (pos == *Node)</span><br><span class="line">&#123;</span><br><span class="line">*Node = pos-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(pos);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// pos 位置不是第一个结点时也不是最后一个结点时</span></span><br><span class="line">pos-&gt;data = pos-&gt;next-&gt;data;   <span class="comment">//先修改data的值</span></span><br><span class="line">del = pos-&gt;next;     <span class="comment">//将pos-&gt;next作为要删除的结点</span></span><br><span class="line">pos-&gt;next = del-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(del);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TestListDelNotFirst</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ListNode *<span class="built_in">list</span> = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">ListPushBack(&amp;<span class="built_in">list</span>,<span class="number">1</span>);</span><br><span class="line">ListPushBack(&amp;<span class="built_in">list</span>,<span class="number">2</span>);</span><br><span class="line">ListPushBack(&amp;<span class="built_in">list</span>,<span class="number">3</span>);</span><br><span class="line">ListPushBack(&amp;<span class="built_in">list</span>,<span class="number">4</span>);</span><br><span class="line">ListPushBack(&amp;<span class="built_in">list</span>,<span class="number">5</span>);</span><br><span class="line">ListPushBack(&amp;<span class="built_in">list</span>,<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">ListPrint(<span class="built_in">list</span>);</span><br><span class="line"></span><br><span class="line">ListDelNotFirst(<span class="built_in">list</span>,<span class="built_in">list</span>);</span><br><span class="line"></span><br><span class="line">ListPrint(<span class="built_in">list</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="在无头单链表的一个结点前插入一个结点（不能遍历链表）"><a href="#在无头单链表的一个结点前插入一个结点（不能遍历链表）" class="headerlink" title="在无头单链表的一个结点前插入一个结点（不能遍历链表）"></a>在无头单链表的一个结点前插入一个结点（不能遍历链表）</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//3.在无头单链表的一个结点前插入一个结点（不能遍历链表）</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ListInsertBefore</span><span class="params">(ListNode **Node ,ListNode *pos ,DataType data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ListNode *newNode;</span><br><span class="line"><span class="keyword">if</span> (*Node == <span class="literal">NULL</span> &amp;&amp; pos == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//插入的结点是在第一个结点上</span></span><br><span class="line"><span class="keyword">if</span> (pos == *Node)</span><br><span class="line">&#123;</span><br><span class="line">ListNode *newNode = CreateNode(data);</span><br><span class="line">newNode-&gt;next = *Node;</span><br><span class="line">*Node = newNode;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//插入的结点不是第一个结点时</span></span><br><span class="line">newNode = CreateNode(pos-&gt;data);</span><br><span class="line">newNode-&gt;next = pos-&gt;next;  <span class="comment">//后插</span></span><br><span class="line">pos-&gt;next = newNode;</span><br><span class="line">pos-&gt;data = data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="逆置-反转单链表"><a href="#逆置-反转单链表" class="headerlink" title="逆置/反转单链表"></a>逆置/反转单链表</h3><h4 id="思路一："><a href="#思路一：" class="headerlink" title="思路一："></a>思路一：</h4><p>从第二个结点开始，将其删除，人挪活插在第一个结点处，直到链表结束</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">listReverse</span><span class="params">(ListNode **Node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (Node == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (*Node == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//只有一个结点</span></span><br><span class="line"><span class="keyword">if</span> ((*Node)-&gt;next == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//至少两个结点</span></span><br><span class="line">ListNode *cur = *Node;</span><br><span class="line"><span class="keyword">while</span> (cur-&gt;next != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">ListNode *rm = cur-&gt;next;</span><br><span class="line">cur-&gt;next = rm-&gt;next;</span><br><span class="line">rm-&gt;next = *Node;</span><br><span class="line">*Node = rm;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="思路二："><a href="#思路二：" class="headerlink" title="思路二："></a>思路二：</h4><p>改变每个结点的指针指向从而逆置<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">listReverseRePoint</span><span class="params">(ListNode **Node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (Node == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (*Node == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ((*Node)-&gt;next == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ListNode *pre = *Node;</span><br><span class="line">ListNode *cur = (*Node)-&gt;next;</span><br><span class="line">pre-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (cur != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">ListNode *temp = cur-&gt;next;</span><br><span class="line">cur-&gt;next = pre;</span><br><span class="line">pre =cur;</span><br><span class="line">cur = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">*Node = pre;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="找出两个链表里相同数据"><a href="#找出两个链表里相同数据" class="headerlink" title="找出两个链表里相同数据"></a>找出两个链表里相同数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">// 5.找出两个链表里相同数据</span><br><span class="line">void ListIntersection(ListNode *list1,ListNode *list2)</span><br><span class="line">&#123;</span><br><span class="line">ListNode *head1 = list1;</span><br><span class="line">ListNode *head2 = list2;</span><br><span class="line"></span><br><span class="line">DataType data;</span><br><span class="line"></span><br><span class="line">if (head1 ==NULL &amp;&amp; head2 == NULL)</span><br><span class="line">&#123;</span><br><span class="line">return ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">while (head1 != NULL &amp;&amp; head2 != NULL)</span><br><span class="line">&#123;</span><br><span class="line">if (head1-&gt;data &lt; head2-&gt;data)</span><br><span class="line">&#123;</span><br><span class="line">head1 = head1-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"> if (head1-&gt;data &gt; head2-&gt;data)</span><br><span class="line">&#123;</span><br><span class="line">head2 = head2-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if (head1-&gt;data == head2-&gt;data)</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;%d &quot;,head1-&gt;data);</span><br><span class="line">data = head1-&gt;data;</span><br><span class="line"></span><br><span class="line">while (head2 != NULL &amp;&amp; data == head2-&gt;data  )</span><br><span class="line">&#123;</span><br><span class="line">head2 = head2-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">while (head1 != NULL &amp;&amp; data == head1-&gt;data )</span><br><span class="line">&#123;</span><br><span class="line">head1 = head1-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TestListInterstion</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ListNode *list1 = <span class="literal">NULL</span>;</span><br><span class="line">ListNode *list2 = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">ListPushBack(&amp;list1,<span class="number">1</span>);</span><br><span class="line">ListPushBack(&amp;list1,<span class="number">1</span>);</span><br><span class="line">ListPushBack(&amp;list1,<span class="number">3</span>);</span><br><span class="line">ListPushBack(&amp;list1,<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">ListPushBack(&amp;list2,<span class="number">2</span>);</span><br><span class="line">ListPushBack(&amp;list2,<span class="number">2</span>);</span><br><span class="line">ListPushBack(&amp;list2,<span class="number">4</span>);</span><br><span class="line">ListPushBack(&amp;list2,<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">ListIntersection(list1,list2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单链表实现约瑟夫环"><a href="#单链表实现约瑟夫环" class="headerlink" title="单链表实现约瑟夫环"></a>单链表实现约瑟夫环</h3><h4 id="核心代码-1"><a href="#核心代码-1" class="headerlink" title="核心代码"></a>核心代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//6.单链表实现约瑟夫环</span></span><br><span class="line"><span class="function">ListNode* <span class="title">ListJosephCircle</span><span class="params">(ListNode *<span class="built_in">list</span>,DataType k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//第一步，变成环</span></span><br><span class="line">ListNode *tail = <span class="built_in">list</span>;</span><br><span class="line">ListNode *cur = <span class="built_in">list</span>;</span><br><span class="line">ListNode *pre = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">int</span> i =<span class="number">0</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">list</span> == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="keyword">while</span> (tail-&gt;next != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">tail = tail-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">tail-&gt;next = <span class="built_in">list</span>;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="comment">//第二步，找到第k个数</span></span><br><span class="line"><span class="keyword">while</span> ( cur-&gt;next != cur)</span><br><span class="line">&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line">        <span class="comment">//1 2 3 4 5 6 7 8 </span></span><br><span class="line"><span class="keyword">while</span> (--k)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">pre = cur;  <span class="comment">//记录剔除结点的前一个结点</span></span><br><span class="line">cur = cur-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;k;i++)</span><br><span class="line">&#123;</span><br><span class="line">pre = cur;  <span class="comment">//记录剔除结点的前一个结点</span></span><br><span class="line">cur = cur-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pre-&gt;next =cur-&gt;next;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"淘汰：%d\n"</span>,cur-&gt;data);</span><br><span class="line"><span class="built_in">free</span>(cur);</span><br><span class="line"></span><br><span class="line">cur = pre-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">cur-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> cur;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试-2"><a href="#测试-2" class="headerlink" title="测试"></a>测试</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TestListJosephCircle</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ListNode *list1 = <span class="literal">NULL</span>;</span><br><span class="line">ListNode *re;</span><br><span class="line">ListPushBack(&amp;list1,<span class="number">1</span>);</span><br><span class="line">ListPushBack(&amp;list1,<span class="number">2</span>);</span><br><span class="line">ListPushBack(&amp;list1,<span class="number">3</span>);</span><br><span class="line">ListPushBack(&amp;list1,<span class="number">4</span>);</span><br><span class="line">ListPushBack(&amp;list1,<span class="number">5</span>);</span><br><span class="line">ListPushBack(&amp;list1,<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">ListPrint(list1);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">re = ListJosephCircle(list1,<span class="number">3</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,re-&gt;data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="合并两个有序的链表，合并后依然有序"><a href="#合并两个有序的链表，合并后依然有序" class="headerlink" title="合并两个有序的链表，合并后依然有序"></a>合并两个有序的链表，合并后依然有序</h3><h4 id="具体代码"><a href="#具体代码" class="headerlink" title="具体代码"></a>具体代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//7.合并两个有序的链表，合并后依然有序</span></span><br><span class="line"><span class="function">ListNode *<span class="title">ListMerge</span><span class="params">(ListNode *list1,ListNode *list2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ListNode *cur1 = list1;</span><br><span class="line">ListNode *cur2 = list2;</span><br><span class="line">ListNode *result = <span class="literal">NULL</span>;<span class="comment">//结果链表</span></span><br><span class="line">ListNode *tail = <span class="literal">NULL</span>; <span class="comment">//结果链表中的最后一个结点，方便尾插</span></span><br><span class="line">ListNode *next = <span class="literal">NULL</span>;<span class="comment">//保存遍历过程中的下一个结点</span></span><br><span class="line">ListNode *node;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (cur1 != <span class="literal">NULL</span> &amp;&amp; cur2 != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (cur1-&gt;data &lt;= cur2-&gt;data)</span><br><span class="line">&#123;</span><br><span class="line">node = cur1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">node =cur2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">next = node-&gt;next;</span><br><span class="line"><span class="keyword">if</span> (result != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">tail-&gt;next = node;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">result = node;</span><br><span class="line">&#125;</span><br><span class="line">node-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">tail = node;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (node == cur1)</span><br><span class="line">&#123;</span><br><span class="line">cur1 = next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">cur2 = next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//一个链表空了</span></span><br><span class="line"><span class="keyword">if</span> (cur1 == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">tail-&gt;next =cur2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (cur2 == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">tail-&gt;next =cur1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试-3"><a href="#测试-3" class="headerlink" title="测试"></a>测试</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TestMerge</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ListNode *list1 = <span class="literal">NULL</span>;</span><br><span class="line">ListNode *list2 = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">ListNode *result = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">ListPushBack(&amp;list1,<span class="number">1</span>);</span><br><span class="line">ListPushBack(&amp;list1,<span class="number">2</span>);</span><br><span class="line">ListPushBack(&amp;list1,<span class="number">3</span>);</span><br><span class="line">ListPushBack(&amp;list1,<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">ListPushBack(&amp;list2,<span class="number">1</span>);</span><br><span class="line">ListPushBack(&amp;list2,<span class="number">2</span>);</span><br><span class="line">ListPushBack(&amp;list2,<span class="number">3</span>);</span><br><span class="line">ListPushBack(&amp;list2,<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">result = ListMerge(list1,list2);</span><br><span class="line">ListPrint(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="查找单链表的中间结点，要求只能遍历一次链表"><a href="#查找单链表的中间结点，要求只能遍历一次链表" class="headerlink" title="查找单链表的中间结点，要求只能遍历一次链表"></a>查找单链表的中间结点，要求只能遍历一次链表</h3><p><strong>思路：定义快慢指针，当快指针走完时，慢指针刚好是在中间位置，好比是两人赛跑，跑的快点人的速度是慢的人的二倍</strong></p><h4 id="具体代码-1"><a href="#具体代码-1" class="headerlink" title="具体代码"></a>具体代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//8.查找单链表的中间结点，要求只能遍历一次链表</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ListFindMidNode</span><span class="params">(ListNode *<span class="built_in">list</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ListNode *fast = <span class="built_in">list</span>;</span><br><span class="line">ListNode *slow = <span class="built_in">list</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (fast != <span class="literal">NULL</span> &amp;&amp; fast-&gt;next != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">fast = fast-&gt;next;</span><br><span class="line"><span class="keyword">if</span> (fast == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">fast = fast-&gt;next;</span><br><span class="line"><span class="keyword">if</span> (fast == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">slow = slow-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,slow-&gt;data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试-4"><a href="#测试-4" class="headerlink" title="测试"></a>测试</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TestFindMid</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ListNode *<span class="built_in">list</span> = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">ListPushBack(&amp;<span class="built_in">list</span>,<span class="number">1</span>);</span><br><span class="line">ListPushBack(&amp;<span class="built_in">list</span>,<span class="number">2</span>);</span><br><span class="line">ListPushBack(&amp;<span class="built_in">list</span>,<span class="number">3</span>);</span><br><span class="line">ListPushBack(&amp;<span class="built_in">list</span>,<span class="number">4</span>);</span><br><span class="line">ListPushBack(&amp;<span class="built_in">list</span>,<span class="number">5</span>);</span><br><span class="line">ListPushBack(&amp;<span class="built_in">list</span>,<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">ListFindMidNode(<span class="built_in">list</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="查找单链表中的倒数第K个结点，要求只能遍历一次链表"><a href="#查找单链表中的倒数第K个结点，要求只能遍历一次链表" class="headerlink" title="查找单链表中的倒数第K个结点，要求只能遍历一次链表"></a>查找单链表中的倒数第K个结点，要求只能遍历一次链表</h3><p><strong>思路：定义快慢指针，快指针先走k步，满指针再开始走，快指针走完的时候就是慢指针走到倒数第k个结点处</strong></p><h4 id="具体代码-2"><a href="#具体代码-2" class="headerlink" title="具体代码"></a>具体代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//9.查找单链表中的倒数第K个结点，要求只能遍历一次链表</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ListFindTailK</span><span class="params">(ListNode *<span class="built_in">list</span>,DataType k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ListNode *fast = <span class="built_in">list</span>;</span><br><span class="line">ListNode *slow = <span class="built_in">list</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (k--)</span><br><span class="line">&#123;</span><br><span class="line">fast = fast-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (fast != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">fast = fast-&gt;next;</span><br><span class="line">slow = slow-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,slow-&gt;data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试-5"><a href="#测试-5" class="headerlink" title="测试"></a>测试</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TestFindTailK</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ListNode *<span class="built_in">list</span> = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">ListPushBack(&amp;<span class="built_in">list</span>,<span class="number">1</span>);</span><br><span class="line">ListPushBack(&amp;<span class="built_in">list</span>,<span class="number">2</span>);</span><br><span class="line">ListPushBack(&amp;<span class="built_in">list</span>,<span class="number">3</span>);</span><br><span class="line">ListPushBack(&amp;<span class="built_in">list</span>,<span class="number">4</span>);</span><br><span class="line">ListPushBack(&amp;<span class="built_in">list</span>,<span class="number">5</span>);</span><br><span class="line">ListPushBack(&amp;<span class="built_in">list</span>,<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">ListFindTailK(<span class="built_in">list</span>,<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删除单链表中的倒数第K个结点"><a href="#删除单链表中的倒数第K个结点" class="headerlink" title="删除单链表中的倒数第K个结点"></a>删除单链表中的倒数第K个结点</h3><p><strong>思路：同查找倒数第k个结点一样，我们定义快慢指针进行异步，还需要定义一个pre来记录要删除结点的先驱，删除后需要指向被删除的下一个</strong></p><h4 id="具体代码-3"><a href="#具体代码-3" class="headerlink" title="具体代码"></a>具体代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//10.删除单链表中的倒数第K个结点</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ListDelTailK</span><span class="params">(ListNode *<span class="built_in">list</span>, DataType k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ListNode *fast = <span class="built_in">list</span>;</span><br><span class="line">ListNode *slow = <span class="built_in">list</span>;</span><br><span class="line">ListNode *pre = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (k--)</span><br><span class="line">&#123;</span><br><span class="line">fast = fast-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (fast != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">pre = slow;</span><br><span class="line">fast = fast-&gt;next;</span><br><span class="line">slow = slow-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">pre-&gt;next = slow-&gt;next;</span><br><span class="line"></span><br><span class="line"><span class="built_in">free</span>(slow);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试-6"><a href="#测试-6" class="headerlink" title="测试"></a>测试</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TestDelTailK</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ListNode *<span class="built_in">list</span> = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">ListPushBack(&amp;<span class="built_in">list</span>,<span class="number">1</span>);</span><br><span class="line">ListPushBack(&amp;<span class="built_in">list</span>,<span class="number">2</span>);</span><br><span class="line">ListPushBack(&amp;<span class="built_in">list</span>,<span class="number">3</span>);</span><br><span class="line">ListPushBack(&amp;<span class="built_in">list</span>,<span class="number">4</span>);</span><br><span class="line">ListPushBack(&amp;<span class="built_in">list</span>,<span class="number">5</span>);</span><br><span class="line">ListPushBack(&amp;<span class="built_in">list</span>,<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">ListPrint(<span class="built_in">list</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n删除倒数第%d个结点\n"</span>,<span class="number">3</span>);</span><br><span class="line">ListDelTailK(<span class="built_in">list</span>,<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"> ListDelNotFirst(<span class="built_in">list</span>,<span class="built_in">list</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ListPrint(<span class="built_in">list</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;\assets\js\APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;关于链表已经学了有一段时间了，今天抽空进行了整理，列出来常见的有关链表的面试题，以下想法如有瑕疵望批评指出，希望能给初学者带来一点参考和价
      
    
    </summary>
    
      <category term="数据结构" scheme="https://LiuZiQiao.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="链表" scheme="https://LiuZiQiao.github.io/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>链表基本操作</title>
    <link href="https://LiuZiQiao.github.io/2018/10/05/%E9%93%BE%E8%A1%A8%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    <id>https://LiuZiQiao.github.io/2018/10/05/链表基本操作/</id>
    <published>2018-10-05T04:26:04.000Z</published>
    <updated>2018-10-05T05:56:19.176Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><a id="more"></a><p>学习链表有段时间了，今天给大家整理了有关链表的基本操作，例如链表的创建、增、删、查等基本操作</p><h3 id="结构体定义"><a href="#结构体定义" class="headerlink" title="结构体定义"></a>结构体定义</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> DataType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">DataType data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125; ListNode;</span><br></pre></td></tr></table></figure><h3 id="头文件的定义"><a href="#头文件的定义" class="headerlink" title="头文件的定义"></a>头文件的定义</h3><p>其中包含了面试题的头文件<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ListInit</span><span class="params">(ListNode **Node)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ListDestroy</span><span class="params">(ListNode **Node)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ListPushFront</span><span class="params">(ListNode **Node,DataType data)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ListPushBack</span><span class="params">(ListNode **Node,DataType data)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ListPopFront</span><span class="params">(ListNode **Node)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LIstPopBack</span><span class="params">(ListNode **Node)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">ListNode* <span class="title">ListFind</span><span class="params">(ListNode *Node , DataType data)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ListInsert</span><span class="params">(ListNode **Node,ListNode *pos,DataType data)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ListDelete</span><span class="params">(ListNode **Node,ListNode *pos)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除一个无头单链表的非尾结点（不能遍历链表）</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ListDelNotFirst</span><span class="params">(ListNode **Node ,ListNode *pos)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//递归写法</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ListReversePrint</span><span class="params">(ListNode *Node)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ListReveresePrint2</span><span class="params">(ListNode *Node)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ListPrint</span><span class="params">(ListNode *Node)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ListIntersection</span><span class="params">(ListNode *list1,ListNode *list2)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TestListInterstion</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">ListNode* <span class="title">ListJosephCircle</span><span class="params">(ListNode *<span class="built_in">list</span>,DataType k)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TestListJosephCircle</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">ListNode *<span class="title">ListMerge</span><span class="params">(ListNode *list1,ListNode *list2)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TestMerge</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ListFindMidNode</span><span class="params">(ListNode *<span class="built_in">list</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TestFindMid</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ListFindTailK</span><span class="params">(ListNode *<span class="built_in">list</span>,DataType k)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TestFindTailK</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ListDelTailK</span><span class="params">(ListNode *<span class="built_in">list</span>, DataType k)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TestDelTailK</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure></p><h3 id="链表的具体基本操作-文件名-List-c"><a href="#链表的具体基本操作-文件名-List-c" class="headerlink" title="链表的具体基本操作 文件名(List.c)"></a>链表的具体基本操作 文件名(List.c)</h3><h4 id="链表的初始化及销毁"><a href="#链表的初始化及销毁" class="headerlink" title="链表的初始化及销毁"></a>链表的初始化及销毁</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"List.h"</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ListInit</span><span class="params">(ListNode **Node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(Node != <span class="literal">NULL</span>);</span><br><span class="line">*Node = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ListDestroy</span><span class="params">(ListNode **Node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">*Node = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="链表结点的创建"><a href="#链表结点的创建" class="headerlink" title="链表结点的创建"></a>链表结点的创建</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> ListNode * <span class="title">CreateNode</span><span class="params">(DataType data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ListNode *newNode = (ListNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ListNode));</span><br><span class="line">assert(newNode);</span><br><span class="line">newNode-&gt;data = data;</span><br><span class="line">newNode-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> newNode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="头插法"><a href="#头插法" class="headerlink" title="头插法"></a>头插法</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//头插</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ListPushFront</span><span class="params">(ListNode **Node,DataType data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//assert(Node != NULL);</span></span><br><span class="line"></span><br><span class="line">ListNode *newNode = CreateNode(data); <span class="comment">// *newNode 用来存储新结点的地址</span></span><br><span class="line">newNode-&gt;next = *Node; <span class="comment">// 把头结点的地址赋给新结点 </span></span><br><span class="line"></span><br><span class="line">*Node = newNode;<span class="comment">// 把新结点的地址赋给头结点 （ *Node用来存储下一个结点的地址）</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="尾插法"><a href="#尾插法" class="headerlink" title="尾插法"></a>尾插法</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//尾插</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ListPushBack</span><span class="params">(ListNode **Node,DataType data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ListNode *newNode = CreateNode(data);</span><br><span class="line"></span><br><span class="line">ListNode *cur = *Node;<span class="comment">//把头结点地址赋给cur</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (*Node == <span class="literal">NULL</span>)<span class="comment">//判断头结点是否为空，如果为空，将新的结点赋给头结点（如果是空链表）</span></span><br><span class="line">&#123;</span><br><span class="line">*Node = newNode;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (cur-&gt;next !=<span class="literal">NULL</span>)<span class="comment">//如果头结点不为空，则将判断头结点指向下一个结点以及后面的结点是否为空</span></span><br><span class="line">&#123;<span class="comment">// 如果有空结点，则将赋给当前cur，</span></span><br><span class="line">cur = cur-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">cur-&gt;next = newNode;<span class="comment">//将新的结点地址赋给当前的下一结点</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="头结点的删除"><a href="#头结点的删除" class="headerlink" title="头结点的删除"></a>头结点的删除</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ListPopFront</span><span class="params">(ListNode **Node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//assert(Node != NULL);</span></span><br><span class="line"><span class="comment">//assert(*Node != NULL);</span></span><br><span class="line"></span><br><span class="line">ListNode *del = *Node;<span class="comment">// 将头结点的地址del，然后指向下一个结点并赋给Node，然后释放del（头结点存储在del中）</span></span><br><span class="line"></span><br><span class="line">*Node = del-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(del);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="尾结点的删除"><a href="#尾结点的删除" class="headerlink" title="尾结点的删除"></a>尾结点的删除</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ListPopBack</span><span class="params">(ListNode **Node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">/*ListNode *del = *Node ;</span></span><br><span class="line"><span class="comment">while (del-&gt;next != NULL)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">del = del-&gt;next;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*Node = del-&gt;next; </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">free(del);*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ListNode *del;</span><br><span class="line">ListNode *cur = *Node;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (cur-&gt;next-&gt;next != <span class="literal">NULL</span>)<span class="comment">// cur-&gt;next-&gt;next :头指针指向头结点，然后指向下一个结点</span></span><br><span class="line">&#123;<span class="comment">// 判断并找到最后一个结点的地址，赋给del</span></span><br><span class="line">cur = cur-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">del = cur-&gt;next;</span><br><span class="line">cur-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"><span class="built_in">free</span>(del);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查找</span></span><br><span class="line"><span class="function">ListNode* <span class="title">ListFind</span><span class="params">(ListNode *Node , DataType data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ListNode *cur;</span><br><span class="line"><span class="keyword">for</span> (cur = Node;cur != <span class="literal">NULL</span>;cur=cur-&gt;next)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (data == cur-&gt;data)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> cur;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="结点前插入"><a href="#结点前插入" class="headerlink" title="结点前插入"></a>结点前插入</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在某结点前插入结点</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ListInsert</span><span class="params">(ListNode **Node,ListNode *pos,DataType data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ListNode *cur = *Node;</span><br><span class="line">ListNode *newNode;</span><br><span class="line"><span class="keyword">if</span> (*Node == pos)</span><br><span class="line">&#123;</span><br><span class="line">ListPopFront(Node);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (cur-&gt;next != pos)</span><br><span class="line">&#123;</span><br><span class="line">cur = cur-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">newNode = CreateNode(data);</span><br><span class="line">newNode-&gt;next = cur-&gt;next;</span><br><span class="line">cur-&gt;next =newNode;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="删除指定结点"><a href="#删除指定结点" class="headerlink" title="删除指定结点"></a>删除指定结点</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除指定结点</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ListDelete</span><span class="params">(ListNode **Node,ListNode *pos)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ListNode *cur = *Node;</span><br><span class="line"><span class="keyword">if</span> (*Node == pos)</span><br><span class="line">&#123;</span><br><span class="line">ListPopFront(Node);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (cur-&gt;next != pos)</span><br><span class="line">&#123;</span><br><span class="line">cur = cur-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cur-&gt;next = pos-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(pos);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="单链表的打印"><a href="#单链表的打印" class="headerlink" title="单链表的打印"></a>单链表的打印</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//单链表的打印</span></span><br><span class="line"><span class="function"><span class="keyword">void</span>  <span class="title">ListPrint</span><span class="params">(ListNode *Node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ListNode *cur = Node;</span><br><span class="line"><span class="keyword">if</span> (Node == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (cur != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d--&gt; "</span>,cur-&gt;data);</span><br><span class="line">cur = cur-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;\assets\js\APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;学习链表有段时间了，今天给大家整理了有关链表的基本操作，例如链表的创建、增、删、查等基本操作&lt;/p&gt;
&lt;h3 id=&quot;结构体定义&quot;&gt;&lt;a 
      
    
    </summary>
    
      <category term="数据结构" scheme="https://LiuZiQiao.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="链表" scheme="https://LiuZiQiao.github.io/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>Frog jumping steps</title>
    <link href="https://LiuZiQiao.github.io/2018/10/02/%E9%9D%92%E8%9B%99%E8%B7%B3%E5%8F%B0%E9%98%B6/"/>
    <id>https://LiuZiQiao.github.io/2018/10/02/青蛙跳台阶/</id>
    <published>2018-10-02T07:55:43.000Z</published>
    <updated>2018-10-06T09:16:58.465Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><a id="more"></a><h3 id="问题一"><a href="#问题一" class="headerlink" title="问题一"></a>问题一</h3><p>一只青蛙一次可以跳上1级台阶，也可以跳上2级。求该青蛙跳上一个n级的台阶总共有多少种跳法（先后次序不同算不同的结果）。</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>这是一个典型的斐波那契数问题<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//递归写法</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">jump</span><span class="params">(<span class="keyword">int</span> n )</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (n &lt;<span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> jump(n - <span class="number">1</span>) + jump(n - <span class="number">2</span>);</span><br><span class="line">    <span class="comment">//非递归写法</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">jumpFloor</span><span class="params">(<span class="keyword">int</span> number)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (number == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> c = a+b;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (number&gt;<span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">a = b; </span><br><span class="line">b = c;</span><br><span class="line">c = a + b;</span><br><span class="line">number--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h3 id="问题二"><a href="#问题二" class="headerlink" title="问题二"></a>问题二</h3><p>一只青蛙一次可以跳上1级台阶，也可以跳上2级……它也可以跳上n级。求该青蛙跳上一个n级的台阶总共有多少种跳法。</p><h3 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h3><p> <strong>思路</strong>：接上一个跳台阶问题思路继续分析，上个问题中，青蛙只能跳1级或者2级。  则最后一跳只有两种可能，所以F(n) = F(n-1) + F(n-2)//现在青蛙可以跳n级。  假设台阶为n级，则青蛙可以 跳一次或者多次。  一次： 直接跳n级，这是一种方法。  多次： 青蛙跳到 1到n-1级 任一级（不管怎样跳，跳几次）后再跳一次到n级。//或者这样分析，青蛙最后一跳，有可能是从起点直接跳到终点，或者从起点跳了若干步后(到达 1到n-1级中间任一级 )再跳到n级。//所以总的方法数为：青蛙 跳到 1级到n-1级 每级可能的方法数（再跳到n级） + 1（直接跳到n级）</p><p>f(n) = f(n-1)+f(n-2) + … +f(1)<br>f(n-1) = f(n-2)+f(n-3)+ … f(1)<br>综上：<br>f(n) = 2*f(n-1)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">jumpFloorII</span><span class="params">(<span class="keyword">int</span> number)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (number &lt; <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (number == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">2</span> * jumpFloorII(number - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;\assets\js\APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;问题一&quot;&gt;&lt;a href=&quot;#问题一&quot; class=&quot;headerlink&quot; title=&quot;问题一&quot;&gt;&lt;/a&gt;问题一&lt;/h3&gt;&lt;
      
    
    </summary>
    
      <category term="剑指offer" scheme="https://LiuZiQiao.github.io/categories/%E5%89%91%E6%8C%87offer/"/>
    
    
      <category term="Fibonacci" scheme="https://LiuZiQiao.github.io/tags/Fibonacci/"/>
    
  </entry>
  
  <entry>
    <title>gdb使用教程</title>
    <link href="https://LiuZiQiao.github.io/2018/10/02/gdb%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
    <id>https://LiuZiQiao.github.io/2018/10/02/gdb使用教程/</id>
    <published>2018-10-02T02:54:10.000Z</published>
    <updated>2018-10-02T03:02:31.701Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><a id="more"></a><h3 id="GDB介绍"><a href="#GDB介绍" class="headerlink" title="GDB介绍"></a>GDB介绍</h3><p> GDB是GNU开源组织发布的一个强大的UNIX下的程序调试工具。或许，各位比较喜欢那种图形界面方式的，像VS等IDE的调试，但如果你是在UNIX平台下做软件，你会发现GDB这个调试工具有比VS的图形化调试器更强大的功能。所谓“寸有所长，尺有所短”就是这个道理。<br>一般来说，GDB主要帮忙你完成下面四个方面的功能：</p><ul><li>1、启动程序，按用户要求影响程序的运行行为</li><li>2、使运行程序在指定条件处停止（断点可以是条件表达式）</li><li>3、当程序被停住时，可以检查此时你的程序中出现的问题</li><li>4、动态的改变程序的执行环境，这样能纠正一个错误</li></ul><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><h4 id="源程序"><a href="#源程序" class="headerlink" title="源程序"></a>源程序</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> n )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>,i;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">    sum += i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">long</span> result = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=<span class="number">100</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">    result += i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"result[1-100]= %d\n"</span>,result);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"result[1-100]= %d\n"</span>,func(<span class="number">250</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译生成执行文件：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[liuxiaokun@localhost day10_1]$ cc test.c -o test</span><br></pre></td></tr></table></figure></p><h4 id="使用GDB调试"><a href="#使用GDB调试" class="headerlink" title="使用GDB调试"></a>使用GDB调试</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line">[liuxiaokun@localhost day10_1]$ gdb test   ========&gt;&gt;&gt;启动GDB</span><br><span class="line">GNU gdb (GDB) Red Hat Enterprise Linux (<span class="number">7.2</span><span class="number">-60.</span>el6_4<span class="number">.1</span>)</span><br><span class="line">Copyright (C) <span class="number">2010</span> Free Software Foundation, Inc.</span><br><span class="line">License GPLv3+: GNU GPL version <span class="number">3</span> <span class="keyword">or</span> later &lt;http:<span class="comment">//gnu.org/licenses/gpl.html&gt;</span></span><br><span class="line">This is <span class="built_in">free</span> software: you are <span class="built_in">free</span> to change <span class="keyword">and</span> redistribute it.</span><br><span class="line">There is NO WARRANTY, to the extent permitted by law.  Type <span class="string">"show copying"</span></span><br><span class="line"><span class="keyword">and</span> <span class="string">"show warranty"</span> <span class="keyword">for</span> details.</span><br><span class="line">This GDB was configured as <span class="string">"x86_64-redhat-linux-gnu"</span>.</span><br><span class="line">For bug reporting instructions, please see:</span><br><span class="line">&lt;http:<span class="comment">//www.gnu.org/software/gdb/bugs/&gt;...</span></span><br><span class="line">Reading symbols from /home/liuxiaokun/code/C/day10_1/test...done.</span><br><span class="line">(gdb) l  ========&gt;&gt;&gt; l相当于<span class="built_in">list</span>从第一行列出源程序</span><br><span class="line"><span class="number">7</span>    &#123;</span><br><span class="line"><span class="number">8</span>sum += i;</span><br><span class="line"><span class="number">9</span>    &#125;</span><br><span class="line"><span class="number">10</span>    <span class="keyword">return</span> sum;</span><br><span class="line"><span class="number">11</span>&#125;</span><br><span class="line"><span class="number">12</span></span><br><span class="line"><span class="number">13</span><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function">14</span>&#123;</span><br><span class="line"><span class="number">15</span>    <span class="keyword">int</span> i;</span><br><span class="line"><span class="number">16</span>    <span class="keyword">long</span> result = <span class="number">0</span>;</span><br><span class="line">(gdb)   ========&gt;&gt;&gt;直接回车，表示重复上一次命令</span><br><span class="line"><span class="number">17</span>    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=<span class="number">100</span>;i++)</span><br><span class="line"><span class="number">18</span>    &#123;</span><br><span class="line"><span class="number">19</span>result += i;</span><br><span class="line"><span class="number">20</span>    &#125;</span><br><span class="line"><span class="number">21</span></span><br><span class="line"><span class="number">22</span>    <span class="built_in">printf</span>(<span class="string">"result[1-100]= %d\n"</span>,result);</span><br><span class="line"><span class="number">23</span>    </span><br><span class="line"><span class="number">24</span>    <span class="built_in">printf</span>(<span class="string">"result[1-100]= %d\n"</span>,func(<span class="number">250</span>));</span><br><span class="line"><span class="number">25</span>&#125;</span><br><span class="line">(gdb) <span class="keyword">break</span> <span class="number">19</span>  ========&gt;&gt;&gt;设置断点</span><br><span class="line">Breakpoint <span class="number">1</span> at <span class="number">0x40050b</span>: file test.c, line <span class="number">19.</span></span><br><span class="line">(gdb) <span class="keyword">break</span> func  ========&gt;&gt;&gt;设置断点，在函数的入口处</span><br><span class="line">Breakpoint <span class="number">2</span> at <span class="number">0x4004cb</span>: file test.c, line <span class="number">5.</span></span><br><span class="line">(gdb) info breakpoints  =========&gt;&gt;&gt;查看断点信息</span><br><span class="line">Num     Type           Disp Enb Address            What</span><br><span class="line"><span class="number">1</span>       breakpoint     keep y   <span class="number">0x000000000040050b</span> in main at test.c:<span class="number">19</span></span><br><span class="line"><span class="number">2</span>       breakpoint     keep y   <span class="number">0x00000000004004cb</span> in func at test.c:<span class="number">5</span></span><br><span class="line">(gdb) r     =======&gt;&gt;&gt;运行程序，run命令缩写</span><br><span class="line">Starting program: /home/liuxiaokun/code/C/day10_1/test </span><br><span class="line"></span><br><span class="line">Breakpoint <span class="number">1</span>, main () at test.c:<span class="number">19</span>   ========&gt;&gt;&gt;在断点处停住</span><br><span class="line"><span class="number">19</span>result += i;</span><br><span class="line">Missing separate debuginfos, use: debuginfo-install glibc<span class="number">-2.12</span><span class="number">-1.132</span>.el6.x86_64</span><br><span class="line">(gdb) n</span><br><span class="line"><span class="number">17</span>    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=<span class="number">100</span>;i++)</span><br><span class="line">(gdb) n</span><br><span class="line"></span><br><span class="line">Breakpoint <span class="number">1</span>, main () at test.c:<span class="number">19</span></span><br><span class="line"><span class="number">19</span>result += i;</span><br><span class="line">(gdb) n</span><br><span class="line"><span class="number">17</span>    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=<span class="number">100</span>;i++)</span><br><span class="line">(gdb) c   ========&gt;&gt;&gt;继续运行程序，<span class="keyword">continue</span>的缩写</span><br><span class="line">Continuing.</span><br><span class="line"></span><br><span class="line">Breakpoint <span class="number">1</span>, main () at test.c:<span class="number">19</span></span><br><span class="line"><span class="number">19</span>result += i;</span><br><span class="line">(gdb) n</span><br><span class="line"><span class="number">17</span>    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=<span class="number">100</span>;i++)</span><br><span class="line">(gdb) p i  ========&gt;&gt;&gt;打印变量i的值，p是print的缩写</span><br><span class="line">$<span class="number">1</span> = <span class="number">5</span></span><br><span class="line">(gdb) n</span><br><span class="line"></span><br><span class="line">Breakpoint <span class="number">1</span>, main () at test.c:<span class="number">19</span></span><br><span class="line"><span class="number">19</span>result += i;</span><br><span class="line">(gdb) n</span><br><span class="line"><span class="number">17</span>    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=<span class="number">100</span>;i++)</span><br><span class="line">(gdb) n</span><br><span class="line"></span><br><span class="line">Breakpoint <span class="number">1</span>, main () at test.c:<span class="number">19</span></span><br><span class="line"><span class="number">19</span>result += i;</span><br><span class="line">(gdb) p result</span><br><span class="line">$<span class="number">2</span> = <span class="number">28</span></span><br><span class="line">(gdb) bt ========&gt;&gt;&gt;查看函数堆栈</span><br><span class="line">#<span class="number">0</span>  main () at test.c:<span class="number">19</span></span><br><span class="line">(gdb) n</span><br><span class="line"><span class="number">17</span>    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=<span class="number">100</span>;i++)</span><br><span class="line">(gdb) bt</span><br><span class="line">#<span class="number">0</span>  main () at test.c:<span class="number">17</span></span><br><span class="line">(gdb) n</span><br><span class="line"></span><br><span class="line">Breakpoint <span class="number">1</span>, main () at test.c:<span class="number">19</span></span><br><span class="line"><span class="number">19</span>result += i;</span><br><span class="line">(gdb) n</span><br><span class="line"><span class="number">17</span>    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=<span class="number">100</span>;i++)</span><br><span class="line">(gdb) n</span><br><span class="line"></span><br><span class="line">Breakpoint <span class="number">1</span>, main () at test.c:<span class="number">19</span></span><br><span class="line"><span class="number">19</span>result += i;</span><br><span class="line">(gdb) n</span><br><span class="line"><span class="number">17</span>    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=<span class="number">100</span>;i++)</span><br><span class="line">(gdb) n</span><br><span class="line"></span><br><span class="line">Breakpoint <span class="number">1</span>, main () at test.c:<span class="number">19</span></span><br><span class="line"><span class="number">19</span>result += i;</span><br><span class="line">(gdb) bt</span><br><span class="line">#<span class="number">0</span>  main () at test.c:<span class="number">19</span></span><br><span class="line">(gdb) finish    ========&gt;&gt;&gt;退出函数</span><br><span class="line"><span class="string">"finish"</span> <span class="keyword">not</span> meaningful in the outermost frame.</span><br><span class="line">(gdb) c</span><br><span class="line">Continuing.</span><br><span class="line"></span><br><span class="line">Breakpoint <span class="number">1</span>, main () at test.c:<span class="number">19</span></span><br><span class="line"><span class="number">19</span>result += i;</span><br><span class="line">(gdb) q     ==========&gt;&gt;&gt;退出gdb</span><br><span class="line">A debugging session is active.</span><br><span class="line"></span><br><span class="line">Inferior <span class="number">1</span> [process <span class="number">4248</span>] will be killed.</span><br><span class="line"></span><br><span class="line">Quit anyway? (y <span class="keyword">or</span> n)</span><br></pre></td></tr></table></figure><h4 id="GDB"><a href="#GDB" class="headerlink" title="GDB"></a>GDB</h4><p>通过以上案例，我们对GDB有了大概的了解，接下来就系统的认识GDB吧</p><p>一般来说GDB主要调试的是C/C++的程序。要调试C/C++的程序，首先在编译时，我们必须要把调试信息加到可执行文件中。使用编译器（cc/gcc/g++）的<br>-g 参数可以做到这一点。如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; gcc -g test.c -o test</span><br><span class="line">&gt; g++ -g test.cpp -o test</span><br></pre></td></tr></table></figure></p><p>==如果没有-g，你将看不见程序的函数名、变量名，所代替的全是运行时的内存地址。当你用-g把调试信息加入之后，并成功编译目标代码以后，让我们来看看如何用gdb来调试他。==</p><p><strong>启动gdb的方法有以下几种：</strong></p><ol><li>gdb <program><br>program<br>  就是可执行文件，一般就在当前目录下</program></li><li>gdb <program>  core<br> 用gdb同时调试一个运行程序和core文件，core==是非法执行后==core dump 后产生的文件</program></li><li>gdb <program> <pid><br> 如果是一个服务程序，就可以指定服务程序运行时的进程ID，gdb会自动的attach上去，并调试他，program应该在path环境变量中搜索得到   </pid></program></li></ol><p><strong>当然，gdb启动时我们可以加一些参数，详细的参数可以用gdb -help查看</strong></p><h5 id="GDB命令概貌"><a href="#GDB命令概貌" class="headerlink" title="GDB命令概貌"></a>GDB命令概貌</h5><p>启动gdb后，就你被带入gdb的调试环境中，就可以使用gdb的命令开始调试程序了，gdb的命令可以使用help命令来查看，如下所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">aliases -- Aliases of other commands</span><br><span class="line">breakpoints -- Making program stop at certain points</span><br><span class="line">data -- Examining data</span><br><span class="line">files -- Specifying and examining files</span><br><span class="line">internals -- Maintenance commands</span><br><span class="line">obscure -- Obscure features</span><br><span class="line">running -- Running the program</span><br><span class="line">stack -- Examining the stack</span><br><span class="line">status -- Status inquiries</span><br><span class="line">support -- Support facilities</span><br><span class="line">tracepoints -- Tracing of program execution without stopping the program</span><br><span class="line">user-defined -- User-defined commands</span><br><span class="line"></span><br><span class="line">Type &quot;help&quot; followed by a class name for a list of commands in that class.</span><br><span class="line">Type &quot;help all&quot; for the list of all commands.</span><br><span class="line">Type &quot;help&quot; followed by command name for full documentation.</span><br><span class="line">Type &quot;apropos word&quot; to search for commands related to &quot;word&quot;.</span><br></pre></td></tr></table></figure></p><p>gdb的命令有很多，所以gdb命令有分类，help只是列出了命令的种类，查看类中的命令使用==help <class>== 命令，如：==help breakpoint==，查看设置断点的所有命令 </class></p><p>gdb中，可以不用大全命令，只用命令的前几个字符就可以了，当然也可以两次Tab将命令补全，如果有重复，就会列出了</p><ul><li><p>示例一：在进入函数func时，设置一个断点。可以敲入break func，或是直接就是b func</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(gdb) <span class="keyword">break</span> func</span><br><span class="line">Breakpoint <span class="number">1</span> at <span class="number">0x4004c8</span></span><br></pre></td></tr></table></figure></li><li><p>示例二：敲入b按两次TAB键，你会看到所有b打头的命令：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(gdb) b</span><br><span class="line">backtrace  bookmark   <span class="keyword">break</span>      bt</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;\assets\js\APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;GDB介绍&quot;&gt;&lt;a href=&quot;#GDB介绍&quot; class=&quot;headerlink&quot; title=&quot;GDB介绍&quot;&gt;&lt;/a&gt;GDB
      
    
    </summary>
    
      <category term="Linux" scheme="https://LiuZiQiao.github.io/categories/Linux/"/>
    
    
      <category term="Linux -gdb" scheme="https://LiuZiQiao.github.io/tags/Linux-gdb/"/>
    
  </entry>
  
  <entry>
    <title>ThreeSum</title>
    <link href="https://LiuZiQiao.github.io/2018/09/25/ThreeSum/"/>
    <id>https://LiuZiQiao.github.io/2018/09/25/ThreeSum/</id>
    <published>2018-09-25T15:41:36.000Z</published>
    <updated>2018-09-26T15:42:25.584Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><a id="more"></a><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>Given an array nums of n integers, are there elements a, b, c in nums such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.</p><p>Note:</p><p>The solution set must not contain duplicate triplets.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Example:</span><br><span class="line"></span><br><span class="line">例如, 给定数组 nums = [-1, 0, 1, 2, -1, -4]，</span><br><span class="line"></span><br><span class="line">满足要求的三元组集合为：</span><br><span class="line">[</span><br><span class="line">  [-1, 0, 1],</span><br><span class="line">  [-1, -1, 2]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; threeSum(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (nums != <span class="keyword">null</span> &amp;&amp;nums.length &gt;<span class="number">2</span>) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//首先对数组进行排序</span></span><br><span class="line">Arrays.sort(nums);</span><br><span class="line"><span class="comment">//我们假设取第 i 个数为结果</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i= <span class="number">0</span>;i&lt;nums.length-<span class="number">2</span>;)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//第二个数的可能起始位置</span></span><br><span class="line"><span class="keyword">int</span> j = i+<span class="number">1</span>;</span><br><span class="line"><span class="comment">//第三个数的可能起始位置</span></span><br><span class="line"><span class="keyword">int</span> k = nums.length - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (j &lt; k) &#123;</span><br><span class="line"><span class="keyword">if</span> (nums[j] + nums[k] == -nums[i]) &#123;</span><br><span class="line"><span class="comment">//当我们找到满足条件的解时，我们将结果添加到结果集里</span></span><br><span class="line">List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">list.add(nums[i]);</span><br><span class="line">list.add(nums[j]);</span><br><span class="line">list.add(nums[k]);</span><br><span class="line">result.add(list);</span><br><span class="line"><span class="comment">//移动位置寻找下一组解</span></span><br><span class="line">k--;</span><br><span class="line">j++;</span><br><span class="line"></span><br><span class="line"><span class="comment">//下面两个while是用来判断是否越界和判断移动后的数是否和之前的数相同，若相同则跳过该数</span></span><br><span class="line"><span class="keyword">while</span> (j&lt;k &amp;&amp; nums[j] == nums[j-<span class="number">1</span>]) &#123;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (j&lt;k&amp;&amp;nums[k] == nums[k+<span class="number">1</span>]) &#123;</span><br><span class="line">k--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//和大于 0，让k向前移动到小一点的数</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (nums[j]+nums[k]&gt;-nums[i]) &#123;</span><br><span class="line">k--;</span><br><span class="line"><span class="comment">//下面是用来判断是否越界和判断移动后的数是否和之前的数相同，若相同则跳过该数</span></span><br><span class="line"><span class="keyword">while</span> (j&lt;k&amp;&amp;nums[k] == nums[k+<span class="number">1</span>]) &#123;</span><br><span class="line">k--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//和小于 0，让j向后移动到大一点的数</span></span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">j++;</span><br><span class="line"><span class="comment">//下面是用来判断是否越界和判断移动后的数是否和之前的数相同，若相同则跳过该数</span></span><br><span class="line"><span class="keyword">while</span> (j&lt;k&amp;&amp;nums[j] == nums[j-<span class="number">1</span>]) &#123;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//指向下一个要处理的数</span></span><br><span class="line">i++;</span><br><span class="line"><span class="comment">//从左向右找第一个与之前处理的数的不同的数的下标</span></span><br><span class="line"><span class="keyword">while</span> (i&lt;nums.length-<span class="number">2</span>&amp;&amp;nums[i] == nums[i-<span class="number">1</span>]) &#123;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">        </span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;\assets\js\APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h3&gt;&lt;p&gt;Gi
      
    
    </summary>
    
      <category term="每日一题" scheme="https://LiuZiQiao.github.io/categories/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
    
      <category term="java" scheme="https://LiuZiQiao.github.io/tags/java/"/>
    
      <category term="List" scheme="https://LiuZiQiao.github.io/tags/List/"/>
    
  </entry>
  
  <entry>
    <title>Makefile工具使用</title>
    <link href="https://LiuZiQiao.github.io/2018/09/24/Makefile%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"/>
    <id>https://LiuZiQiao.github.io/2018/09/24/Makefile工具使用/</id>
    <published>2018-09-24T08:31:48.000Z</published>
    <updated>2018-10-05T06:08:30.862Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><a id="more"></a><p>Makefile是一个c语言的编译工具。如果学过Java，可能会认识Maven工具，makefile也是类似的工作。<br>Makefile能帮助c语言建立自动化的编译。一旦写好，执行一个make命令就可以编译整个工程。当然编写Makefile文件的时候有很多知识点在里面。这篇文章主要讲解如何编写基础性以及常用的Makefile文件。</p><h3 id="没有Makefile工具时如何进行编译"><a href="#没有Makefile工具时如何进行编译" class="headerlink" title="没有Makefile工具时如何进行编译"></a>没有Makefile工具时如何进行编译</h3><p>首先我们看一个例子：<br>当前我们有3个文件，分别是test.h test.c main.c<br>在main.c中,头文件定义如下<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">"test.h"</span></span></span><br></pre></td></tr></table></figure></p><p>在test.h中,头文件定义如下<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">"test.c"</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test_print</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure></p><p>在test.c中<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test_print</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"this is test.c \n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>当我们编译运行程序时，我们使用的命令是<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc test.h main.c -o main</span><br></pre></td></tr></table></figure></p><p>运行结果就是<br>    this is test.c   </p><p>对于小程序我们可以使用这样的命令，但是当我们这样运行一个大项目时，我们需要多少文件名来定义，此时Makefile就是一个很好的工具</p><h3 id="makefile简单示例"><a href="#makefile简单示例" class="headerlink" title="makefile简单示例"></a>makefile简单示例</h3><p>就如上面的三个文件<br>我们vim 一个名为Makefile的文件<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">main.o:test.o main.c</span><br><span class="line">    gcc test.o main.c</span><br><span class="line">test.o:test.c</span><br><span class="line">    gcc -c test.c</span><br></pre></td></tr></table></figure></p><p>编辑好Makefile文件后，我们返回，执行make后，将会输出<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gcc -c test.c   </span><br><span class="line">gcc test.o main.c</span><br></pre></td></tr></table></figure></p><p>这样是不是比原始的编译方便很多呢。其实也不是罪方便的，既然发明了make工具，那么肯定会让make工具更加方便开发人员使用的。</p><h3 id="Makefile具体使用"><a href="#Makefile具体使用" class="headerlink" title="Makefile具体使用"></a>Makefile具体使用</h3><h4 id="伪目标"><a href="#伪目标" class="headerlink" title="伪目标"></a>伪目标</h4><p>伪目标：不管是不是最新的，都需要重新生成；使用.PHONY来声明一个目标是伪目标；执行伪目标的效果等于执行了某一个动作，并不产生目标文件。例如添加一个伪目标：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">main.o:test.o main.c</span><br><span class="line">    gcc test.o main.c</span><br><span class="line">test.o:test.c</span><br><span class="line">    gcc -c test.c</span><br><span class="line">clean :                                        【这是一个伪目标】</span><br><span class="line">        rm -f $(OBJECTS) main</span><br></pre></td></tr></table></figure></p><p>使用make来执行伪目标<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ make clean</span><br><span class="line">rm -f test.o main.c main.o</span><br></pre></td></tr></table></figure></p><h4 id="Makefile自动变量"><a href="#Makefile自动变量" class="headerlink" title="Makefile自动变量"></a>Makefile自动变量</h4><table><thead><tr><th>选项名</th><th>作用</th></tr></thead><tbody><tr><td>$@</td><td>编写规则中啊哟生成的目标对象</td></tr><tr><td>$^</td><td>编写规则中所有依赖文件列表</td></tr><tr><td>$&lt;</td><td>编写规定中第一个依赖对象</td></tr></tbody></table><p>因此，上面的Makefile文件我们可以改下如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">main.o:test.o main.c</span><br><span class="line">    gcc -g $^ -o $@</span><br><span class="line">test.o:test.c</span><br><span class="line">    gcc -g -c  $&lt; -o $@</span><br></pre></td></tr></table></figure></p><p>执行make，可以看到效果还是一样的：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gcc -c test.c   </span><br><span class="line">gcc test.o main.c</span><br></pre></td></tr></table></figure></p><h4 id="编译生成多个可执行文件"><a href="#编译生成多个可执行文件" class="headerlink" title="编译生成多个可执行文件"></a>编译生成多个可执行文件</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">bin=main main2   <span class="comment">//自定义变量bin</span></span><br><span class="line">src=main.o test.o</span><br><span class="line">all:$(bin)    <span class="comment">//重点</span></span><br><span class="line">main: $(src)</span><br><span class="line">    gcc -g $^ -o $@</span><br><span class="line">main2:$(bin)</span><br><span class="line">    gcc -g $&lt; -o $@</span><br><span class="line">main.o :main.c</span><br><span class="line">    gcc -g -c $&lt; -o $@</span><br><span class="line">main2.o :main2.c</span><br><span class="line">    gcc -g -c $&lt; -o $@</span><br><span class="line">clean :</span><br><span class="line">    rm -f $(src) $(bin)</span><br></pre></td></tr></table></figure><p>为了生成目标文件all，需要生成bin，也就是main main2.这样就生成了两个可执行文件，利用自定义变量可以简化这段Makefile，但是这样写看起来内容其实还是很多的，因此下面我将介绍make的内嵌函数</p><h4 id="make常用内嵌函数"><a href="#make常用内嵌函数" class="headerlink" title="make常用内嵌函数"></a>make常用内嵌函数</h4><p>首先看到make中函数的调用形式<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(function arguments)   <span class="comment">//functions是函数名称，arguments是参数，使用$来调用</span></span><br></pre></td></tr></table></figure></p><p><strong><em>函数名与参数之间是空格</em></strong><br>以下三个重要的内嵌函数</p><ul><li><p>$(wildcard path)<br>  当前目录下匹配模式的文件</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">src=$(wildcard *.c)  <span class="comment">// 在当前目录下搜索所以.c文件，文件名称保存到src中</span></span><br></pre></td></tr></table></figure></li><li><p>$(patsubst pattern,replacement,text)模式替换函数，就是把text中文件列表从模式pattern替换为replacement模式</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$(patsubst %.c,%.o,$src)  <span class="comment">// 把src中的.c文件列表中的文件从.c替换为.o</span></span><br><span class="line">等价于：$(src:.c=.o)  <span class="comment">//这种方式更为常用</span></span><br></pre></td></tr></table></figure></li><li><p>shell函数<br>shell函数可以执行shell下的命令，同样是使用$来引用的，例如</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(shell ls -d */)  <span class="comment">//将当前目录下的所有文件列出来</span></span><br></pre></td></tr></table></figure></li></ul><p>下面我们通过一个例子来使用上面三个函数。假设当前目录下有main.c文件，同时还有若干个目录，每个目录中都有各自的.c文件，利用所有的.c文件编译生成最后的main文件：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">CC      = gcc</span><br><span class="line">CFLAGS  = -g</span><br><span class="line">BIN     = main</span><br><span class="line">SUBDIR  = $(shell ls -d */)     <span class="comment">// SUBDIR变量保存了子目录的列表</span></span><br><span class="line">ROOTSRC = $(wildcard *.c)       <span class="comment">//ROOTSRC保存了当前目录下的.c文件列表</span></span><br><span class="line">ROOTOBJ = $(ROOTSRC:%.c = %.o)  <span class="comment">//ROOTBOJ 保存了当前目录下.c文件同名的.o列表</span></span><br><span class="line">SUBSRC  = $(shell find $(SUBDIR) -name '*.c')       //SUBSRC 保存了所有子目录下的的.c文件</span><br><span class="line">SUBOBJ  = $(SUBSRC:%.c = %.o)       <span class="comment">//SUBOBJ保存了所有子目录下的.c文件同名的.o文件列表</span></span><br><span class="line">$(BIN):$(ROOTOBJ) $(SUBOBJ)         <span class="comment">//main的生成依赖与当前目录及所有子目录下的.o文件</span></span><br><span class="line">    $(CC) $(CFLAGS) -o $(BIN) $(ROOTOBJ) $(SUBOBJ)</span><br><span class="line">.o .c:</span><br><span class="line">    $(CC) $(CFLAGS) -c %&lt; -o $@</span><br><span class="line">clean:</span><br><span class="line">    rm -f $(BIN) $(ROOTOBJ) $(SUBOBJ)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;\assets\js\APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;Makefile是一个c语言的编译工具。如果学过Java，可能会认识Maven工具，makefile也是类似的工作。&lt;br&gt;Makefil
      
    
    </summary>
    
      <category term="Linux" scheme="https://LiuZiQiao.github.io/categories/Linux/"/>
    
    
      <category term="vim" scheme="https://LiuZiQiao.github.io/tags/vim/"/>
    
  </entry>
  
  <entry>
    <title>vim使用命令大全</title>
    <link href="https://LiuZiQiao.github.io/2018/09/23/vim%E4%BD%BF%E7%94%A8%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8/"/>
    <id>https://LiuZiQiao.github.io/2018/09/23/vim使用命令大全/</id>
    <published>2018-09-23T14:51:17.000Z</published>
    <updated>2018-10-01T06:59:12.414Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><a id="more"></a><p>不知不觉，vim已经使用快一年了，虽然不是经常使用，这就导致每次使用时一些命令还是模糊，需要查查文档才能正确使用，因此就这篇博客分享给学习Linux的小伙伴们。</p><h3 id="vim介绍"><a href="#vim介绍" class="headerlink" title="vim介绍"></a>vim介绍</h3><p>vim是程序员最喜欢的编辑器，也是Linux下第二强大的编辑器，虽然emacs是公认的世界第一，但我认为emacs并没有vim用起来高效。</p><h4 id="vim的几种模式"><a href="#vim的几种模式" class="headerlink" title="vim的几种模式"></a>vim的几种模式</h4><ul><li>正常模式：可以使用快捷键命令，或按输入命令</li><li>插入模式：可以输入文本，在正常模式下，按i，a，o等都可以进入插入模式</li><li>可视模式：正常模式下按v可进入可视模式，在可视模式下，移动光标可以选择文本，按v进入可视模式后，总是整行整行的选中。Ctrl+v进入可视块模式。</li></ul><h3 id="vim的安装"><a href="#vim的安装" class="headerlink" title="vim的安装"></a>vim的安装</h3><ol><li><p>在线安装<br>直接shell中输入如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install vim (ubuntu)</span><br><span class="line">yum install vim (redHat/Fedora/CentOS)</span><br></pre></td></tr></table></figure></li><li><p>手动下载编译安装<br>截止当前最新版本是7.4(vim-7.4.tar.bz2)，可在windows环境下载好，拷贝至linux环境安装，或直接linux命令行下载。这里给出 linux直接下载并编译安装（以下均为shell命令）：   </p></li></ol><ul><li>wget下载</li></ul><p>wget ftp://ftp.vim.org/ftp/pub/vim/unix/vim-7.4.tar.bz2<br>(或用ftp命令登陆ftp://ftp.vim.org，get命令获取)</p><ul><li><p>解压</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bunzip2 vim-7.4.tar.bz2</span><br></pre></td></tr></table></figure></li><li><p>解压</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar xvf vim-7.4.tar</span><br></pre></td></tr></table></figure></li><li><p>进入vim74（解压后的）目录，执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./configure --disable-selinux --enable-cscope</span><br><span class="line">(./configure -help 查看后面参数选项的含义)</span><br></pre></td></tr></table></figure></li><li><p>编译</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure></li><li><p>安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make install</span><br></pre></td></tr></table></figure></li></ul><p>只要不出现error即代表成功安装，也可直接用vim命令来检测，或whatis vim(whereis vim)查看。通常情况下，许多发行版会默认安装vim，则可省略上述步骤。</p><h3 id="vim的初始化配置-vimrc"><a href="#vim的初始化配置-vimrc" class="headerlink" title="vim的初始化配置.vimrc"></a>vim的初始化配置.vimrc</h3><ol><li>存放位置<br>linux环境下vim的初始化配置文件为.vimrc, 通常有两个:系统版本和用户版本，前者不同发行版linux会有不同，一般位于/etc/vimrc，是整个系统vim的默认配置；后者位于~/.vimrc，是当前用户的vim配置，会覆盖系统配置。<br>关于vim的其他配置参数文件位于/usr/local/share/vim/下，可进入vim，在命令模式下键入<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">:version （查看基本配置路径）</span><br><span class="line">:echo $VIM ( WINDOW用户在次目录下编辑文件_vimrc完成下面配置 )</span><br><span class="line">:echo $HOME（查看具体路径值）</span><br><span class="line"> ~/.vimrc有时并不存在，此时用户可以建立一个.vimrc，放入主目录以实现自己的vim配置。</span><br></pre></td></tr></table></figure></li></ol><h3 id="启动vim"><a href="#启动vim" class="headerlink" title="启动vim"></a>启动vim</h3><ul><li>vim -c cmd file：在打开文件前，先执行指定的命令</li><li>vim -r file：恢复上次异常退出的文件</li><li>vim -R file：以只读的方式打开文件，但可以强制保存</li><li>vim -M file：以只读方式打开文件，不可以强制保存</li><li>vim -y num file：将编辑窗口的大小设为num行</li><li>vim+file：从文件的末尾开始</li><li>vim+num file：从第num行开始</li><li>vim+/string file：打开file，并将光标停留在第一个找到的string上</li><li>vim -remote file：用已有的vim进程打开指定的文件。如果你不想启用多个vim会话，这个很有用。但要注意， 如果你用vim，会寻找名叫VIM的服务器；如果你已经有一个gvim在运行了， 你可以用gvim –remote file在已有的gvim中打开文件。</li></ul><h3 id="文档操作"><a href="#文档操作" class="headerlink" title="文档操作"></a>文档操作</h3><ul><li>e file -关闭当前编辑的文件，并开启新的文件。如果当前文件的修改未保存，vi会警告</li><li>e! file -放弃当前文件的修改，编辑新的文件</li><li>e+n file -开始新的文件，并从第n行开始编辑</li><li>enew -编译一个未命名的新文档（Ctrl-W n）</li><li>e – 重新加载当前文档。</li><li>e! – 重新加载当前文档，并丢弃已做的改动。</li><li>e#或ctrl+^ – 回到刚才编辑的文件，很实用。</li><li>f或ctrl+g –显示文档名，是否修改，和光标位置。</li><li>f filename – 改变编辑的文件名，这时再保存相当于另存为。</li><li>gf – 打开以光标所在字符串为文件名的文件。</li><li>w – 保存修改。</li><li>n1,n2w filename – 选择性保存从某n1行到另n2行的内容。</li><li>wq – 保存并退出。</li><li>ZZ – 保存并退出。</li><li>x – 保存并退出。</li><li>q[uit] ——退出当前窗口。(CTRL-W q或CTRL-W CTRL-Q)</li><li>saveas newfilename – 另存为</li><li>browse e – 会打开一个文件浏览器让你选择要编辑的文件。 如果是终端中，则会打开netrw的文件浏览窗口； 如果是gvim，则会打开一个图形界面的浏览窗口。 实际上</li><li>browse后可以跟任何编辑文档的命令，如sp等。 用browse打开的起始目录可以由browsedir来设置：</li><li>set browsedir=last – 用上次访问过的目录（默认）；</li><li>set browsedir=buffer – 用当前文件所在目录；</li><li>set browsedir=current – 用当前工作目录；</li><li>Sex – 水平分割一个窗口，浏览文件系统；</li><li>Vex – 垂直分割一个窗口，浏览文件系统；</li></ul><h3 id="光标移动"><a href="#光标移动" class="headerlink" title="光标移动"></a>光标移动</h3><h4 id="基本移动"><a href="#基本移动" class="headerlink" title="基本移动"></a>基本移动</h4><p><strong>在正常模式下</strong></p><ul><li>h或退格：左移一个字符</li><li>I或空格：右移一个字符</li><li>j：下移一行</li><li>k：上移一行</li><li>gj：移动到一段内的下一行</li><li>gk：移动到一段内的上一行</li><li>+或者enter：把光标移至下一行第一个非空白字符</li><li>-：把光标移至上一行第一个非空白字符</li><li>w：移动一个单词，可忽略一些标点</li><li>e：前移一个单词，光标停在下一个单词末尾</li><li>E：移动到下一个单词末尾，如果词末尾有标点，则移动到标点</li><li>b：后移一个单词，光标停在上一个单词开头</li><li>B：移动到上一个单词开头，忽略一些标点</li><li>ge：后移一个单词，光标停在上一个单词末尾</li><li>gE：同ge，不过单词包含单词相邻的标点</li><li>(: 前移1句。</li><li>): 后移1句。</li><li>{: 前移1段。</li><li>}: 后移1段。</li><li>fc: 把光标移到同一行的下一个c字符处</li><li>Fc: 把光标移到同一行的上一个c字符处</li><li>tc: 把光标移到同一行的下一个c字符前</li><li>Tc: 把光标移到同一行的上一个c字符后</li><li>;: 配合f &amp; t使用，重复一次</li><li>,: 配合f &amp; t使用，反向重复一次</li><li>0：移到首行</li><li>g0：移到光标所在行行首</li><li>^：移到本行第一个非空白字符</li><li>g^：同^，但是移到到当前第一个非空字符处</li><li>n|：光标移动到第n行</li><li>:n<cr> :移动到第n行</cr></li><li>:$<cr> :移动到最后一行</cr></li><li>H：把光标移动到最顶端一行</li><li>M：把光标移动到最中间一行</li><li>L：把光标移动到最底端一行</li><li>gg：到文件头部</li><li>G：到文件尾部</li></ul><h4 id="翻屏"><a href="#翻屏" class="headerlink" title="翻屏"></a>翻屏</h4><ul><li>Ctrl+f： 下翻一屏。</li><li>Ctrl+b: 上翻一屏。</li><li>Ctrl+d: 下翻半屏。</li><li>Ctrl+u: 上翻半屏。</li><li>Ctrl+e: 向下滚动一行。</li><li>Ctrl+y: 向上滚动一行。</li><li>n%: 到文件n%的位置。</li><li>zz: 将当前行移动到屏幕中央。</li><li>zt: 将当前行移动到屏幕顶端。</li><li>zb: 将当前行移动到屏幕底端。</li></ul><h4 id="标记"><a href="#标记" class="headerlink" title="标记"></a>标记</h4><p>使用标记可以快速移动。到达标记后，可以用Ctrl+o返回原来的位置Ctrl+o和Ctrl+i很像浏览器上的 后退 和 前进 。</p><ul><li>m{a-z}: 标记光标所在位置，局部标记，只用于当前文件。</li><li>m{A-Z}: 标记光标所在位置，全局标记。标记之后，退出Vim， 重新启动，标记仍然有效。</li><li>`{a-z}: 移动到标记位置。</li><li>‘{a-z}: 移动到标记行的行首。</li><li>`{0-9}：回到上[2-10]次关闭vim时最后离开的位置。</li><li>“: 移动到上次编辑的位置。”也可以，不过“精确到列，而”精确到行 。如果想跳转到更老的位置，可以按C-o，跳转到更新的位置用C-i。</li><li>`”: 移动到上次离开的地方。</li><li>`.: 移动到最后改动的地方。</li><li>:marks 显示所有标记。</li><li>:delmarks a b – 删除标记a和b。</li><li>:delmarks a-c – 删除标记a、b和c。</li><li>:delmarks a c-f – 删除标记a、c、d、e、f。</li><li>:delmarks! – 删除当前缓冲区的所有标记。</li><li>:help mark-motions 查看更多关于mark的知识。</li></ul><h3 id="插入文本"><a href="#插入文本" class="headerlink" title="插入文本"></a>插入文本</h3><h4 id="基本插入"><a href="#基本插入" class="headerlink" title="基本插入"></a>基本插入</h4><ul><li>i: 在光标前插入；一个小技巧：按8，再按i，进入插入模式，输入=， 按esc进入命令模式，就会出现8个=。 这在插入分割线时非常有用，如30i+<esc>就插入了36个+组成的分割线。</esc></li><li>I: 在当前行第一个非空字符前插入；</li><li>gI: 在当前行第一列插入；</li><li>a: 在光标后插入；</li><li>A: 在当前行最后插入；</li><li>o: 在下面新建一行插入；</li><li>O: 在上面新建一行插入；</li><li>:r filename在当前位置插入另一个文件的内容。</li><li>:[n]r filename在第n行插入另一个文件的内容。</li><li>:r !date 在光标处插入当前日期与时间。同理，:r !command可以将其它shell命令的输出插入当前文档。</li></ul><h4 id="改写插入"><a href="#改写插入" class="headerlink" title="改写插入"></a>改写插入</h4><ul><li>c[n]w：改写光标后第n个次</li><li>c[n]I：改写光标后的n个字母</li><li>c[n]h：改写光标前的n个字母</li><li>[n]cc：修改当前[n]行</li><li>[n]s：以输入的文本替代光标之后1(n)个字符</li><li>[n]S：删除指定数目的行，并以所输入文本代替</li></ul><h3 id="剪切复制和寄存器"><a href="#剪切复制和寄存器" class="headerlink" title="剪切复制和寄存器"></a>剪切复制和寄存器</h3><h4 id="剪切和复制、粘贴"><a href="#剪切和复制、粘贴" class="headerlink" title="剪切和复制、粘贴"></a>剪切和复制、粘贴</h4><ul><li>[n]x: 剪切光标右边n个字符，相当于d[n]l。</li><li>[n]X: 剪切光标左边n个字符，相当于d[n]h。</li><li>y: 复制在可视模式下选中的文本。</li><li>yy or Y: 复制整行文本。</li><li>y[n]w: 复制一(n)个词。</li><li>y[n]l: 复制光标右边1(n)个字符。</li><li>y[n]h: 复制光标左边1(n)个字符。</li><li>yor D: 删除（剪切）当前位置到行尾的内容。</li><li>d[n]w: 删除（剪切）1(n)个单词</li><li>d[n]l: 删除（剪切）光标右边1(n)个字符。</li><li>d[n]h: 删除（剪切）光标左边1(n)个字符。</li><li>d0: 删除（剪切）当前位置到行首的内容</li><li>[n] dd: 删除（剪切）1(n)行。</li><li>:m,nd<cr> 剪切m行到n行的内容。</cr></li><li>d1G或dgg: 剪切光标以上的所有行。</li><li>dG: 剪切光标以下的所有行。</li><li>daw和das：剪切一个词和剪切一个句子，即使光标不在词首和句首也没关系。</li><li>d/f<cr>：这是一个比较高级的组合命令，它将删除当前位置 到下一个f之间的内容。</cr></li><li>p: 在光标之后粘贴。</li><li>P: 在光标之前粘贴。</li></ul><p><strong><em>当然，我们也可以在视图模式下进行选择，然后进行复制剪切粘贴操作</em></strong></p><h4 id="文本对象"><a href="#文本对象" class="headerlink" title="文本对象"></a>文本对象</h4><ul><li>aw：一个词</li><li>as：一句</li><li>ap：一段</li><li>ab：一块<h4 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h4></li><li>a-z：都可以用作寄存器的名。“ayy把当前行的内容放入a寄存器。</li><li>A-Z：用大写字母索引寄存器，可以在寄存器中追加内容。</li><li>:reg：显示所有寄存器的内容</li><li>“”：不加寄存器索引时，默认使用的寄存器</li><li>“<em>：当前选择缓冲区，”</em>yy吧当前行的内容放入当前缓冲区。</li><li>“+：系统剪贴板。”+yy把当前行的内容放入系统剪贴板。</li></ul><h3 id="编辑多个文件"><a href="#编辑多个文件" class="headerlink" title="编辑多个文件"></a>编辑多个文件</h3><h4 id="一次编辑多个文件"><a href="#一次编辑多个文件" class="headerlink" title="一次编辑多个文件"></a>一次编辑多个文件</h4><pre><code>打开文件时：vi a.txt b.txt c.txt</code></pre><ul><li>使用：next(:n)编辑下一个文件</li><li>:2n编辑下2个文件</li><li>使用:previous或:N编辑上一个文件</li><li>使用:wnext，保存当前文件，并编辑下一个文件</li><li>使用:wprevious，保存当前文件，并编辑上一个文件</li><li>使用:args显示文件列表</li><li>:n filename或:args filename 指定新的文件列表</li><li>vi -o filename 在水平分割线的多个窗口编辑多个文件</li><li>vi -o filename 在垂直分割的多个窗口中编辑多个文件</li><li>vnew 在当前编辑文件时新增加一个编辑文件，:w filename 保存为filename的文件<h3 id="分屏编辑"><a href="#分屏编辑" class="headerlink" title="分屏编辑"></a>分屏编辑</h3></li><li>vim -o file1 file2 ：水平分割窗口，同时打开file1和file2</li><li>vim -O file1 file2 ：垂直分割窗口，同时打开file1和file2<h4 id="水平分割"><a href="#水平分割" class="headerlink" title="水平分割"></a>水平分割</h4></li><li>split(:sp) 把当前窗水平分割成两个窗口。(Ctrl-W s 或Ctrl-W ctrl-S)如果是在终端下，Ctrl-S可能会冻结终端，Ctrl-Q继续</li><li>split filename  水平分割窗口，并在新窗口中显示另外一个文件</li><li>nsplit(:nsp) 水平分割出一个n行高的窗口</li><li>C-W C-^ 水平分割一个窗口，打开刚才编辑的文件<h4 id="垂直分割"><a href="#垂直分割" class="headerlink" title="垂直分割"></a>垂直分割</h4></li><li>:vsplit(:vsp) 把当前窗口分割成水平分布的两个窗口</li><li>:[N]vne[W] 垂直分割出一各新窗口</li><li>:vertical 水平分割的命令，相应的垂直分割<h4 id="关闭子窗口"><a href="#关闭子窗口" class="headerlink" title="关闭子窗口"></a>关闭子窗口</h4></li><li>:qall  关闭所有窗口，退出vim</li><li>:wall 保存所有修改过的窗口</li><li>:only 只保留当前窗口，关闭其它窗口</li><li>:close 关闭当前窗口，Ctrl-W c能实现同样的功能<h4 id="调整窗口大小"><a href="#调整窗口大小" class="headerlink" title="调整窗口大小"></a>调整窗口大小</h4></li><li>Ctrl+w+  当前窗口增高一行。也可用n增高n行</li><li>Ctrl+w-  当前窗口减少一行。也可用n减少n行</li><li>Ctrl+w_  当前窗口扩展到尽可能的大。也可用n设定行数</li><li>resize n 当前窗口n行高</li><li>Ctrl+w&lt; 当前窗口减少一列。也可用n减少n列</li><li>Ctrl+w&gt; 当前窗口增加一列。也可用n增加n列<h4 id="切换和移动窗口"><a href="#切换和移动窗口" class="headerlink" title="切换和移动窗口"></a>切换和移动窗口</h4></li><li>Ctrl+w Ctrl+w 切换到下一个窗口(Ctrl+w w)</li><li>Ctrl+w p 切换到前一个窗口</li><li>Ctrl+w h(l,j,k) 切换到左（右，下，上）面</li><li>Ctrl+w r 旋转窗口位置</li><li>Ctrl+w T 将当前的窗口移动到新的标签页上</li></ul><h3 id="快速编辑"><a href="#快速编辑" class="headerlink" title="快速编辑"></a>快速编辑</h3><h4 id="改变大小写"><a href="#改变大小写" class="headerlink" title="改变大小写"></a>改变大小写</h4><ul><li>~: 反转光标所在字符的大小写</li><li>可视模式下的U或u：把选中的文本变为大写或小写</li><li>gu(U)接范围（如$，或G），可以把从光标当前位置到指定位置之间字母全部 转换成小写或大写。如ggguG，就是把开头到最后一行之间的字母全部变为小 写。再如gu5j，把当前行和下面四行全部变成小写。<h4 id="替换（正常模式）"><a href="#替换（正常模式）" class="headerlink" title="替换（正常模式）"></a>替换（正常模式）</h4></li><li>r: 替换光标处的字符，同样支持汉字。</li><li>R: 进入替换模式，按esc回到正常模式。</li></ul><h4 id="撤销与重做（正常模式）"><a href="#撤销与重做（正常模式）" class="headerlink" title="撤销与重做（正常模式）"></a>撤销与重做（正常模式）</h4><ul><li>[n] u: 取消一(n)个改动。</li><li>:undo 5 – 撤销5个改变。</li><li>:undolist – 你的撤销历史。</li><li>ctrl + r: 重做最后的改动。</li><li>U: 取消当前行中所有的改动。</li><li>:earlier 4m – 回到4分钟前</li><li>:later 55s – 前进55秒<h4 id="宏"><a href="#宏" class="headerlink" title="宏"></a>宏</h4></li><li>–重复上一个编辑动作</li><li>qa：开始录制宏a（键盘操作记录）</li><li>q：停止录制</li><li>@a：播放宏a</li></ul><h3 id="编辑特殊文件"><a href="#编辑特殊文件" class="headerlink" title="编辑特殊文件"></a>编辑特殊文件</h3><h4 id="文件加解密"><a href="#文件加解密" class="headerlink" title="文件加解密"></a>文件加解密</h4><ul><li>vim -x file 开始编辑一个加密文件</li><li>:X 为当前文件设置加密</li><li>:set key= 去除文件的密码<h4 id="文件的编码"><a href="#文件的编码" class="headerlink" title="文件的编码"></a>文件的编码</h4></li><li>:e ++enc=utf8 filename, 让vim用utf-8的编码打开这个文件。</li><li>:w ++enc=gbk，不管当前文件什么编码，把它转存成gbk编码。</li><li>:set fenc或:setfileencoding，查看当前文件的编码。</li><li>在vimrc中添加set fileencoding=ucs-bom,utf-8,cp936，vim会根据要打开的文件选择合适的编码。 注意：编码之间不要留空格。 cp936对应于gbk编码。 ucs-bom对应于windows下的文件格式。</li></ul><h3 id="编程辅助"><a href="#编程辅助" class="headerlink" title="编程辅助"></a>编程辅助</h3><ul><li>gd: 跳转到局部变量的定义处；</li><li>gD: 跳转到全局变量的定义处，从当前文件开头开始搜索；</li><li>g;: 上一个修改过的地方；</li><li>g,: 下一个修改过的地方；</li><li>[[: 跳转到上一个函数块开始，需要有单独一行的{。</li><li>]]: 跳转到下一个函数块开始，需要有单独一行的{。</li><li>[]: 跳转到上一个函数块结束，需要有单独一行的}。</li><li>][: 跳转到下一个函数块结束，需要有单独一行的}。</li><li>[{: 跳转到当前块开始处；</li><li>]}: 跳转到当前块结束处；</li><li>[/: 跳转到当前注释块开始处；</li><li>]/: 跳转到当前注释块结束处；</li><li>%: 不仅能移动到匹配的(),{}或[]上，而且能在#if，#else， #endif之间跳跃。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;\assets\js\APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;不知不觉，vim已经使用快一年了，虽然不是经常使用，这就导致每次使用时一些命令还是模糊，需要查查文档才能正确使用，因此就这篇博客分享给学习
      
    
    </summary>
    
      <category term="Linux" scheme="https://LiuZiQiao.github.io/categories/Linux/"/>
    
    
      <category term="vim" scheme="https://LiuZiQiao.github.io/tags/vim/"/>
    
  </entry>
  
  <entry>
    <title>MergeTwoSortedArray</title>
    <link href="https://LiuZiQiao.github.io/2018/09/20/MergeTwoSortedArray/"/>
    <id>https://LiuZiQiao.github.io/2018/09/20/MergeTwoSortedArray/</id>
    <published>2018-09-19T22:59:05.000Z</published>
    <updated>2018-09-21T13:06:20.277Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><a id="more"></a><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>给定两个有序整数数组 nums1 和 nums2，将 nums2 合并到 nums1 中，使得 num1 成为一个有序数组。</p><p>说明:</p><p>初始化 nums1 和 nums2 的元素数量分别为 m 和 n。<br>你可以假设 nums1 有足够的空间（空间大小大于或等于 m + n）来保存 nums2 中的元素。<br>示例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入:</span><br><span class="line">nums1 = [1,2,3,0,0,0], m = 3</span><br><span class="line">nums2 = [2,5,6],       n = 3</span><br><span class="line"></span><br><span class="line">输出: [1,2,2,3,5,6]</span><br></pre></td></tr></table></figure></p><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p>思路：申请一个大小是两个数组的临时空间用了存放排序后的元素，先对两个数组中的元素进行判断，小的放进临时数组中，直到一个数组放完后，把另外一个数组中的元素全部拷贝进去，最后将临时数组中的元素拷贝到原数组中。<br>以下是代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>* nums1, <span class="keyword">int</span> m, <span class="keyword">int</span>* nums2, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> cur1 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> cur2 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> *tmp = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>)*(m+n));</span><br><span class="line">assert(tmp);</span><br><span class="line"><span class="built_in">memset</span>(tmp,<span class="number">0</span>, m + n);</span><br><span class="line"><span class="keyword">while</span> (cur1 &lt; m &amp;&amp; cur2 &lt; n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (nums1[cur1] &lt; nums2[cur2])</span><br><span class="line">&#123;</span><br><span class="line">tmp[index] = nums1[cur1];</span><br><span class="line">index++;</span><br><span class="line">cur1++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(nums1[cur1] &gt; nums2[cur2])</span><br><span class="line">&#123;</span><br><span class="line">tmp[index] = nums2[cur2];</span><br><span class="line">index++;</span><br><span class="line">cur2++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (nums1[cur1] == nums2[cur2])</span><br><span class="line">&#123;</span><br><span class="line">tmp[index] = nums1[cur1];</span><br><span class="line">index++;</span><br><span class="line">tmp[index] = nums2[cur2];</span><br><span class="line">index++;</span><br><span class="line">cur1++;</span><br><span class="line">cur2++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//nums2没有元素，但nums1还有元素时，拷贝到tmp中</span></span><br><span class="line"><span class="keyword">while</span> (cur1 &lt; m)</span><br><span class="line">&#123;</span><br><span class="line">tmp[index++] = nums1[cur1++];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//nums1没有元素，但nums2还有元素时，拷贝到tmp中</span></span><br><span class="line"><span class="keyword">while</span> (cur2 &lt; n)</span><br><span class="line">&#123;</span><br><span class="line">tmp[index++] = nums2[cur2++];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将tmp中的元素放回nums1中</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m+n; i++)</span><br><span class="line">&#123;</span><br><span class="line">nums1[i] = tmp[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//释放掉申请的空间</span></span><br><span class="line"><span class="built_in">free</span>(tmp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>看了上面的代码，发现又长又繁琐，我们对其简化后的代码如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Merge</span><span class="params">(<span class="keyword">int</span> *nums1,<span class="keyword">int</span> m,<span class="keyword">int</span> *nums2,<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> count = m + n - <span class="number">1</span>;</span><br><span class="line">--m, --n;</span><br><span class="line"><span class="keyword">while</span> (n&gt;=<span class="number">0</span> &amp;&amp; m&gt;=<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">nums1[count--] = nums1[m] &gt; nums2[n] ? nums1[m--] : nums2[n--];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (m &gt;= <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">nums1[count--] = nums1[m--];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;\assets\js\APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h4 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h4&gt;&lt;p&gt;给定
      
    
    </summary>
    
      <category term="每日一题" scheme="https://LiuZiQiao.github.io/categories/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
    
      <category term="Array" scheme="https://LiuZiQiao.github.io/tags/Array/"/>
    
  </entry>
  
  <entry>
    <title>RemoveDuplicates2</title>
    <link href="https://LiuZiQiao.github.io/2018/09/18/RemoveDuplicates2/"/>
    <id>https://LiuZiQiao.github.io/2018/09/18/RemoveDuplicates2/</id>
    <published>2018-09-18T08:46:12.000Z</published>
    <updated>2018-09-19T00:57:13.015Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><a id="more"></a><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><blockquote><p>Follow up for “Remove Duplicates”:<br>What if duplicates are allowed at most twice?</p><p>For example,<br>Given sorted array nums = [1,1,1,2,2,3],</p><p>Your function should return length = 5, with the first five elements of nums being 1, 1, 2, 2 and 3. It doesn\’t matter what you leave beyond the new length.   </p></blockquote><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p><strong>思路</strong>：这道题是继Remove Duplicates from Sorted Array有序数组中出去重复项，这里运行最多重复次数是二次，因此我们需要定义一个count来记录重复次数，count初始化为1，当出现一次时count减1，下次再重复出现时，快指针直接前进一步，如果这时不是重复的则count恢复为1，该数组是有序的，所以一旦不出现重复的数，后面的数一定比这个数大。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">removeDuplicates</span><span class="params">(<span class="keyword">int</span>* nums, <span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (size &lt;= <span class="number">2</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (j&lt;size)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//当nums[i]== nums[j]，count == 0时，此时这个数是第一次和后面的一个数相等</span></span><br><span class="line"><span class="keyword">if</span> (nums[i] == nums[j] &amp;&amp; count == <span class="number">0</span>) &#123;</span><br><span class="line">++j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;<span class="comment">//此时判断是否与后面的数还能相等，相等时就 --count，</span></span><br><span class="line"><span class="comment">//否则不相等count还是1，说明这个数只出现两次</span></span><br><span class="line"><span class="keyword">if</span> (nums[i] == nums[j]) &#123;</span><br><span class="line">--count;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">count = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//此时我们让第二次出现的这个数后移动一位，并放在这个数后面</span></span><br><span class="line">nums[++i] = nums[j++];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> i+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;\assets\js\APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h3&gt;&lt;bloc
      
    
    </summary>
    
      <category term="每日一题" scheme="https://LiuZiQiao.github.io/categories/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
    
      <category term="Array" scheme="https://LiuZiQiao.github.io/tags/Array/"/>
    
  </entry>
  
  <entry>
    <title>RemoveDuplicates|</title>
    <link href="https://LiuZiQiao.github.io/2018/09/18/RemoveDuplicates1/"/>
    <id>https://LiuZiQiao.github.io/2018/09/18/RemoveDuplicates1/</id>
    <published>2018-09-18T08:23:27.000Z</published>
    <updated>2018-09-19T00:57:04.954Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><a id="more"></a><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><blockquote><p>Given a sorted array, remove the duplicates in place such that each element appear only once and return the new length.</p><p>Do not allocate extra space for another array, you must do this in place with constant memory.</p><p>For example,<br>Given input array nums = [1,1,2],</p><p>Your function should return length = 2, with the first two elements of nums being 1 and 2 respectively. It doesn\’t matter what you leave beyond the new length.</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p><strong>思路</strong>：这道题是让我们去掉数组里重复项，我们使用快慢指针来记录遍历的坐标，最开始两个指针指向第一个数，如果相同，快指针走一步，如果不同，都走一步，当快指针走完整个数组时，慢指针当前的坐标加1就是数组中不同数字的个数。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">removeDuplicates</span><span class="params">(<span class="keyword">int</span>* nums, <span class="keyword">int</span> numsSize)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (numsSize &lt;= <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; numsSize; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (nums[i] != nums[j])</span><br><span class="line">&#123;</span><br><span class="line">i++;</span><br><span class="line">nums[i] = nums[j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> i + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;\assets\js\APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h3&gt;&lt;bloc
      
    
    </summary>
    
      <category term="每日一题" scheme="https://LiuZiQiao.github.io/categories/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
    
      <category term="Array" scheme="https://LiuZiQiao.github.io/tags/Array/"/>
    
  </entry>
  
  <entry>
    <title>mySqrt</title>
    <link href="https://LiuZiQiao.github.io/2018/09/16/mySqrt/"/>
    <id>https://LiuZiQiao.github.io/2018/09/16/mySqrt/</id>
    <published>2018-09-16T01:33:22.000Z</published>
    <updated>2018-09-19T00:56:55.860Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><a id="more"></a><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>实现 int sqrt(int x) 函数。</p><p>计算并返回 x 的平方根，其中 x 是非负整数。</p><p>由于返回类型是整数，结果只保留整数的部分，小数部分将被舍去。</p><p>示例 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入: 4</span><br><span class="line">输出: 2</span><br><span class="line"></span><br><span class="line">输入: 8</span><br><span class="line">输出: 2</span><br><span class="line">说明: 8 的平方根是 2.82842..., </span><br><span class="line">     由于返回类型是整数，小数部分将被舍去。</span><br></pre></td></tr></table></figure></p><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p>通过二分法来确定取值区间<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mySqrt</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x &lt;= <span class="number">0</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> res = x;</span><br><span class="line"><span class="keyword">while</span> (res*res &gt; x)</span><br><span class="line">&#123;</span><br><span class="line">res = (res + x / res) / <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;\assets\js\APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h4 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h4&gt;&lt;p&gt;实现
      
    
    </summary>
    
    
      <category term="二分法" scheme="https://LiuZiQiao.github.io/tags/%E4%BA%8C%E5%88%86%E6%B3%95/"/>
    
  </entry>
  
</feed>
