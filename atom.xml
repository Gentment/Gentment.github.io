<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LiuxiaoKun</title>
  
  <subtitle>My Awesome Site</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-09-08T09:39:42.663Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>LiuXiaoKun</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>搜索结构之哈希</title>
    <link href="http://yoursite.com/2018/09/07/%E6%90%9C%E7%B4%A2%E7%BB%93%E6%9E%84%E4%B9%8B%E5%93%88%E5%B8%8C/"/>
    <id>http://yoursite.com/2018/09/07/搜索结构之哈希/</id>
    <published>2018-09-07T15:40:33.000Z</published>
    <updated>2018-09-08T09:39:42.663Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><a id="more"></a><h3 id="哈希冲突的闭散列处理方式"><a href="#哈希冲突的闭散列处理方式" class="headerlink" title="哈希冲突的闭散列处理方式"></a>哈希冲突的闭散列处理方式</h3><h4 id="哈希的概念"><a href="#哈希的概念" class="headerlink" title="哈希的概念"></a>哈希的概念</h4><p>在顺序搜索以及二叉树搜索树中，元素存储的位置与元素的关键码之间没有对应的关系，因此查找一个元素时，必须要经过关键码的多次比较，搜索效率取决于搜索过程中元素的比较次数。<br>理想的搜索方法是：可以不经过任何的比较，一次直接从中找到要搜索的元素。如果构造一种存储结构，通过某种函数使得元素的存储位置与元素的关键码之间有一一映射的关系，那么在查找过程中通过该哈希函数可以直接找到该元素。当向该存储结构中：</p><p>（1）插入元素时：根据某种函数利用待插元素的关键码计算出该元素的存储位置并按照此位置进行存放。</p><p>（2）搜索元素时：根据某种函数利用待搜索元素的关键码计算出该元素应该存储的位置，在该位置取出元素与搜索元素比较，若相等时则表示搜索成功，否则搜索失败。<br><strong>该方式即为哈希（散列）方法，哈希方法中使用的某种函数称为哈希（散列）函数，构造出来的存储结构称为哈希（散列）表。</strong></p><p><strong><em>举个例子</em></strong><br>数租={1,3,5,6,8}    哈希函数：Hash(key)=key%10<br>将key值代入到哈希函数中，从而取出该key值的存储位置，此时，搜索指定元素如8时，直接利用哈希函数计算出存储位置下标，将其对应的值与要搜索的值8比较，相等时，表示找到了，否则没找到。通过上述操作可以看出，搜索的速度非常快。</p><p>但是存在这样一个问题：当向数据集合中插入元素11时，将元素11存储在哪儿？依旧利用key=11计算出Hash(11)=11%10=1，那么原本应该存储在下标为1的位置，但是此时下标为1的位置已经有存储的元素1，对于出现的这种现象我们称为哈希冲突！<br><strong>处理哈希冲突有两种常见的处理方式</strong></p><h4 id="闭散列处理哈希冲突"><a href="#闭散列处理哈希冲突" class="headerlink" title="闭散列处理哈希冲突"></a>闭散列处理哈希冲突</h4><ul><li>闭散列：也叫开放地址法，当发生哈希冲突时，如果哈希表未被装满，说明哈希表中必然还有空位置，那么就可以把key存放在表中的“下一个”空位中。那么下一个空位置如何查找呢？</li></ul><p>我们用<strong>线性探测</strong>的方式寻找下一个空位置。下面举例介绍如何线性探测寻找下一个空位置去处理哈希冲突：</p><p>设关键码集合={1,3,5,6,8,11,12}，哈希表的大小为11，哈希函数的设计用<strong>除留余数法</strong>，即哈希函数为Hash(Key)=Key%10；<br>通过计算，<br>我们将1存放在下标为1的位置，<br>      3存放在下标为3的位置，<br>      5存放在下标为5的位置，<br>            ……<br>      12存放是应存放在下标为1的位置，但是该位置已经存放了1，我们就探测1的下一位置是否为空，即2的位置存放11；    </p><h4 id="代码实现部分"><a href="#代码实现部分" class="headerlink" title="代码实现部分"></a>代码实现部分</h4><h5 id="头文件定义"><a href="#头文件定义" class="headerlink" title="头文件定义"></a>头文件定义</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;assert.h&gt;</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">typedef enum</span><br><span class="line">&#123;</span><br><span class="line">EXIST,</span><br><span class="line">DELETE,</span><br><span class="line">EMPTY</span><br><span class="line">&#125;State;</span><br><span class="line"></span><br><span class="line">typedef int KeyType;</span><br><span class="line">typedef int (*HashFunc)(KeyType key,int capacity);  //定义函数指针，参数类型为KeyType</span><br><span class="line"></span><br><span class="line">typedef struct HashElem</span><br><span class="line">&#123;</span><br><span class="line">KeyType key;</span><br><span class="line">State state;</span><br><span class="line">&#125;HashElem;</span><br><span class="line"></span><br><span class="line">typedef struct HashTable</span><br><span class="line">&#123;</span><br><span class="line">HashElem *table;   </span><br><span class="line">int size;//数据个数</span><br><span class="line">int capacity;//容量</span><br><span class="line">HashFunc hashfunc; //哈希函数</span><br><span class="line">&#125;HashTable;</span><br></pre></td></tr></table></figure><h5 id="初始化及销毁"><a href="#初始化及销毁" class="headerlink" title="初始化及销毁"></a>初始化及销毁</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">//初始化/销毁</span><br><span class="line">void HashInit(HashTable *pH,HashFunc hashfunc,int capacity)</span><br><span class="line">&#123;</span><br><span class="line">pH-&gt;table = (HashElem*)malloc(sizeof(HashElem)*capacity);</span><br><span class="line">assert(pH-&gt;table);</span><br><span class="line"></span><br><span class="line">pH-&gt;size = 0;</span><br><span class="line">pH-&gt;hashfunc = hashfunc;</span><br><span class="line">pH-&gt;capacity = capacity;</span><br><span class="line">for ( int i = 0; i &lt; capacity; i++)</span><br><span class="line">&#123;</span><br><span class="line">pH-&gt;table[i].state = EMPTY;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void HashDestroy(HashTable *pH)</span><br><span class="line">&#123;</span><br><span class="line">free(pH-&gt;table);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h5><p><strong><em>插入之前，我们需要判断是否需要扩大容量，减小哈希冲突的概率</em></strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">int HashInsert(HashTable *pH, KeyType key);</span><br><span class="line"></span><br><span class="line">int IsExpand(HashTable *pH)</span><br><span class="line">&#123;</span><br><span class="line">if (pH-&gt;size &lt;=  pH-&gt;capacity * 0.8)</span><br><span class="line">&#123;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">HashTable newHT;</span><br><span class="line">HashInit(&amp;newHT,pH-&gt;hashfunc, pH-&gt;capacity * 2);</span><br><span class="line">for (int i = 0; i &lt; pH-&gt;capacity * 2; i++)</span><br><span class="line">&#123;</span><br><span class="line">if (pH-&gt;table[i].state == EXIST)</span><br><span class="line">&#123;</span><br><span class="line">HashInsert(&amp;newHT, pH-&gt;table[i].key);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">free(pH-&gt;table);   //释放原来的table</span><br><span class="line">pH-&gt;table = newHT.table; //将新的table地址赋给</span><br><span class="line">pH-&gt;capacity = newHT.capacity;</span><br><span class="line"></span><br><span class="line">return 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int HashInsert(HashTable *pH,KeyType key)</span><br><span class="line">&#123;</span><br><span class="line">IsExpand(pH);</span><br><span class="line"></span><br><span class="line">int  index = pH-&gt;hashfunc(key, pH-&gt;capacity);</span><br><span class="line"></span><br><span class="line">while (1)</span><br><span class="line">&#123;</span><br><span class="line">if (pH-&gt;table[index].key == key &amp;&amp; pH-&gt;table[index].state == EXIST)</span><br><span class="line">&#123;</span><br><span class="line">return -1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if (pH-&gt;table[index].state != EXIST)</span><br><span class="line">&#123;</span><br><span class="line">pH-&gt;table[index].key = key;</span><br><span class="line">pH-&gt;table[index].state = EXIST;</span><br><span class="line">pH-&gt;size++;</span><br><span class="line">return 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">index = (index + 1) % pH-&gt;capacity;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h5 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//查找</span><br><span class="line">int HashFind(HashTable *pH,KeyType  key)</span><br><span class="line">&#123;</span><br><span class="line">int index = pH-&gt;hashfunc(key,pH-&gt;capacity);</span><br><span class="line">while (pH-&gt;table[index].state != EMPTY)</span><br><span class="line">&#123;</span><br><span class="line">if (pH-&gt;table[index].key == key)</span><br><span class="line">&#123;</span><br><span class="line">return index;</span><br><span class="line">&#125;</span><br><span class="line">index = (index + 1) % pH-&gt;capacity;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return -1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">int HashRemove(HashTable *pH,KeyType key)</span><br><span class="line">&#123;</span><br><span class="line">int index = pH-&gt;hashfunc(key,pH-&gt;capacity);</span><br><span class="line">while (pH-&gt;table[index].state != EMPTY)</span><br><span class="line">&#123;</span><br><span class="line">if (pH-&gt;table[index].key == key &amp;&amp; pH-&gt;table[index].state == EXIST)</span><br><span class="line">&#123;</span><br><span class="line">pH-&gt;table[index].state = DELETE;</span><br><span class="line">return 1;</span><br><span class="line">&#125;</span><br><span class="line">index = (index + 1) % pH-&gt;capacity;</span><br><span class="line">&#125;</span><br><span class="line">return -1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="打印出key所对应的value以及状态"><a href="#打印出key所对应的value以及状态" class="headerlink" title="打印出key所对应的value以及状态"></a>打印出key所对应的value以及状态</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">void PrintKeyValue(HashTable *pH)</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;index --&gt; value --&gt;state\n&quot;);</span><br><span class="line">for (int i = 0; i &lt; pH-&gt;size; i++)</span><br><span class="line">&#123;</span><br><span class="line">int index = pH-&gt;hashfunc(pH-&gt;table[i].key,pH-&gt;capacity);</span><br><span class="line">printf(&quot;%d --&gt; %d  --&gt;%d\n&quot;,index,pH-&gt;table[index].key,pH-&gt;table[index].state);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><em>测试部分我就不在这里放了，有兴趣的话可以自行测试</em></strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;\assets\js\APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;哈希冲突的闭散列处理方式&quot;&gt;&lt;a href=&quot;#哈希冲突的闭散列处理方式&quot; class=&quot;headerlink&quot; title=&quot;
      
    
    </summary>
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="哈希表" scheme="http://yoursite.com/tags/%E5%93%88%E5%B8%8C%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>面向对象之集合框架</title>
    <link href="http://yoursite.com/2018/09/01/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%B9%8B%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/"/>
    <id>http://yoursite.com/2018/09/01/面向对象之集合框架/</id>
    <published>2018-09-01T15:11:49.000Z</published>
    <updated>2018-09-02T15:06:39.515Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><a id="more"></a><h3 id="一、集合框架的由来"><a href="#一、集合框架的由来" class="headerlink" title="一、集合框架的由来"></a>一、集合框架的由来</h3><p>Java 集合框架主要包括两种类型的容器，一种是集合（Collection），存储一个元素集合，另一种是图（Map），存储键/值对映射。Collection 接口又有 3 种子类型，List、Set和Queue，再下面是一些抽象类，最后是具体实现类，常用的有ArrayList、LinkedList、HashSet、LinkedHashSet、HashMap、LinkedHashMap 等等。</p><p>集合框架是一个用来代表和操纵集合的统一架构。所有的集合框架都包含如下内容：</p><ul><li><p>接口：是代表集合的抽象数据类型。例如 Collection、List、Set、Map 等。之所以定义多个接口，是为了以不同的方式操作集合对象</p></li><li><p>实现（类）：是集合接口的具体实现。从本质上讲，它们是可重复使用的数据结构，例如：ArrayList、LinkedList、HashSet、HashMap。</p></li><li><p>算法：是实现集合接口的对象里的方法执行的一些有用的计算，例如：搜索和排序。这些算法被称为多态，那是因为相同的方法可以在相似的接口上有着不同的实现。</p></li></ul><p>除了集合，该框架也定义了几个 Map 接口和类。Map 里存储的是键/值对。尽管Map不是集合，但是它们完全整合在集合中。</p><h3 id="二、数组与集合的区别"><a href="#二、数组与集合的区别" class="headerlink" title="二、数组与集合的区别"></a>二、数组与集合的区别</h3><p><strong>数组的特点：</strong></p><ol><li>只能存储同一种数据类型的数据。</li><li>一旦初始化，长度固定。 </li><li>数组中的元素与元素之间的内存地址是连续的。</li></ol><blockquote><p>注意： Object类型的数组可以存储任意类型的数据。</p><p>集合：集合是存储对象数据的集合容器。</p></blockquote><p><strong>集合比数组的优势:</strong></p><ol><li>集合可以存储任意类型的对象数据，数组只能存储同一种数据类型 的数据。</li><li>集合的长度是会发生变化的，数组的长度是固定的</li></ol><h3 id="三、collection之继承体系"><a href="#三、collection之继承体系" class="headerlink" title="三、collection之继承体系"></a>三、collection之继承体系</h3><p>Collection<e>接口是所有单列集合的共同父接口，下面列出了常用的Collection子类集合及其继承关系。   </e></p><h4 id="集合框架概述"><a href="#集合框架概述" class="headerlink" title="集合框架概述"></a>集合框架概述</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Collection   </span><br><span class="line">    |-----List有序(存储顺序和取出顺序一致)，可重复</span><br><span class="line">    |----ArrayList，线程不安全，底层使用数组实现，查询快，增删慢。效率高。</span><br><span class="line">            每次容量不足时，自增长度的一半，如下源码可知</span><br><span class="line">                  int newCapacity = oldCapacity + (oldCapacity &gt;&gt; 1);</span><br><span class="line">    |----LinkedList ， 线程不安全，底层使用链表实现，查询慢，增删快。效率高</span><br><span class="line"> </span><br><span class="line">    |----Vector ， 线程安全，底层使用数组实现，查询快，增删慢。效率低         每次容量不足时，默认自增长度的一倍（如果不指定增量的话），如下源码可知</span><br><span class="line">                   int newCapacity = oldCapacity + ((capacityIncrement &gt; 0) ?</span><br><span class="line">                                     capacityIncrement : oldCapacity);</span><br><span class="line">    |-----Set   元素唯一一个不包含重复元素的 collection。更确切地讲，set 不包含满足 e1.equals(e2) 的元素对 e1 和 e2，并且最多包含一个 null 元素。</span><br><span class="line"> </span><br><span class="line">    |--HashSet 底层是由HashMap实现的，通过对象的hashCode方法与equals方法来保证插入元素的唯一性，无序(存储顺序和取出顺序不一致)。</span><br><span class="line"> </span><br><span class="line">    |--LinkedHashSet 底层数据结构由哈希表和链表组成。哈希表保证元素的唯一性，链表保证元素有序。(存储和取出是一致)</span><br><span class="line"> </span><br><span class="line">    |--TreeSet 基于 TreeMap 的 NavigableSet 实现。使用元素的自然顺序对元素进行排序，或者根据创建 set 时提供的 Comparator 进行排序，具体取决于使用的构造方法。 元素唯一。</span><br></pre></td></tr></table></figure><h3 id="四、Collection泛型接口"><a href="#四、Collection泛型接口" class="headerlink" title="四、Collection泛型接口"></a>四、Collection泛型接口</h3> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">boolean add(E e) </span><br><span class="line">             确保此 collection 包含指定的元素（可选操作）。    </span><br><span class="line">    boolean addAll(Collection&lt;? extends E&gt; c) </span><br><span class="line">   将指定collection中的所有元素都添加到此collection 中（可选操作）。    </span><br><span class="line">    void clear() </span><br><span class="line">             移除此 collection 中的所有元素（可选操作）。 </span><br><span class="line">    boolean contains(Object o) </span><br><span class="line">             如果此 collection 包含指定的元素，则返回 true。 </span><br><span class="line">    boolean containsAll(Collection&lt;?&gt; c) </span><br><span class="line">             如果此 collection 包含指定 collection 中的所有元素，则返回 true。 </span><br><span class="line">    boolean equals(Object o) </span><br><span class="line">             比较此 collection 与指定对象是否相等。 </span><br><span class="line">    int hashCode() </span><br><span class="line">             返回此 collection 的哈希码值。 </span><br><span class="line">    boolean isEmpty() </span><br><span class="line">             如果此 collection 不包含元素，则返回 true。 </span><br><span class="line">    Iterator&lt;E&gt; iterator() </span><br><span class="line">             返回在此 collection 的元素上进行迭代的迭代器。 </span><br><span class="line">    boolean remove(Object o) </span><br><span class="line">             从此 collection 中移除指定元素的单个实例，如果存在的话（可选操作）。 </span><br><span class="line">    boolean removeAll(Collection&lt;?&gt; c) </span><br><span class="line">             移除此 collection 中那些也包含在指定 collection 中的所有元素（可选操作）。 </span><br><span class="line">    boolean retainAll(Collection&lt;?&gt; c) </span><br><span class="line">             仅保留此 collection 中那些也包含在指定 collection 的元素（可选操作）。 </span><br><span class="line">    int size() </span><br><span class="line">             返回此 collection 中的元素数。 </span><br><span class="line">    Object[] toArray() </span><br><span class="line">             返回包含此 collection 中所有元素的数组。 </span><br><span class="line">   &lt;T&gt; T[] </span><br><span class="line">    toArray(T[] a)</span><br></pre></td></tr></table></figure><h4 id="collection方法简单示例："><a href="#collection方法简单示例：" class="headerlink" title="collection方法简单示例："></a>collection方法简单示例：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">   //集合转数组遍历</span><br><span class="line">public static void demo1() &#123;</span><br><span class="line">Collection coll = new ArrayList();</span><br><span class="line">coll.add(new Student(&quot;张三&quot;,23));//Object obj = new Student(&quot;张三&quot;,23);</span><br><span class="line">coll.add(new Student(&quot;李四&quot;,24));</span><br><span class="line">coll.add(new Student(&quot;王五&quot;,25));</span><br><span class="line">coll.add(new Student(&quot;赵六&quot;,26));</span><br><span class="line"></span><br><span class="line">Object[] arr = coll.toArray();//将集合转换成数组</span><br><span class="line">for (int i = 0; i &lt; arr.length; i++) &#123;</span><br><span class="line">Student s = (Student)arr[i];//强转成Student</span><br><span class="line">System.out.println(s.getName() + &quot;,&quot; + s.getAge());</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">//集合的遍历之迭代器遍历</span><br><span class="line">public static void demo2() &#123;</span><br><span class="line">Collection c = new ArrayList();</span><br><span class="line">c.add(&quot;a&quot;);</span><br><span class="line">c.add(&quot;b&quot;);</span><br><span class="line">c.add(&quot;c&quot;);</span><br><span class="line">c.add(&quot;d&quot;);</span><br><span class="line"></span><br><span class="line">Iterator it = c.iterator();//获取迭代器的引用</span><br><span class="line">while(it.hasNext()) &#123;//集合中的迭代方法(遍历)</span><br><span class="line">System.out.println(it.next());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="五、List泛型接口"><a href="#五、List泛型接口" class="headerlink" title="五、List泛型接口"></a>五、List泛型接口</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public interface List&lt;E&gt;extends Collection&lt;E&gt;  //超级接口</span><br></pre></td></tr></table></figure><h4 id="方法概述："><a href="#方法概述：" class="headerlink" title="方法概述："></a>方法概述：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"> boolean add(E o) </span><br><span class="line">          向列表的尾部追加指定的元素（可选操作）。 </span><br><span class="line"> void add(int index, E element) </span><br><span class="line">          在列表的指定位置插入指定元素（可选操作）。 </span><br><span class="line"> boolean addAll(Collection&lt;? extends E&gt; c) </span><br><span class="line">          追加指定 collection 中的所有元素到此列表的结尾，顺序是指定 collection 的迭代器返回这些元素的顺序（可选操作）。 </span><br><span class="line"> boolean addAll(int index, Collection&lt;? extends E&gt; c) </span><br><span class="line">          将指定 collection 中的所有元素都插入到列表中的指定位置（可选操作）。 </span><br><span class="line"> void clear() </span><br><span class="line">          从列表中移除所有元素（可选操作）。 </span><br><span class="line"> boolean contains(Object o) </span><br><span class="line">          如果列表包含指定的元素，则返回 true。 </span><br><span class="line"> boolean containsAll(Collection&lt;?&gt; c) </span><br><span class="line">          如果列表包含指定 collection 的所有元素，则返回 true。 </span><br><span class="line"> boolean equals(Object o) </span><br><span class="line">          比较指定的对象与列表是否相等。 </span><br><span class="line"> E get(int index) </span><br><span class="line">          返回列表中指定位置的元素。 </span><br><span class="line"> int hashCode() </span><br><span class="line">          返回列表的哈希码值。 </span><br><span class="line"> int indexOf(Object o) </span><br><span class="line">          返回列表中首次出现指定元素的索引，如果列表不包含此元素，则返回 -1。 </span><br><span class="line"> boolean isEmpty() </span><br><span class="line">          如果列表不包含元素，则返回 true。 </span><br><span class="line"> Iterator&lt;E&gt; iterator() </span><br><span class="line">          返回以正确顺序在列表的元素上进行迭代的迭代器。 </span><br><span class="line"> int lastIndexOf(Object o) </span><br><span class="line">          返回列表中最后出现指定元素的索引，如果列表不包含此元素，则返回 -1。 </span><br><span class="line"> ListIterator&lt;E&gt; listIterator() </span><br><span class="line">          返回列表中元素的列表迭代器（以正确的顺序）。 </span><br><span class="line"> ListIterator&lt;E&gt; listIterator(int index) </span><br><span class="line">          返回列表中元素的列表迭代器（以正确的顺序），从列表的指定位置开始。 </span><br><span class="line"> E remove(int index) </span><br><span class="line">          移除列表中指定位置的元素（可选操作）。 </span><br><span class="line"> boolean remove(Object o) </span><br><span class="line">          移除列表中出现的首个指定元素（可选操作）。 </span><br><span class="line"> boolean removeAll(Collection&lt;?&gt; c) </span><br><span class="line">          从列表中移除指定 collection 中包含的所有元素（可选操作）。 </span><br><span class="line"> boolean retainAll(Collection&lt;?&gt; c) </span><br><span class="line">          仅在列表中保留指定 collection 中所包含的元素（可选操作）。 </span><br><span class="line"> E set(int index, E element) </span><br><span class="line">          用指定元素替换列表中指定位置的元素（可选操作）。 </span><br><span class="line"> int size() </span><br><span class="line">          返回列表中的元素数。 </span><br><span class="line"> List&lt;E&gt; subList(int fromIndex, int toIndex) </span><br><span class="line">          返回列表中指定的 fromIndex（包括 ）和 toIndex（不包括）之间的部分视图。 </span><br><span class="line"> Object[] toArray() </span><br><span class="line">          返回以正确顺序包含列表中的所有元素的数组。 </span><br><span class="line">&lt;T&gt; T[] </span><br><span class="line"> toArray(T[] a) </span><br><span class="line">          返回以正确顺序包含列表中所有元素的数组；返回数组的运行时类型是指定数组的运行时类型。</span><br></pre></td></tr></table></figure><h4 id="list方法简单示例："><a href="#list方法简单示例：" class="headerlink" title="list方法简单示例："></a>list方法简单示例：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">public static void demo2() &#123;</span><br><span class="line">List list = new ArrayList();</span><br><span class="line">list.add(new Student(&quot;张三&quot;,23));</span><br><span class="line">list.add(new Student(&quot;李四&quot;,24));</span><br><span class="line">list.add(new Student(&quot;王五&quot;,25));</span><br><span class="line">list.add(new Student(&quot;赵六&quot;,26));</span><br><span class="line"></span><br><span class="line">Iterator iterator = list.iterator();</span><br><span class="line">while (iterator.hasNext()) &#123;</span><br><span class="line">Student s = (Student) iterator.next(); //向下转型</span><br><span class="line">System.out.println(s);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static void demo() &#123;</span><br><span class="line">List list = new ArrayList();</span><br><span class="line">list.add(&quot;a&quot;);</span><br><span class="line">list.add(&quot;b&quot;);</span><br><span class="line">list.add(&quot;c&quot;);</span><br><span class="line">list.add(&quot;d&quot;);</span><br><span class="line"></span><br><span class="line">Iterator iterator  = list.iterator();</span><br><span class="line">while (iterator.hasNext()) &#123;</span><br><span class="line">System.out.println(iterator.next());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="并发修改异常产生的原因及解决方案"><a href="#并发修改异常产生的原因及解决方案" class="headerlink" title="并发修改异常产生的原因及解决方案"></a>并发修改异常产生的原因及解决方案</h4><blockquote><p>假设有一个集合，请问，我想判断里面有没有”world”这个元素，如果有，我就添加一个”java”元素,具体代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public static void demo3() &#123;</span><br><span class="line">List list = new ArrayList();</span><br><span class="line">list.add(&quot;a&quot;);</span><br><span class="line">list.add(&quot;b&quot;);</span><br><span class="line">list.add(&quot;world&quot;);</span><br><span class="line">list.add(&quot;d&quot;);</span><br><span class="line">list.add(&quot;e&quot;);</span><br><span class="line"></span><br><span class="line">Iterator it = list.iterator();</span><br><span class="line">while(it.hasNext()) &#123;</span><br><span class="line">String str = (String)it.next();</span><br><span class="line">if(str.equals(&quot;world&quot;)) &#123;</span><br><span class="line">list.add(&quot;javaee&quot;);//这里会抛出ConcurrentModificationException并发修改异常</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><p><strong>运行上面代码发生ConcurrentModificationException并发修改异常，查看迭代器源代码如下。</strong><br><strong><em>产生原因：迭代器是依赖于集合而存在的，在判断成功后，集合的中新添加了元素，而迭代器却不知道，迭代器的内容不发生改变。所以就报错了，这个错叫并发修改异常。</em></strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  final void checkForComodification() &#123;</span><br><span class="line">        if (modCount != expectedModCount)</span><br><span class="line">            throw new ConcurrentModificationException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>解决办法及代码如下：<br>迭代器迭代元素，迭代器修改元素(ListIterator的特有功能add)<br>集合遍历元素，集合修改元素<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">  public static void demo() &#123;</span><br><span class="line">ListIterator lit = list.listIterator();//如果想在遍历的过程中添加元素,可以用ListIterator中的add方法</span><br><span class="line">while(lit.hasNext()) &#123;</span><br><span class="line">String str = (String)lit.next();</span><br><span class="line">if(str.equals(&quot;world&quot;)) &#123;</span><br><span class="line">lit.add(&quot;javaee&quot;);</span><br><span class="line">//list.add(&quot;javaee&quot;);</span><br><span class="line">&#125;</span><br><span class="line">          &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>了解：(ListIterator)   </p><ol><li>boolean hasNext()是否有下一个</li><li>boolean hasPrevious()是否有前一个</li><li>Object next()返回下一个元素</li><li>Object previous();返回上一个元素</li></ol></blockquote><h3 id="六、ArrayList类"><a href="#六、ArrayList类" class="headerlink" title="六、ArrayList类"></a>六、ArrayList类</h3><h4 id="方法摘要："><a href="#方法摘要：" class="headerlink" title="方法摘要："></a>方法摘要：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public class ArrayList&lt;E&gt;extends AbstractList&lt;E&gt;implements List&lt;E&gt;, RandomAccess, Cloneable, Serializable</span><br></pre></td></tr></table></figure><h4 id="构造方法摘要"><a href="#构造方法摘要" class="headerlink" title="构造方法摘要"></a>构造方法摘要</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">ArrayList() </span><br><span class="line">          构造一个初始容量为 10 的空列表。 </span><br><span class="line">ArrayList(Collection&lt;? extends E&gt; c) </span><br><span class="line">          构造一个包含指定 collection 的元素的列表，这些元素是按照该 collection 的迭代器返回它们的顺序排列的。 </span><br><span class="line">ArrayList(int initialCapacity) </span><br><span class="line">          构造一个具有指定初始容量的空列表。 </span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"> boolean add(E o) </span><br><span class="line">          将指定的元素追加到此列表的尾部。 </span><br><span class="line"> void add(int index, E element) </span><br><span class="line">          将指定的元素插入此列表中的指定位置。 </span><br><span class="line"> boolean addAll(Collection&lt;? extends E&gt; c) </span><br><span class="line">          按照指定 Collection 的迭代器所返回的元素顺序，将该 Collection 中的所有元素追加到此列表的尾部。 </span><br><span class="line"> boolean addAll(int index, Collection&lt;? extends E&gt; c) </span><br><span class="line">          从指定的位置开始，将指定 Collection 中的所有元素插入到此列表中。 </span><br><span class="line"> void clear() </span><br><span class="line">          移除此列表中的所有元素。 </span><br><span class="line"> Object clone() </span><br><span class="line">          返回此 ArrayList 实例的浅表复制。 </span><br><span class="line"> boolean contains(Object elem) </span><br><span class="line">          如果此列表中包含指定的元素，则返回 true。 </span><br><span class="line"> void ensureCapacity(int minCapacity) </span><br><span class="line">          如有必要，增加此 ArrayList 实例的容量，以确保它至少能够容纳最小容量参数所指定的元素数。 </span><br><span class="line"> E get(int index) </span><br><span class="line">          返回此列表中指定位置上的元素。 </span><br><span class="line"> int indexOf(Object elem) </span><br><span class="line">          搜索给定参数第一次出现的位置，使用 equals 方法进行相等性测试。 </span><br><span class="line"> boolean isEmpty() </span><br><span class="line">          测试此列表中是否没有元素。 </span><br><span class="line"> int lastIndexOf(Object elem) </span><br><span class="line">          返回指定的对象在列表中最后一次出现的位置索引。 </span><br><span class="line"> E remove(int index) </span><br><span class="line">          移除此列表中指定位置上的元素。 </span><br><span class="line"> boolean remove(Object o) </span><br><span class="line">          从此列表中移除指定元素的单个实例（如果存在），此操作是可选的。 </span><br><span class="line">protected  void removeRange(int fromIndex, int toIndex) </span><br><span class="line">          移除列表中索引在 fromIndex（包括）和 toIndex（不包括）之间的所有元素。 </span><br><span class="line"> E set(int index, E element) </span><br><span class="line">          用指定的元素替代此列表中指定位置上的元素。 </span><br><span class="line"> int size() </span><br><span class="line">          返回此列表中的元素数。 </span><br><span class="line"> Object[] toArray() </span><br><span class="line">          返回一个按照正确的顺序包含此列表中所有元素的数组。 </span><br><span class="line">&lt;T&gt; T[] </span><br><span class="line"> toArray(T[] a) </span><br><span class="line">          返回一个按照正确的顺序包含此列表中所有元素的数组；返回数组的运行时类型就是指定数组的运行时类型。 </span><br><span class="line"> void trimToSize() </span><br><span class="line">          将此 ArrayList 实例的容量调整为列表的当前大小。 </span><br><span class="line">从类 java.util.AbstractList 继承的方法 </span><br><span class="line">equals, hashCode, iterator, listIterator, listIterator, subList </span><br><span class="line">  从类 java.util.AbstractCollection 继承的方法 </span><br><span class="line">containsAll, removeAll, retainAll, toString </span><br><span class="line">  从类 java.lang.Object 继承的方法 </span><br><span class="line">finalize, getClass, notify, notifyAll, wait, wait, wait </span><br><span class="line">  从接口 java.util.List 继承的方法 </span><br><span class="line">containsAll, equals, hashCode, iterator, listIterator, listIterator, removeAll, retainAll, subList</span><br></pre></td></tr></table></figure><p><strong>ArrayList示例：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">public static void demo1() &#123;</span><br><span class="line">ArrayList arr = new ArrayList();</span><br><span class="line">arr.add(new Student(&quot;张三&quot;, 23));</span><br><span class="line">arr.add(new Student(&quot;李四&quot;,24));</span><br><span class="line"></span><br><span class="line">System.out.println(arr);</span><br><span class="line"></span><br><span class="line">Iterator it = arr.iterator();</span><br><span class="line">while (it.hasNext()) &#123;</span><br><span class="line">Student student = (Student) it.next();</span><br><span class="line">System.out.println(student.getName()+&quot;...&quot;+student.getAge());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">public static void demo() &#123;</span><br><span class="line">ArrayList arr = new ArrayList();</span><br><span class="line">arr.add(&quot;a&quot;);</span><br><span class="line">arr.add(&quot;b&quot;);</span><br><span class="line">arr.add(&quot;c&quot;);</span><br><span class="line">arr.add(&quot;d&quot;);</span><br><span class="line"></span><br><span class="line">System.out.println(arr);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="七、LinkedList类"><a href="#七、LinkedList类" class="headerlink" title="七、LinkedList类"></a>七、LinkedList类</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public class LinkedList&lt;E&gt;extends AbstractSequentialList&lt;E&gt;implements List&lt;E&gt;, Queue&lt;E&gt;, Cloneable, Serializable</span><br></pre></td></tr></table></figure><h4 id="构造方法摘要-1"><a href="#构造方法摘要-1" class="headerlink" title="构造方法摘要"></a>构造方法摘要</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">LinkedList() </span><br><span class="line">          构造一个空列表。 </span><br><span class="line">LinkedList(Collection&lt;? extends E&gt; c) </span><br><span class="line">          构造一个包含指定集合中的元素的列表，这些元素按其集合的迭代器返回的顺序排列。</span><br></pre></td></tr></table></figure><h4 id="方法摘要"><a href="#方法摘要" class="headerlink" title="方法摘要"></a>方法摘要</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"> boolean add(E o) </span><br><span class="line">          将指定元素追加到此列表的结尾。 </span><br><span class="line"> void add(int index, E element) </span><br><span class="line">          在此列表中指定的位置插入指定的元素。 </span><br><span class="line"> boolean addAll(Collection&lt;? extends E&gt; c) </span><br><span class="line">          追加指定 collection 中的所有元素到此列表的结尾，顺序是指定 collection 的迭代器返回这些元素的顺序。 </span><br><span class="line"> boolean addAll(int index, Collection&lt;? extends E&gt; c) </span><br><span class="line">          将指定集合中的所有元素从指定位置开始插入此列表。 </span><br><span class="line"> void addFirst(E o) </span><br><span class="line">          将给定元素插入此列表的开头。 </span><br><span class="line"> void addLast(E o) </span><br><span class="line">          将给定元素追加到此列表的结尾。 </span><br><span class="line"> void clear() </span><br><span class="line">          从此列表中移除所有元素。 </span><br><span class="line"> Object clone() </span><br><span class="line">          返回此 LinkedList 的浅表复制。 </span><br><span class="line"> boolean contains(Object o) </span><br><span class="line">          如果此列表包含指定元素，则返回 true。 </span><br><span class="line"> E element() </span><br><span class="line">          找到但不移除此列表的头（第一个元素）。 </span><br><span class="line"> E get(int index) </span><br><span class="line">          返回此列表中指定位置处的元素。 </span><br><span class="line"> E getFirst() </span><br><span class="line">          返回此列表的第一个元素。 </span><br><span class="line"> E getLast() </span><br><span class="line">          返回此列表的最后一个元素。 </span><br><span class="line"> int indexOf(Object o) </span><br><span class="line">          返回此列表中首次出现的指定元素的索引，如果列表中不包含此元素，则返回 -1。 </span><br><span class="line"> int lastIndexOf(Object o) </span><br><span class="line">          返回此列表中最后出现的指定元素的索引，如果列表中不包含此元素，则返回 -1。 </span><br><span class="line"> ListIterator&lt;E&gt; listIterator(int index) </span><br><span class="line">          返回此列表中的元素的列表迭代器（按适当顺序），从列表中指定位置开始。 </span><br><span class="line"> boolean offer(E o) </span><br><span class="line">          将指定元素添加到此列表的末尾（最后一个元素）。 </span><br><span class="line"> E peek() </span><br><span class="line">          找到但不移除此列表的头（第一个元素）。 </span><br><span class="line"> E poll() </span><br><span class="line">          找到并移除此列表的头（第一个元素）。 </span><br><span class="line"> E remove() </span><br><span class="line">          找到并移除此列表的头（第一个元素）。 </span><br><span class="line"> E remove(int index) </span><br><span class="line">          移除此列表中指定位置处的元素。 </span><br><span class="line"> boolean remove(Object o) </span><br><span class="line">          移除此列表中首次出现的指定元素。 </span><br><span class="line"> E removeFirst() </span><br><span class="line">          移除并返回此列表的第一个元素。 </span><br><span class="line"> E removeLast() </span><br><span class="line">          移除并返回此列表的最后一个元素。 </span><br><span class="line"> E set(int index, E element) </span><br><span class="line">          将此列表中指定位置的元素替换为指定的元素。 </span><br><span class="line"> int size() </span><br><span class="line">          返回此列表的元素数。 </span><br><span class="line"> Object[] toArray() </span><br><span class="line">          以正确顺序返回包含此列表中所有元素的数组。 </span><br><span class="line">&lt;T&gt; T[] </span><br><span class="line"> toArray(T[] a) </span><br><span class="line">          以正确顺序返回包含此列表中所有元素的数组；返回数组的运行时类型即为指定数组的类。</span><br><span class="line">```          </span><br><span class="line">### 八、vector</span><br></pre></td></tr></table></figure><p>public class Vector<e>extends AbstractList<e>implements List<e>, RandomAccess, Cloneable, Serializable<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#### 构造方法摘要</span><br></pre></td></tr></table></figure></e></e></e></p><p>Vector()<br>          构造一个空向量，使其内部数据数组的大小为 10，其标准容量增量为零。<br>Vector(Collection&lt;? extends E&gt; c)<br>          构造一个包含指定集合中的元素的向量，这些元素按其集合的迭代器返回元素的顺序排列。<br>Vector(int initialCapacity)<br>          使用指定的初始容量和等于零的容量增量构造一个空向量。<br>Vector(int initialCapacity, int capacityIncrement)<br>          使用指定的初始容量和容量增量构造一个空的向量<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#### 特有方法摘要</span><br></pre></td></tr></table></figure></p><p> boolean add(E o)<br>          将指定元素追加到此向量的末尾。<br> void add(int index, E element)<br>          在此向量的指定位置插入指定的元素。<br> boolean addAll(Collection&lt;? extends E&gt; c)<br>          将指定 Collection 中的所有元素追加到此向量的末尾，按照指定集合的迭代器所返回的顺序追加这些元素。<br> boolean addAll(int index, Collection&lt;? extends E&gt; c)<br>          在指定位置将指定 Collection 中的所有元素插入到此向量中。<br> void addElement(E obj)<br>          将指定的组件添加到此向量的末尾，将其大小增加 1。<br> int capacity()<br>          返回此向量的当前容量。<br> void clear()<br>          从此向量中移除所有元素。<br> Object clone()<br>          返回向量的一个副本。<br> boolean contains(Object elem)<br>          测试指定的对象是否为此向量中的组件。<br> boolean containsAll(Collection&lt;?&gt; c)<br>          如果此向量包含指定 Collection 中的所有元素，则返回 true。<br> void copyInto(Object[] anArray)<br>          将此向量的组件复制到指定的数组中。<br> E elementAt(int index)<br>          返回指定索引处的组件。<br> Enumeration<e> elements()<br>          返回此向量的组件的枚举。<br> void ensureCapacity(int minCapacity)<br>          增加此向量的容量（如有必要），以确保其至少能够保存最小容量参数指定的组件数。<br> boolean equals(Object o)<br>          比较指定对象与此向量的相等性。<br> E firstElement()<br>          返回此向量的第一个组件（位于索引 0 处的项）。<br> E get(int index)<br>          返回向量中指定位置的元素。<br> int hashCode()<br>          返回此向量的哈希码值。<br> int indexOf(Object elem)<br>          搜索给定参数的第一个匹配项，使用 equals 方法测试相等性。<br> int indexOf(Object elem, int index)<br>          搜索给定参数的第一个匹配项，从 index 处开始搜索，并使用 equals 方法测试其相等性。<br> void insertElementAt(E obj, int index)<br>          将指定对象作为此向量中的组件插入到指定的 index 处。<br> boolean isEmpty()<br>          测试此向量是否不包含组件。<br> E lastElement()<br>          返回此向量的最后一个组件。<br> int lastIndexOf(Object elem)<br>          返回指定的对象在此向量中最后一个匹配项的索引。<br> int lastIndexOf(Object elem, int index)<br>          向后搜索指定的对象，从指定的索引处开始搜索，并返回一个索引。<br> E remove(int index)<br>          移除此向量中指定位置的元素。<br> boolean remove(Object o)<br>          移除此向量中指定元素的第一个匹配项，如果向量不包含该元素，则元素保持不变。<br> boolean removeAll(Collection&lt;?&gt; c)<br>          从此向量中移除包含在指定 Collection 中的所有元素。<br> void removeAllElements()<br>          从此向量中移除全部组件，并将其大小设置为零。<br> boolean removeElement(Object obj)<br>          从此向量中移除变量的第一个（索引最小的）匹配项。<br> void removeElementAt(int index)<br>          删除指定索引处的组件。<br>protected  void removeRange(int fromIndex, int toIndex)<br>          从此 List 中移除其索引位于 fromIndex（包括）与 toIndex（不包括）之间的所有元素。<br> boolean retainAll(Collection&lt;?&gt; c)<br>          在此向量中仅保留包含在指定 Collection 中的元素。<br> E set(int index, E element)<br>          用指定的元素替换此向量中指定位置处的元素。<br> void setElementAt(E obj, int index)<br>          将此向量指定 index 处的组件设置为指定的对象。<br> void setSize(int newSize)<br>          设置此向量的大小。<br> int size()<br>          返回此向量中的组件数。<br> List<e> subList(int fromIndex, int toIndex)<br>          返回此 List 的部分视图，元素范围为从 fromIndex（包括）到 toIndex（不包括）。<br> Object[] toArray()<br>          返回一个数组，包含此向量中以正确顺序存放的所有元素。 </e></e></p><p><t> T[]<br> toArray(T[] a)<br>          返回一个数组，包含此向量中以正确顺序存放的所有元素；返回数组的运行时类型为指定数组的类型。<br> String toString()<br>          返回此向量的字符串表示形式，其中包含每个元素的 String 表示形式。<br> void trimToSize()<br>          对此向量的容量进行微调，使其等于向量的当前大小。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#### vector 使用示例:</span><br></pre></td></tr></table></figure></t></p><pre><code>public static void demo1() {    Vector v = new Vector();    v.add(new Student(&quot;张三&quot;, 23));    v.add(new Student(&quot;李四&quot;, 24));    v.add(new Student(&quot;王五&quot;, 25));    Iterator it = v.iterator();    while (it.hasNext()) {        Object s = (Student) it.next();        System.out.println(s);    }}public static void demo() {    Vector v = new Vector();    v.add(&quot;a&quot;);    v.add(&quot;b&quot;);    v.add(&quot;c&quot;);    v.add(&quot;d&quot;);    System.out.println(v);    System.out.println(v.capacity());    System.out.println(v.size());    System.out.println(v.contains(&quot;a&quot;));}</code></pre><p> ```</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;\assets\js\APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;一、集合框架的由来&quot;&gt;&lt;a href=&quot;#一、集合框架的由来&quot; class=&quot;headerlink&quot; title=&quot;一、集合框架
      
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="collection" scheme="http://yoursite.com/tags/collection/"/>
    
      <category term="ArrayList" scheme="http://yoursite.com/tags/ArrayList/"/>
    
      <category term="Vector" scheme="http://yoursite.com/tags/Vector/"/>
    
      <category term="Iterator" scheme="http://yoursite.com/tags/Iterator/"/>
    
  </entry>
  
  <entry>
    <title>二叉搜索树</title>
    <link href="http://yoursite.com/2018/08/31/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/"/>
    <id>http://yoursite.com/2018/08/31/二叉搜索树/</id>
    <published>2018-08-31T14:29:32.000Z</published>
    <updated>2018-09-02T02:33:01.365Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><a id="more"></a><h3 id="二叉搜索树概念"><a href="#二叉搜索树概念" class="headerlink" title="二叉搜索树概念"></a>二叉搜索树概念</h3><p>二叉搜索树又称二叉排序树，它或者是一棵空树，或者是具有以下性质的二叉树</p><ul><li>若它的左子树不为空，则左子树上所有节点的值都小于根节点的值</li><li>若它的右子树不为空，则右子树上所有节点的值都大于根节点的值</li><li>它的左右子树也分别为二叉搜索树</li></ul><h3 id="二叉搜索树操作"><a href="#二叉搜索树操作" class="headerlink" title="二叉搜索树操作"></a>二叉搜索树操作</h3><p><strong><em>头文件定义</em></strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">typedef int DataType;</span><br><span class="line"></span><br><span class="line">typedef struct BSTreeNode</span><br><span class="line">&#123;</span><br><span class="line">DataType key;</span><br><span class="line">struct BSTreeNode *left;</span><br><span class="line">struct BSTreeNode *right;</span><br><span class="line">&#125;BSTreeNode;</span><br></pre></td></tr></table></figure></p><h4 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h4><p><strong>若根结点不为空</strong><br><strong>当key == 查找的key，返回true</strong><br><strong>当key &gt; 查找的key，在其左子树中查找</strong><br><strong>当key &lt; 查找的key，在其右子树中查找</strong><br><strong>否则返回false</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">//查找递归写法</span><br><span class="line">int BSTreeFind(const BSTreeNode *root, DataType key)</span><br><span class="line">&#123;</span><br><span class="line">if (root == NULL)</span><br><span class="line">&#123;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if (key == root-&gt;key)</span><br><span class="line">&#123;</span><br><span class="line">return 1;</span><br><span class="line">&#125;elseif (root-&gt;key &lt; key)</span><br><span class="line">&#123;</span><br><span class="line">BSTreeFind(root-&gt;right,key);</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">BSTreeFind(root-&gt;left, key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//查找非递归写法</span><br><span class="line">int BSTreeFind2(const BSTreeNode *root,DataType key)</span><br><span class="line">&#123;</span><br><span class="line">BSTreeNode *cur = (BSTreeNode *)root;</span><br><span class="line">while (cur != NULL)</span><br><span class="line">&#123;</span><br><span class="line">if (cur-&gt;key == key)</span><br><span class="line">&#123;</span><br><span class="line">return 1;</span><br><span class="line">&#125;</span><br><span class="line">else if (cur-&gt;key &gt; key)</span><br><span class="line">&#123;</span><br><span class="line">cur = cur-&gt;left;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">cur = cur-&gt;right;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h4><p>在二叉搜索树中插入新元素时，必须先检测该元素是否在树中已经存在。如果已经存在，则不进行插入；否则将新元素加入到搜索停止的地方。</p><p><strong><em>插入具体过程</em></strong>   </p><ol><li>树为空，则直接插入,返回true</li><li>树不空，按二叉搜索树性质查找插入位置，插入新节点<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">//非递归插入写法</span><br><span class="line">int BSTreeInsert(BSTreeNode **root,DataType key)</span><br><span class="line">&#123;</span><br><span class="line">BSTreeNode *cur = *root;</span><br><span class="line">BSTreeNode *parent = NULL;</span><br><span class="line"></span><br><span class="line">//先找到要插入的位置</span><br><span class="line">while (cur != NULL)</span><br><span class="line">&#123;</span><br><span class="line">//先判断是否已存在该元素</span><br><span class="line">if (key == cur-&gt;key)</span><br><span class="line">&#123;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">parent = cur;</span><br><span class="line">if (key&gt;cur-&gt;key)</span><br><span class="line">&#123;</span><br><span class="line">cur = cur-&gt;right;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">cur = cur-&gt;left;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//创建结点</span><br><span class="line">BSTreeNode *node = (BSTreeNode *)malloc(sizeof(BSTreeNode));</span><br><span class="line">node-&gt;key = key;</span><br><span class="line">node-&gt;left = node-&gt;right = NULL;</span><br><span class="line"></span><br><span class="line">//插入元素</span><br><span class="line">if (parent == NULL)</span><br><span class="line">&#123;</span><br><span class="line">*root = node;</span><br><span class="line">return 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if (key&lt;parent-&gt;key)</span><br><span class="line">&#123;</span><br><span class="line">parent-&gt;left = node;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">parent-&gt;right = node;</span><br><span class="line">&#125;</span><br><span class="line">return 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//递归插入写法   </span><br><span class="line">int BSTreeInsert2(BSTreeNode **root, DataType key)</span><br><span class="line">&#123;</span><br><span class="line">if (*root == NULL)</span><br><span class="line">&#123;</span><br><span class="line">BSTreeNode *node = (BSTreeNode *)malloc(sizeof(BSTreeNode));</span><br><span class="line">node-&gt;key = key;</span><br><span class="line">node-&gt;left = node-&gt;right = NULL;</span><br><span class="line">*root = node;</span><br><span class="line">return 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if ((*root)-&gt;key == key)</span><br><span class="line">&#123;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line">if (key &gt;(*root)-&gt;key)</span><br><span class="line">&#123;</span><br><span class="line">return BSTreeInsert2(&amp;(*root)-&gt;right,key);</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">return BSTreeInsert2(&amp;(*root)-&gt;right, key);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><p><strong>首先查找元素是否在二叉搜索树中，如果不存在，则返回, 否则要删除的结点可能分下面四种情况：</strong><br>a. 要删除的结点无孩子结点<br>b. 要删除的结点只有左孩子结点<br>c. 要删除的结点只有右孩子结点<br>d. 要删除的结点有左、右孩子结点<br>==情况1可以归类到2或者3==<br>对于上述情况，相应的删除方法如下：<br>a. 直接删除该结点<br>b. 删除该结点且使被删除节点的双亲结点指向被删除节点的左孩子结点<br>c. 删除该结点且使被删除节点的双亲结点指向被删除结点的右孩子结点<br>d. 在它的右子树中寻找中序下的第一个结点(关键码最小)，用它的值填补到被删除节点中，在来处理该结点的删除问题<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line">void RemoveLeftNULL(BSTreeNode *parent,BSTreeNode *cur, BSTreeNode **root,DataType key)</span><br><span class="line">&#123;</span><br><span class="line">if (parent == NULL)</span><br><span class="line">&#123;</span><br><span class="line">*root = cur-&gt;right;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">if (key &lt; parent-&gt;key)</span><br><span class="line">&#123;</span><br><span class="line">parent-&gt;left = cur-&gt;right;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">parent-&gt;right = cur-&gt;right;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">free(cur);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void RemoveRightNULL(BSTreeNode *parent, BSTreeNode *cur, BSTreeNode **root, DataType key)</span><br><span class="line">&#123;</span><br><span class="line">if (parent == NULL)</span><br><span class="line">&#123;</span><br><span class="line">*root = cur-&gt;left;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">if (key &lt; parent-&gt;key)</span><br><span class="line">&#123;</span><br><span class="line">parent-&gt;left = cur-&gt;left;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">parent-&gt;right = cur-&gt;left;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">free(cur);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static void RemoveHasLeftAndRight(BSTreeNode *cur)</span><br><span class="line">&#123;</span><br><span class="line">BSTreeNode *del = cur-&gt;left;</span><br><span class="line">BSTreeNode *delParent = NULL;</span><br><span class="line">while (del-&gt;right != NULL)</span><br><span class="line">&#123;</span><br><span class="line">delParent = del;</span><br><span class="line">del = del-&gt;right;</span><br><span class="line">&#125;</span><br><span class="line">cur-&gt;key = del-&gt;key;</span><br><span class="line"></span><br><span class="line">//删除del结点</span><br><span class="line">if (delParent == NULL)</span><br><span class="line">&#123;</span><br><span class="line">//左孩子中最大的就是cur的左孩子</span><br><span class="line">cur-&gt;left = del-&gt;left;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">delParent-&gt;right = del-&gt;left;</span><br><span class="line">&#125;</span><br><span class="line">free(del);</span><br><span class="line">&#125;</span><br><span class="line">int BSTreeRemove(BSTreeNode **root,DataType key)</span><br><span class="line">&#123;</span><br><span class="line">BSTreeNode *cur = *root;</span><br><span class="line">BSTreeNode *parent = NULL;</span><br><span class="line"></span><br><span class="line">//先找到要插入的位置</span><br><span class="line">while (cur != NULL)</span><br><span class="line">&#123;</span><br><span class="line">//先判断是否已存在该元素</span><br><span class="line">if (key == cur-&gt;key)</span><br><span class="line">&#123;</span><br><span class="line">if (cur-&gt;left == NULL)</span><br><span class="line">&#123;</span><br><span class="line">RemoveLeftNULL(parent,cur,root,key);</span><br><span class="line">&#125;</span><br><span class="line">else if (cur-&gt;right == NULL)</span><br><span class="line">&#123;</span><br><span class="line">RemoveRightNULL(parent,cur,root,key);</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">RemoveHasLeftAndRight(cur);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">parent = cur;//parent记录当前找到结点</span><br><span class="line">if (key &gt; cur-&gt;key)</span><br><span class="line">&#123;</span><br><span class="line">cur = cur-&gt;right;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">cur = cur-&gt;left;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="二叉搜索树应用"><a href="#二叉搜索树应用" class="headerlink" title="二叉搜索树应用"></a>二叉搜索树应用</h4><ol><li>判断一个单词是否拼写正确</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">typedef struct Word</span><br><span class="line">&#123;</span><br><span class="line">char word[20];</span><br><span class="line">struct  Word *left;</span><br><span class="line">struct Word *right;</span><br><span class="line">&#125;Word;</span><br><span class="line"></span><br><span class="line">//递归查找</span><br><span class="line">int WordFind(Word *root,char word[])</span><br><span class="line">&#123;</span><br><span class="line">const Word *cur = root;</span><br><span class="line">int r;</span><br><span class="line"></span><br><span class="line">while (cur != NULL)</span><br><span class="line">&#123;</span><br><span class="line">r = strncmp(word, cur-&gt;word, 20);</span><br><span class="line">if (r == 0)</span><br><span class="line">&#123;</span><br><span class="line">return 1;</span><br><span class="line">&#125;</span><br><span class="line">else if(r&gt;0)</span><br><span class="line">&#123;</span><br><span class="line">cur = cur-&gt;right;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">cur = cur-&gt;left;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int WordInsert(Word **root,char word[])</span><br><span class="line">&#123;</span><br><span class="line">int r;</span><br><span class="line">if (*root == NULL)</span><br><span class="line">&#123;</span><br><span class="line">Word *node = (Word *)malloc(sizeof(Word));</span><br><span class="line">strncpy(node-&gt;word,word,20);</span><br><span class="line">node-&gt;left = node-&gt;right = NULL;</span><br><span class="line">*root = node;</span><br><span class="line">return 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">r = strncmp(word, (*root)-&gt;word, 20);</span><br><span class="line">// r为0时，此时该word已存在，返回0</span><br><span class="line">if (r == 0)</span><br><span class="line">&#123;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line">// r小于0，此时该word放在左子树，否则放右子树</span><br><span class="line">if (r&lt;0)</span><br><span class="line">&#123;</span><br><span class="line">return WordInsert(&amp;(*root)-&gt;left,word);</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">return WordInsert(&amp;(*root)-&gt;right, word);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void TestWord()</span><br><span class="line">&#123;</span><br><span class="line">Word *dict = NULL;</span><br><span class="line">WordInsert(&amp;dict, &quot;Apple&quot;);</span><br><span class="line">WordInsert(&amp;dict, &quot;Banana&quot;);</span><br><span class="line">WordInsert(&amp;dict, &quot;Orange&quot;);</span><br><span class="line">WordInsert(&amp;dict, &quot;Watermelon&quot;);</span><br><span class="line">WordInsert(&amp;dict, &quot;Pinapple&quot;);</span><br><span class="line">WordInsert(&amp;dict, &quot;Pear&quot;);</span><br><span class="line"></span><br><span class="line">char word[20];</span><br><span class="line"></span><br><span class="line">while (1)</span><br><span class="line">&#123;</span><br><span class="line">scanf(&quot;%s&quot;,word);</span><br><span class="line">if (WordFind(dict,word) == 1)</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;拼写正确\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;拼写错误\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>模拟实现一个简单的字典</li><li>log文件中有许多异常重复的IP地址，请统计出每个异常IP出现了多少<br>次？</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;\assets\js\APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;二叉搜索树概念&quot;&gt;&lt;a href=&quot;#二叉搜索树概念&quot; class=&quot;headerlink&quot; title=&quot;二叉搜索树概念&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="二叉树" scheme="http://yoursite.com/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>面向对象之封装</title>
    <link href="http://yoursite.com/2018/08/29/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%B9%8B%E5%B0%81%E8%A3%85/"/>
    <id>http://yoursite.com/2018/08/29/面向对象之封装/</id>
    <published>2018-08-28T16:03:09.000Z</published>
    <updated>2018-09-02T01:24:02.947Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h4 id="封装概述："><a href="#封装概述：" class="headerlink" title="封装概述："></a>封装概述：</h4><pre><code>封装就是隐藏对象的属性和实现细节，仅对外提供访问方式</code></pre><h4 id="封装的好处："><a href="#封装的好处：" class="headerlink" title="封装的好处："></a>封装的好处：</h4><pre><code>隐藏对象属性和实现细节，提供公共访问方式提高代码的复用性提高了安全性</code></pre><h4 id="封装原则"><a href="#封装原则" class="headerlink" title="封装原则"></a>封装原则</h4><p>  将不需要对外提供的内容隐藏起来<br>  把属性隐藏，提供公共方法对其访问</p><h4 id="关键字的介绍"><a href="#关键字的介绍" class="headerlink" title="关键字的介绍"></a>关键字的介绍</h4><p>   (1) private 关键字 ：</p><pre><code>a：修改属性的可见性来限制对属性的访问特点：是一个修饰符，可以修饰成员变量和成员方法，被修饰的成员只能在本类中被访问</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public class Person &#123;</span><br><span class="line">    private String name;</span><br><span class="line">    private int age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  这段代码中，将 name 和 age 属性设置为私有的，只能本类才能访问，其他类都访问不了，如此就对信息进行了隐藏。</p><pre><code>b： 对每个值属性提供对外的公共方法访问，也就是创建一对赋取值方法，用于对私有属性的访问 </code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public class Person&#123;</span><br><span class="line">    private String name;</span><br><span class="line">    private int age;</span><br><span class="line">​</span><br><span class="line">    public int getAge()&#123;</span><br><span class="line">      return age;</span><br><span class="line">    &#125;</span><br><span class="line">​</span><br><span class="line">    public String getName()&#123;</span><br><span class="line">      return name;</span><br><span class="line">    &#125;</span><br><span class="line">​</span><br><span class="line">    public void setAge(int age)&#123;</span><br><span class="line">      this.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">​</span><br><span class="line">    public void setName(String name)&#123;</span><br><span class="line">      this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>   (2) this 关键字：是为了解决实例变量（private String name）和局部变量（setName(String name)中的name变量）之间发生的同名的冲突。</p><pre><code>特点：代表当前对象的引用</code></pre><p><strong><em>以下是一个java封装实例</em></strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">public class Test&#123;</span><br><span class="line"> </span><br><span class="line">   private String name;</span><br><span class="line">   private String idNum;</span><br><span class="line">   private int age;</span><br><span class="line"> </span><br><span class="line">   public int getAge()&#123;</span><br><span class="line">      return age;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   public String getName()&#123;</span><br><span class="line">      return name;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   public String getIdNum()&#123;</span><br><span class="line">      return idNum;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   public void setAge( int newAge)&#123;</span><br><span class="line">      age = newAge;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   public void setName(String newName)&#123;</span><br><span class="line">      name = newName;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   public void setIdNum( String newId)&#123;</span><br><span class="line">      idNum = newId;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>public方法是外部类访问该类成员变量的入口。</strong></p><p>通常情况下，这些方法被称为getter和setter方法。</p><p><strong><em>因此，任何要访问类中私有成员变量的类都要通过这些getter和setter方法。</em></strong></p><p>通过如下的例子说明Test类的变量怎样被访问：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class RunEncap&#123;</span><br><span class="line">   public static void main(String args[])&#123;</span><br><span class="line">      Test test= new Test();</span><br><span class="line">      test.setName(&quot;James&quot;);</span><br><span class="line">      test.setAge(20);</span><br><span class="line">      test.setIdNum(&quot;12343ms&quot;);</span><br><span class="line"> </span><br><span class="line">      System.out.print(&quot;Name : &quot; + test.getName()+ </span><br><span class="line">                             &quot; Age : &quot;+ test.getAge());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>以上代码编译运行结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Name : James Age : 20</span><br></pre></td></tr></table></figure></p><p><strong><em>本人学习总结所用，如有纰漏错误之处请指正，定虚心学习改正！谢谢。</em></strong></p><p><strong>不为失败找借口，只为成功找方法！！！！</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;\assets\js\APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h4 id=&quot;封装概述：&quot;&gt;&lt;a href=&quot;#封装概述：&quot; class=&quot;headerlink&quot; title=&quot;封装概述：&quot;&gt;&lt;/a&gt;封装概述：&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;
      
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>二叉堆</title>
    <link href="http://yoursite.com/2018/08/28/%E4%BA%8C%E5%8F%89%E5%A0%86/"/>
    <id>http://yoursite.com/2018/08/28/二叉堆/</id>
    <published>2018-08-28T00:44:48.000Z</published>
    <updated>2018-09-03T14:51:32.366Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><a id="more"></a><h4 id="堆的概念"><a href="#堆的概念" class="headerlink" title="堆的概念"></a>堆的概念</h4><ul><li>如果有一个关键码的集合K = {k0，k1， k2，…，kn-1}，把它的所有元<br>素按完全二叉树的顺序存储方式存储在一个一维数组中，并满足：<br>Ki &lt;= K2<em>i+1 且 Ki&lt;= K2</em>i+2 (Ki &gt;= K2<em>i+1 且 Ki &gt;= K2</em>i+2) i = 0，1，2…，则称为小堆(或大堆)。   </li><li><p>小堆(大堆)中：任一结点的关键码均小于(大于)等于它的左右孩子的关键码，位于堆顶结点的关键码最小(最大)，从根节点到每个结点的路径上数组元素组成的序列都是递增(递减)的</p></li><li><p>堆存储在下标为0开始的数组中，因此在堆中给定下标为i的结点时：<br>(1)如果i=0，结点i是根节点，没有双亲节点；否则结点i的双亲结点为结点(i-1)/2<br>(2)如果2 <em> i + 1 &lt;= n - 1，则结点i的左孩子为结点2 </em> i + 1，否则结点i无左孩子<br>(3)如果2 <em> i + 2 &lt;= n - 1，则结点i的右孩子为结点2 </em> i + 2，否则结<br>点i无右孩子</p></li></ul><h4 id="堆的实现"><a href="#堆的实现" class="headerlink" title="堆的实现"></a>堆的实现</h4><p><strong><em>将二叉树调整为最小堆的原理：<br>从最后一个非叶子结点开始调整，一直到根节点为止，将每个结点及其子树调整到满足小堆的性质即可</em></strong></p><h5 id="头文件的定义"><a href="#头文件的定义" class="headerlink" title="头文件的定义"></a>头文件的定义</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#pragma once</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">#define MAX_SIZE 100</span><br><span class="line"></span><br><span class="line">typedef struct Heap&#123;</span><br><span class="line">int array[MAX_SIZE];</span><br><span class="line">int size;</span><br><span class="line">&#125;Heap;</span><br></pre></td></tr></table></figure><h5 id="堆的初始化"><a href="#堆的初始化" class="headerlink" title="堆的初始化"></a>堆的初始化</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">void HeapInit(Heap *pH,int arr[],int size)</span><br><span class="line">&#123;</span><br><span class="line">for (int i = 0; i &lt; pH-&gt;size; i++)</span><br><span class="line">&#123;</span><br><span class="line">pH-&gt;array[i] = arr[i];</span><br><span class="line">&#125;</span><br><span class="line">pH-&gt;size = size;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="堆的创建"><a href="#堆的创建" class="headerlink" title="堆的创建"></a>堆的创建</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">//向下调整</span><br><span class="line">void HeaoAdjustDown(Heap *pH,int root)</span><br><span class="line">&#123;</span><br><span class="line">int parent = root;</span><br><span class="line"></span><br><span class="line">while (1)</span><br><span class="line">&#123;</span><br><span class="line">//当左孩子存在时</span><br><span class="line">int left = parent * 2 + 1;</span><br><span class="line">//判断左孩子是否越界</span><br><span class="line">if (left &gt;= pH-&gt;size)</span><br><span class="line">&#123;</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//当一定有右孩子时</span><br><span class="line">int MaxChild = left;</span><br><span class="line">if (parent*2+2&lt;pH-&gt;size &amp;&amp; pH-&gt;array[parent*2+2]&gt;MaxChild)</span><br><span class="line">&#123;</span><br><span class="line">MaxChild = parent * 2 + 2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if (pH-&gt;array[parent]&gt;pH-&gt;array[MaxChild])</span><br><span class="line">&#123;</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int temp = pH-&gt;array[parent];</span><br><span class="line">pH-&gt;array[parent] = pH-&gt;array[MaxChild];</span><br><span class="line">pH-&gt;array[MaxChild] = temp;</span><br><span class="line"></span><br><span class="line">parent = MaxChild;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//创建堆</span><br><span class="line">void HeapMake(Heap *pH)</span><br><span class="line">&#123;</span><br><span class="line">for (int i = (pH-&gt;size-2)/2; i &gt; 0; i--)</span><br><span class="line">&#123;</span><br><span class="line">HeaoAdjustDown(pH,i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="堆的插入操作"><a href="#堆的插入操作" class="headerlink" title="堆的插入操作"></a>堆的插入操作</h5><p><strong><em>堆的插入：在已经建成的最小堆的后面插入新元素，插入之后，当树中结点不满足堆的性质时，就需要对堆进行重新调整</em></strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//插入</span><br><span class="line">void HeapPush(Heap *pH,int data)</span><br><span class="line">&#123;</span><br><span class="line">assert(pH-&gt;size &lt; MAX_SIZE);</span><br><span class="line">pH-&gt;array[pH-&gt;size++] = data;</span><br><span class="line">HeapAdjustUp(pH, pH-&gt;size - 1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h5 id="堆的插入操作-1"><a href="#堆的插入操作-1" class="headerlink" title="堆的插入操作"></a>堆的插入操作</h5><p><strong><em>堆的删除：删除时每次删除堆顶元素</em></strong><br>具体方法：将最后一个元素顶替堆顶元素，将堆中元素个数减少一个，相当于将堆中最后一个元素删掉，此时堆结构可能破坏，在向下调整使其满足堆的性质<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//删除</span><br><span class="line">void HeapPop(Heap *pH)</span><br><span class="line">&#123;</span><br><span class="line">pH-&gt;array[0] = pH-&gt;array[pH-&gt;size - 1];</span><br><span class="line">pH-&gt;size--;</span><br><span class="line"></span><br><span class="line">HeapAdjustUp(pH, 0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">//升序</span><br><span class="line">void HeapSort(int array[],int size)</span><br><span class="line">&#123;</span><br><span class="line">//建立大堆</span><br><span class="line">for ( int i = (size-2)/2; i &gt; 0;  i--)</span><br><span class="line">&#123;</span><br><span class="line">ArrayAdjustDown(array,size,i);</span><br><span class="line">&#125;</span><br><span class="line">//开始排序</span><br><span class="line">for (int j = 0; j &lt; size; j++)</span><br><span class="line">&#123;</span><br><span class="line">int s = size - 1 - j;</span><br><span class="line">Swap(array, array + s);</span><br><span class="line">ArrayAdjustDown(array, size - 1 - j, 0);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="查找最小-大-的前K个数"><a href="#查找最小-大-的前K个数" class="headerlink" title="查找最小(大)的前K个数"></a>查找最小(大)的前K个数</h4><p><strong><em>100亿个数中找出最小的前K个数（海量数据top K问题）</em></strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">int *TopK(int array[],int size,int k)</span><br><span class="line">&#123;</span><br><span class="line">int *heapArray = (int *)malloc(k * sizeof(int));</span><br><span class="line">assert(heapArray);</span><br><span class="line"></span><br><span class="line">//搬前K个数</span><br><span class="line">for (int i = 0; i &lt; k; i++)</span><br><span class="line">&#123;</span><br><span class="line">heapArray[i] = array[i];</span><br><span class="line">&#125;</span><br><span class="line">//建立堆(大堆)</span><br><span class="line">for ( int j = (k-2)/2; j &gt;= 0; j--)</span><br><span class="line">&#123;</span><br><span class="line">ArrayAdjustDown(heapArray,k,j);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//将第K个与堆中最大元素比较</span><br><span class="line">for (int i = k; i &lt; size; i++)</span><br><span class="line">&#123;</span><br><span class="line">if (array[i] &gt;= heapArray[0])</span><br><span class="line">&#123;</span><br><span class="line">continue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">heapArray[0] = array[i];     //替换堆中最大元素</span><br><span class="line">ArrayAdjustDown(heapArray,k,0);</span><br><span class="line">&#125;</span><br><span class="line">return heapArray;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h5 id="测试部分"><a href="#测试部分" class="headerlink" title="测试部分"></a>测试部分</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">void TestHeap()</span><br><span class="line">&#123;</span><br><span class="line">int array[] = &#123; 53, 17, 78, 9, 45, 65, 87, 23, 31 &#125;;</span><br><span class="line">int size = sizeof(array) / sizeof(int);</span><br><span class="line"></span><br><span class="line">Heapheap;</span><br><span class="line">HeapInit(&amp;heap, array, size);</span><br><span class="line">HeapMake(&amp;heap);</span><br><span class="line"></span><br><span class="line">printf(&quot;建堆完成\n&quot;);</span><br><span class="line"></span><br><span class="line">//查找最小的前K个数</span><br><span class="line">int array[] = &#123; 1,4,9,4,5,2,7,8,5,3,6,6,2,3 &#125;;</span><br><span class="line">int sz = sizeof(array) / sizeof(array[0]);</span><br><span class="line"></span><br><span class="line">int *ret = TopK(array, sz, 10);</span><br><span class="line"></span><br><span class="line">for (int i = 0; i &lt; 10; i++)</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;%d &quot;,ret[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;\assets\js\APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h4 id=&quot;堆的概念&quot;&gt;&lt;a href=&quot;#堆的概念&quot; class=&quot;headerlink&quot; title=&quot;堆的概念&quot;&gt;&lt;/a&gt;堆的概念&lt;/
      
    
    </summary>
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="堆" scheme="http://yoursite.com/tags/%E5%A0%86/"/>
    
  </entry>
  
  <entry>
    <title>面向对象之类以及内部类</title>
    <link href="http://yoursite.com/2018/08/28/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%B9%8B%E5%86%85%E9%83%A8%E7%B1%BB/"/>
    <id>http://yoursite.com/2018/08/28/面向对象之内部类/</id>
    <published>2018-08-28T00:40:24.000Z</published>
    <updated>2018-09-02T01:23:59.515Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h3 id="面向对象之内部类"><a href="#面向对象之内部类" class="headerlink" title="面向对象之内部类"></a>面向对象之内部类</h3><h4 id="类及其常见修饰符"><a href="#类及其常见修饰符" class="headerlink" title="类及其常见修饰符"></a>类及其常见修饰符</h4><ul><li>A：修饰符<br>权限修饰符  private 默认的，protected，public<br>状态修饰符  static，final<br>抽象修饰符  abstract</li><li>B：类<br>权限修饰符  默认的，public<br>状态修饰符  final<br>抽象修饰符  abstract</li><li>C：成员变量<br>权限修饰符  private 默认的，protected，public<br>状态修饰符  static，final</li><li>D：构造方法<br>权限修饰符  private 默认的，protected，public</li><li>E：成员方法：<br>  权限修饰符：private，默认的，protected，public<br>  状态修饰符：static，final<br>  抽象修饰符：abstract    </li><li>F：除此以外的组合规则：<ul><li>成员变量：public static final</li><li>成员方法：<ul><li>public static </li><li>public abstract</li><li>public final<br>内部类访问特点<br>a:内部类可以直接访问外部类的成员，包括私有。<br>b:外部类要访问内部类的成员，必须创建对象。<br>外部类名.内部类名 对象名 = 外部类对象.内部类对象;<br>案例演示<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">public class test &#123;</span><br><span class="line"> </span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">Outer.Inner  io = new Outer().new Inner();</span><br><span class="line">io.print();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">class Outer&#123;</span><br><span class="line">public int num = 10;</span><br><span class="line">public class Inner&#123;</span><br><span class="line">public int num = 20;</span><br><span class="line">public void print() &#123;</span><br><span class="line">int num = 30;</span><br><span class="line">System.out.println(num);</span><br><span class="line">System.out.println(this.num);</span><br><span class="line">System.out.println(Outer.this.num);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output：</span><br><span class="line">30</span><br><span class="line">20</span><br><span class="line">10</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h4 id="静态类及其方法访问"><a href="#静态类及其方法访问" class="headerlink" title="静态类及其方法访问"></a>静态类及其方法访问</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">public class test2 &#123;</span><br><span class="line"> </span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">Outer.Inner oi = new Outer.Inner();</span><br><span class="line">oi.method();</span><br><span class="line">Outer.Inner2.method2();//静态方法调用</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">class Outer&#123;</span><br><span class="line">static class Inner&#123;</span><br><span class="line">public void method() &#123;</span><br><span class="line">System.out.println(&quot;method&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">static class Inner2&#123;</span><br><span class="line">public static void method2() &#123;</span><br><span class="line">System.out.println(&quot;method2&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="私有类及其访问特点"><a href="#私有类及其访问特点" class="headerlink" title="私有类及其访问特点"></a>私有类及其访问特点</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public class test1 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">Outer oi = new Outer();</span><br><span class="line">oi.print();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">class Outer&#123;</span><br><span class="line">private int num = 30;</span><br><span class="line">private class Inner&#123;</span><br><span class="line">private int num = 20;</span><br><span class="line">private void method() &#123;</span><br><span class="line">System.out.println(num);   //20</span><br><span class="line">System.out.println(Outer.this.num);  //30</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">public void print() &#123;</span><br><span class="line">Inner inner = new Inner();</span><br><span class="line">inner.method();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>匿名类<br>。。。未完待续</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;\assets\js\APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h3 id=&quot;面向对象之内部类&quot;&gt;&lt;a href=&quot;#面向对象之内部类&quot; class=&quot;headerlink&quot; title=&quot;面向对象之内部类&quot;&gt;&lt;/a&gt;面向对象之内部类&lt;/h3
      
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>二叉树基本操作下</title>
    <link href="http://yoursite.com/2018/08/26/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%E4%B8%8B/"/>
    <id>http://yoursite.com/2018/08/26/二叉树基本操作下/</id>
    <published>2018-08-26T13:43:52.000Z</published>
    <updated>2018-09-02T01:24:09.691Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h3 id="二叉树进阶"><a href="#二叉树进阶" class="headerlink" title="二叉树进阶"></a>二叉树进阶</h3><h4 id="将三种递归遍历改写成非递归遍历形式"><a href="#将三种递归遍历改写成非递归遍历形式" class="headerlink" title="将三种递归遍历改写成非递归遍历形式"></a>将三种递归遍历改写成非递归遍历形式</h4><p><strong>头文件引用</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#pragma once</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">二叉树的遍历非递归、层序遍历、是否是完全二叉树</span><br><span class="line">*/</span><br><span class="line">#include &quot;BTree.h&quot;</span><br><span class="line">#include &quot;Stack.h&quot;   //递归遍历用stack完成</span><br><span class="line">#include &quot;Queue.h&quot;  //层序遍历用queue完成</span><br></pre></td></tr></table></figure></p><p><strong>先序遍历</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">void preOrderTraverse(BTreeNode *root)</span><br><span class="line">&#123;</span><br><span class="line">BTreeNode *cur = root;</span><br><span class="line">BTreeNode *top = NULL;</span><br><span class="line">Stack stack;</span><br><span class="line">StackInit(&amp;stack);</span><br><span class="line">while (cur != NULL || !StackEmpty(&amp;stack))</span><br><span class="line">&#123;</span><br><span class="line">while (cur != NULL)</span><br><span class="line">&#123;</span><br><span class="line">StackPush(&amp;stack, cur);</span><br><span class="line">printf(&quot;%d &quot;, cur-&gt;data);</span><br><span class="line">cur = cur-&gt;LeftChild;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">top = StackTop(&amp;stack);</span><br><span class="line">StackPop(&amp;stack);</span><br><span class="line">cur = top-&gt;RightChild;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>中序遍历</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">void inOrderTraverse(BTreeNode *root)</span><br><span class="line">&#123;</span><br><span class="line">BTreeNode *cur = root;</span><br><span class="line">BTreeNode *top;</span><br><span class="line">Stack stack;</span><br><span class="line">StackInit(&amp;stack);</span><br><span class="line">while (cur != NULL || !StackEmpty(&amp;stack))</span><br><span class="line">&#123;</span><br><span class="line">while (cur!=NULL)</span><br><span class="line">&#123;</span><br><span class="line">StackPush(&amp;stack, cur);</span><br><span class="line">cur = cur-&gt;LeftChild;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">top = StackTop(&amp;stack);</span><br><span class="line">printf(&quot;%d &quot;,top-&gt;data);</span><br><span class="line">StackPop(&amp;stack);</span><br><span class="line">cur = top-&gt;RightChild;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>后序遍历</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">void lastOrderTraverse(BTreeNode *root)</span><br><span class="line">&#123;</span><br><span class="line">BTreeNode *cur = root;</span><br><span class="line">BTreeNode *top,*last = NULL;</span><br><span class="line">Stack stack;</span><br><span class="line">StackInit(&amp;stack);</span><br><span class="line">while (cur != NULL || !StackEmpty(&amp;stack))</span><br><span class="line">&#123;</span><br><span class="line">while (cur != NULL)</span><br><span class="line">&#123;</span><br><span class="line">StackPush(&amp;stack, cur);</span><br><span class="line">cur = cur-&gt;LeftChild;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">top = StackTop(&amp;stack);</span><br><span class="line">if (top-&gt;RightChild == NULL || top-&gt;RightChild == last)</span><br><span class="line">&#123;</span><br><span class="line">//判断右子树是否遍历过</span><br><span class="line">StackPop(&amp;stack);</span><br><span class="line">printf(&quot;%d &quot;, top-&gt;data);</span><br><span class="line">last = top;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">cur = top-&gt;RightChild;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>层序遍历非递归算法</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">//层序遍历</span><br><span class="line">void LevelTraverse(BTreeNode *root)</span><br><span class="line">&#123;</span><br><span class="line">Queue queue;</span><br><span class="line">QueueInit(&amp;queue);</span><br><span class="line">BTreeNode *pre;</span><br><span class="line"></span><br><span class="line">if (root == NULL)</span><br><span class="line">&#123;</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">QueuePush(&amp;queue,root); //存放结点地址，不是结点</span><br><span class="line">while (!QueueEmpty(&amp;queue))</span><br><span class="line">&#123;</span><br><span class="line">pre = QueueFront(&amp;queue);</span><br><span class="line">QueuePop(&amp;queue);</span><br><span class="line"></span><br><span class="line">if (pre-&gt;LeftChild != NULL)</span><br><span class="line">&#123;</span><br><span class="line">QueuePush(&amp;queue, pre-&gt;LeftChild);</span><br><span class="line">&#125;</span><br><span class="line">if (pre-&gt;RightChild != NULL)</span><br><span class="line">&#123;</span><br><span class="line">QueuePush(&amp;queue, pre-&gt;RightChild);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">printf(&quot;%d &quot;, pre-&gt;data);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="二叉树的其他操作"><a href="#二叉树的其他操作" class="headerlink" title="二叉树的其他操作"></a>二叉树的其他操作</h4><p>1.判断一棵树是不是完全二叉树<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">//判断一棵树是不是完全二叉树</span><br><span class="line">int IsCompleteBTree(BTreeNode *root)</span><br><span class="line">&#123;</span><br><span class="line">Queue queue;</span><br><span class="line">QueueInit(&amp;queue);</span><br><span class="line">BTreeNode *pre;</span><br><span class="line">//这里和层序遍历的区别：pre 可能是NULL</span><br><span class="line">if (root == NULL)</span><br><span class="line">&#123;</span><br><span class="line">//如果是完全二叉树，剩下的结点应该全是NULL</span><br><span class="line">return 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">QueuePush(&amp;queue, root);</span><br><span class="line">while (!QueueEmpty(&amp;queue))</span><br><span class="line">&#123;</span><br><span class="line">pre = QueueFront(&amp;queue);</span><br><span class="line">QueuePop(&amp;queue);</span><br><span class="line">if (pre == NULL)</span><br><span class="line">&#123;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">QueuePush(&amp;queue, pre-&gt;LeftChild);</span><br><span class="line">QueuePush(&amp;queue, pre-&gt;RightChild);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//队列剩余结点是否都是NULL</span><br><span class="line">//判定队列为空 </span><br><span class="line">while (!QueueEmpty(&amp;queue))</span><br><span class="line">&#123;</span><br><span class="line">pre = QueueFront(&amp;queue);</span><br><span class="line">QueuePop(&amp;queue);</span><br><span class="line">if (pre != NULL)</span><br><span class="line">&#123;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>2.求二叉树的镜像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">//求镜像 递归写法</span><br><span class="line">void Mirror(BTreeNode *root)</span><br><span class="line">&#123;</span><br><span class="line">if (root == NULL)</span><br><span class="line">&#123;</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Mirror(root-&gt;LeftChild);</span><br><span class="line">Mirror(root-&gt;RightChild);</span><br><span class="line"></span><br><span class="line">BTreeNode *t = root-&gt;LeftChild;</span><br><span class="line">root-&gt;LeftChild = root-&gt;RightChild;</span><br><span class="line">root-&gt;RightChild = t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//非递归写法</span><br><span class="line"></span><br><span class="line">void Mirror2(BTreeNode *root)</span><br><span class="line">&#123;</span><br><span class="line">BTreeNode *cur = root;</span><br><span class="line">BTreeNode *top, *last = NULL;</span><br><span class="line">Stack stack;</span><br><span class="line">StackInit(&amp;stack);</span><br><span class="line">while (cur != NULL || !StackEmpty(&amp;stack))</span><br><span class="line">&#123;</span><br><span class="line">while (cur != NULL)</span><br><span class="line">&#123;</span><br><span class="line">StackPush(&amp;stack, cur);</span><br><span class="line">cur = cur-&gt;LeftChild;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//top的左子树已经遍历过了</span><br><span class="line">top = StackTop(&amp;stack);</span><br><span class="line">if (top-&gt;RightChild == NULL || top-&gt;RightChild == last)</span><br><span class="line">&#123;</span><br><span class="line">//判断右子树是否遍历过</span><br><span class="line"></span><br><span class="line">BTreeNode *t = top-&gt;LeftChild;</span><br><span class="line">top-&gt;LeftChild = top-&gt;RightChild;</span><br><span class="line">top-&gt;RightChild = t;</span><br><span class="line"></span><br><span class="line">//记录这个被遍历的结点</span><br><span class="line">last = top;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">cur = top-&gt;RightChild;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.有前序遍历和中序遍历重建二叉树(前序遍历结果：1,2,3,4,5,6 ;中序遍历结果：4, 2, 5, 1, 6, 3)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">BTreeNode* CreateTree(int preOrder[],int inOrder[],int size)</span><br><span class="line">&#123;</span><br><span class="line">if (size &lt;= 0)</span><br><span class="line">&#123;</span><br><span class="line">return NULL;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int rootValue = preOrder[0];</span><br><span class="line"></span><br><span class="line">int rootIndexInOrder = -1;</span><br><span class="line">for (int i = 0; i &lt; size; i++)</span><br><span class="line">&#123;</span><br><span class="line">if (inOrder[i] == rootValue)</span><br><span class="line">&#123;</span><br><span class="line">rootIndexInOrder = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">assert(rootIndexInOrder != -1);</span><br><span class="line"></span><br><span class="line">BTreeNode *root = CreateNode(rootValue);</span><br><span class="line">root-&gt;LeftChild = CreateTree(preOrder+1,inOrder,rootIndexInOrder);</span><br><span class="line">root-&gt;RightChild = CreateTree(preOrder + 1 + rootIndexInOrder, </span><br><span class="line">inOrder + 1 + rootIndexInOrder, size - 1 - rootIndexInOrder);</span><br><span class="line"></span><br><span class="line">return root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>4.测试<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">//测试</span><br><span class="line">void TestBTree()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">int arr[] = &#123; 1, 2, 3, -1, 4, 5, -1, -1, -1, 6, -1, -1, 7, 8, -1, -1, 9, -1, 10 &#125;;</span><br><span class="line">int size = sizeof(arr) / sizeof(arr[0]);</span><br><span class="line">int pUsedSize;</span><br><span class="line"></span><br><span class="line">BTreeNode *root = CreateBTree(arr, size, &amp;pUsedSize);</span><br><span class="line"></span><br><span class="line">preOrderTraverse(root);</span><br><span class="line">printf(&quot;\n&quot;);</span><br><span class="line">inOrderTraverse(root);</span><br><span class="line">printf(&quot;\n&quot;);</span><br><span class="line">lastOrderTraverse(root);</span><br><span class="line">printf(&quot;\n&quot;);</span><br><span class="line"></span><br><span class="line">LevelTraverse(root);</span><br><span class="line">printf(&quot;\n&quot;);</span><br><span class="line"></span><br><span class="line">IsCompleteBTree(root) == 1 ? printf(&quot;是完全二叉树\n&quot;): printf(&quot;是完全二叉树\n&quot;);</span><br><span class="line"></span><br><span class="line">Mirror(root);</span><br><span class="line"></span><br><span class="line">//二叉树重建测试</span><br><span class="line">int preOrder[] = &#123; 1,2,3,4,5,6,7 &#125;;</span><br><span class="line">int inOrder[] = &#123; 2,1,4,6,7,5,3 &#125;;</span><br><span class="line">int size = sizeof(preOrder) / sizeof(int);</span><br><span class="line">BTreeNode * root = CreateTree(preOrder,inOrder,size);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;\assets\js\APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h3 id=&quot;二叉树进阶&quot;&gt;&lt;a href=&quot;#二叉树进阶&quot; class=&quot;headerlink&quot; title=&quot;二叉树进阶&quot;&gt;&lt;/a&gt;二叉树进阶&lt;/h3&gt;&lt;h4 id=&quot;将三种
      
    
    </summary>
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="二叉树" scheme="http://yoursite.com/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>二叉树基本操作上</title>
    <link href="http://yoursite.com/2018/08/25/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%E4%B8%8A/"/>
    <id>http://yoursite.com/2018/08/25/二叉树基本操作上/</id>
    <published>2018-08-25T00:26:19.000Z</published>
    <updated>2018-09-02T01:24:12.995Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h3 id="二叉树的概念"><a href="#二叉树的概念" class="headerlink" title="二叉树的概念"></a>二叉树的概念</h3><p>一棵二叉树是结点的一个有限集合，该集合或者为空，或者是由一个根节点加上两棵分别称为左子树和右子树的二叉树组成<br><strong>二叉树特点</strong>：</p><ul><li>每个结点最多有两棵子树，即二叉树不存在度大于2的结点</li><li>二叉树的子树有左右之分，其子树的次序不能颠倒   </li></ul><p>因此：二叉树是通过上述形式的组合或嵌套而形成   </p><h3 id="满二叉树-amp-完全二叉树"><a href="#满二叉树-amp-完全二叉树" class="headerlink" title="满二叉树&amp;完全二叉树"></a>满二叉树&amp;完全二叉树</h3><ul><li>满二叉树：在一棵二叉树中，如果所有分支结点都存在左子树和右子树，并且所有叶子节点都在同一层上</li><li>完全二叉树：如果一棵具有N个结点的二叉树的结构与满二叉树的前N个结点的结构相同，称为完全二叉树</li></ul><h3 id="二叉树的性质"><a href="#二叉树的性质" class="headerlink" title="二叉树的性质"></a>二叉树的性质</h3><ul><li>若规定根节点的层数为1，则一棵非空二叉树的第i层上最多有<br>(i&gt;0)个结点</li><li>若规定只有根节点的二叉树的深度为1，则深* 度为K的二叉树的最大<br>结点数是(k&gt;=0)</li><li>对任何一棵二叉树, 如果其叶结点个数为 n0, 度为2的非叶结点个数<br>为 n2,则有n0＝n2＋1</li><li>具有n个结点的完全二叉树的深度k为上取整<br>对于具有n个结点的完全二叉树，如果按照从上至下从左至右的顺序</li><li>对所有节点从0开始编号，则对于序号为i的结点有：<br>  1.若i&gt;0，双亲序号：(i-1)/2；<br>  i=0，i为根节点编号，无双亲结点<br>  2.若2i+1<n,左孩子序号：2i+1,否则无左孩子 3.若2i+1="">n,右孩子序号：2i+1,否则无右孩子</n,左孩子序号：2i+1,否则无左孩子></li></ul><h3 id="二叉树的存储结构"><a href="#二叉树的存储结构" class="headerlink" title="二叉树的存储结构"></a>二叉树的存储结构</h3><p><strong>二叉树主要有顺序存储和链式存储结构</strong></p><ul><li>顺序存储结构<br>对于一棵完全二叉树所有结点按照层序自顶向下，同一层自左向右顺<br>序编号，就得到一个节点的顺序序列<br>1.优点：存储完全二叉树，简单省空间<br>2.缺点：存储一般二叉树尤其单支树，存储空间利用不高</li><li>链式存储<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">struct BinTreeNode</span><br><span class="line">&#123;</span><br><span class="line">struct BinTreeNode* _pLeft; // 当前节点左孩子</span><br><span class="line">struct BinTreeNode* _pRight; // 当前节点右孩子</span><br><span class="line">DataType _data; // 当前节点值域</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><h3 id="二叉树基本操作"><a href="#二叉树基本操作" class="headerlink" title="二叉树基本操作"></a>二叉树基本操作</h3><h4 id="二叉树的创建"><a href="#二叉树的创建" class="headerlink" title="二叉树的创建"></a>二叉树的创建</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">typedef int DataType;</span><br><span class="line"></span><br><span class="line">typedef struct BTreeNode</span><br><span class="line">&#123;</span><br><span class="line">DataType data;</span><br><span class="line">struct BTreeNode *LeftChild;</span><br><span class="line">struct BTreeNode *RightChild;</span><br><span class="line">&#125; BTreeNode;</span><br><span class="line"></span><br><span class="line">//二叉树的初始化</span><br><span class="line">void BTreeInit(BTreeNode *root)</span><br><span class="line">&#123;</span><br><span class="line">root-&gt;data = 0;</span><br><span class="line">root = NULL;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//创建结点</span><br><span class="line">BTreeNode * CreateNode(DataType data)</span><br><span class="line">&#123;</span><br><span class="line">BTreeNode *node = (BTreeNode *)malloc(sizeof(BTreeNode));</span><br><span class="line">node-&gt;data = data;</span><br><span class="line">node-&gt;LeftChild = node-&gt;RightChild = NULL;</span><br><span class="line"></span><br><span class="line">return node;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//创建二叉树</span><br><span class="line">BTreeNode * CreateBTree( int arr[],int size,int *pUsedSize)</span><br><span class="line">&#123;</span><br><span class="line">if (size &lt;= 0)</span><br><span class="line">&#123;</span><br><span class="line">*pUsedSize = 0;</span><br><span class="line">return NULL;</span><br><span class="line">&#125;</span><br><span class="line">int leftUse, rightUse;</span><br><span class="line">int data = arr[0];</span><br><span class="line">if (data == -1)</span><br><span class="line">&#123;</span><br><span class="line">*pUsedSize = 1;</span><br><span class="line">return NULL;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BTreeNode *root = CreateNode(data);</span><br><span class="line"></span><br><span class="line">root-&gt;LeftChild = CreateBTree(arr + 1,size - 1,&amp;leftUse);</span><br><span class="line">root-&gt;RightChild = CreateBTree(arr + 1+leftUse, size - leftUse - 1,&amp;rightUse);</span><br><span class="line"></span><br><span class="line">*pUsedSize = leftUse + rightUse + 1;</span><br><span class="line"></span><br><span class="line">return root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="二叉树的遍历"><a href="#二叉树的遍历" class="headerlink" title="二叉树的遍历"></a>二叉树的遍历</h4><p>遵循某种次序，遍历二叉树中的所有节点，使得每个结点被访问一次，而且仅访问一次。“访问”：即对结点施行某些操作。<br>若规定VLR分别代表：遍历根节点、遍历根节点的左子树、遍历根节点的右子树，则有：<br>前序：VLR<br>中序：LVR<br>后序：LRV<br><strong>前序遍历递归算法</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//先序遍历</span><br><span class="line">void PreOrderTraverse(BTreeNode *root)</span><br><span class="line">&#123;</span><br><span class="line">if (root == NULL)</span><br><span class="line">&#123;</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">printf(&quot;%d &quot;,root-&gt;data);</span><br><span class="line">PreOrderTraverse(root-&gt;LeftChild);</span><br><span class="line">PreOrderTraverse(root-&gt;RightChild);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>中序遍历递归算法</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//中序遍历</span><br><span class="line">void InOrderTraverse(BTreeNode *root)</span><br><span class="line">&#123;</span><br><span class="line">if (root == NULL)</span><br><span class="line">&#123;</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">InOrderTraverse(root-&gt;LeftChild);</span><br><span class="line">printf(&quot;%d &quot;, root-&gt;data);</span><br><span class="line">InOrderTraverse(root-&gt;RightChild);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>后序遍历递归算法</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//后序遍历</span><br><span class="line">void  LastOrderTraverse(BTreeNode *root)</span><br><span class="line">&#123;</span><br><span class="line">if (root == NULL)</span><br><span class="line">&#123;</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">LastOrderTraverse(root-&gt;LeftChild);</span><br><span class="line">LastOrderTraverse(root-&gt;RightChild);</span><br><span class="line">printf(&quot;%d &quot;, root-&gt;data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="二叉树的其他操作："><a href="#二叉树的其他操作：" class="headerlink" title="二叉树的其他操作："></a>二叉树的其他操作：</h4><p>　1. 求二叉树的高度<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#define MAX(a,b) ((a)&gt;(b)?(a):(b))</span><br><span class="line">int GetHight(BTreeNode *root)</span><br><span class="line">&#123;</span><br><span class="line">if (root ==NULL)</span><br><span class="line">&#123;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return MAX(GetHight(root-&gt;LeftChild) ,GetHight(root-&gt;RightChild)) + 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>　2. 求二叉树叶子结点的个数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">int GetLeafNum(BTreeNode *root)</span><br><span class="line">&#123;</span><br><span class="line">if (root == NULL)</span><br><span class="line">&#123;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">if (root-&gt;LeftChild == NULL &amp;&amp; root-&gt;RightChild == NULL)</span><br><span class="line">&#123;</span><br><span class="line">return 1;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">return GetLeafNum(root-&gt;LeftChild) + GetLeafNum(root-&gt;RightChild);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>　3. 求二叉树结点的个数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">//方法一</span><br><span class="line">int count;</span><br><span class="line">int GetNodeNum(BTreeNode *root)</span><br><span class="line">&#123;</span><br><span class="line">if (root == NULL)</span><br><span class="line">&#123;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line">GetNodeNum(root-&gt;LeftChild);</span><br><span class="line">GetNodeNum(root-&gt;RightChild);</span><br><span class="line">count++;</span><br><span class="line">return count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//方法二</span><br><span class="line">int GetNodeNum2(BTreeNode *root)</span><br><span class="line">&#123;</span><br><span class="line">if (root == NULL)</span><br><span class="line">&#123;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line">int left = GetNodeNum2(root-&gt;LeftChild);</span><br><span class="line">int right = GetNodeNum2(root-&gt;RightChild);</span><br><span class="line"></span><br><span class="line">return left + right + 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ol><li>求二叉树第K层结点的个数   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">int GetLevelKNum(BTreeNode *root,DataType k)</span><br><span class="line">&#123;</span><br><span class="line">assert(k&gt;=1);</span><br><span class="line"></span><br><span class="line">if (root == NULL)</span><br><span class="line">&#123;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line">if (k == 1)</span><br><span class="line">&#123;</span><br><span class="line">return 1;</span><br><span class="line">&#125;</span><br><span class="line">DataType left = GetLevelKNum(root-&gt;LeftChild, k-1);</span><br><span class="line">DataType right = GetLevelKNum(root-&gt;RightChild, k-1);</span><br><span class="line"></span><br><span class="line">return left + right;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>　5. 判断一个节点是否在一棵二叉树中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">BTreeNode * FindNode(BTreeNode *root,DataType data)</span><br><span class="line">&#123;</span><br><span class="line">if (root == NULL)</span><br><span class="line">&#123;</span><br><span class="line">return NULL;</span><br><span class="line">&#125;</span><br><span class="line">if (root-&gt;data == data)</span><br><span class="line">&#123;</span><br><span class="line">return root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BTreeNode *result1 = FindNode(root-&gt;LeftChild,data);</span><br><span class="line">BTreeNode *result2 = FindNode(root-&gt;LeftChild, data);</span><br><span class="line"></span><br><span class="line">return result1 == NULL ? result1 : result2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;\assets\js\APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h3 id=&quot;二叉树的概念&quot;&gt;&lt;a href=&quot;#二叉树的概念&quot; class=&quot;headerlink&quot; title=&quot;二叉树的概念&quot;&gt;&lt;/a&gt;二叉树的概念&lt;/h3&gt;&lt;p&gt;一棵二叉
      
    
    </summary>
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="二叉树" scheme="http://yoursite.com/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>复杂链表的复制</title>
    <link href="http://yoursite.com/2018/08/24/%E5%A4%8D%E6%9D%82%E9%93%BE%E8%A1%A8%E7%9A%84%E5%A4%8D%E5%88%B6/"/>
    <id>http://yoursite.com/2018/08/24/复杂链表的复制/</id>
    <published>2018-08-24T00:46:06.000Z</published>
    <updated>2018-09-02T01:24:06.351Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h3 id="复制链表的复制"><a href="#复制链表的复制" class="headerlink" title="复制链表的复制"></a>复制链表的复制</h3><p>在复杂链表中，每个结点除了有一个next指针指向下一个结点之外，还有一个random指向链表中的任意结点或者NULL。<br><a id="more"></a><br>结点定义如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">typedef struct Link_C&#123;</span><br><span class="line">int data;</span><br><span class="line">struct Link_C *next;</span><br><span class="line">    struct Link_C *random;</span><br><span class="line"></span><br><span class="line">&#125;Link_C;</span><br></pre></td></tr></table></figure></p><p>思路：（我们分三步骤）   </p><ul><li>第一步：复制结点，将新结点连接在原结点后</li><li>第二步：复制random</li><li>第三步：拆分新旧结点</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">typedef int DataType;</span><br><span class="line"></span><br><span class="line">typedef struct Link_C&#123;</span><br><span class="line">int data;</span><br><span class="line">struct Link_C *next;</span><br><span class="line">    struct Link_C *random;</span><br><span class="line"></span><br><span class="line">&#125;Link_C;</span><br><span class="line"></span><br><span class="line">static Link_C * linkCreateNode(DataType data)</span><br><span class="line">&#123;</span><br><span class="line">Link_C *node = (Link_C *)malloc(sizeof(Link_C));</span><br><span class="line">node-&gt;data = data;</span><br><span class="line">node-&gt;next = NULL;</span><br><span class="line">node-&gt;random = NULL;</span><br><span class="line"></span><br><span class="line">return node;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Link_C * LinkCopy(Link_C *head)</span><br><span class="line">&#123;</span><br><span class="line">//第一步，复制结点</span><br><span class="line">Link_C *cur = head;</span><br><span class="line">Link_C *newNode;</span><br><span class="line">Link_C *newLink;</span><br><span class="line">Link_C *pre;</span><br><span class="line">while (cur != NULL)</span><br><span class="line">&#123;</span><br><span class="line">newNode = linkCreateNode(cur-&gt;data);</span><br><span class="line">newNode-&gt;next = cur-&gt;next;</span><br><span class="line">cur-&gt;next = newNode;</span><br><span class="line"></span><br><span class="line">cur = cur-&gt;next-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//第二步，复制random</span><br><span class="line"></span><br><span class="line">cur = head;</span><br><span class="line">while (cur != NULL)</span><br><span class="line">&#123;</span><br><span class="line">if (cur-&gt;random != NULL)</span><br><span class="line">&#123;</span><br><span class="line">cur-&gt;next-&gt;random = cur-&gt;random-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">cur = cur-&gt;next-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//第三步，新旧链表拆开</span><br><span class="line">cur = head;</span><br><span class="line">newLink = cur-&gt;next;</span><br><span class="line">while ( cur != NULL)</span><br><span class="line">&#123;</span><br><span class="line">pre = cur-&gt;next;</span><br><span class="line"></span><br><span class="line">cur-&gt;next = pre-&gt;next;</span><br><span class="line">if (cur-&gt;next != NULL)</span><br><span class="line">&#123;</span><br><span class="line">pre-&gt;next = cur-&gt;next-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">pre-&gt;next = NULL;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cur = cur-&gt;next;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return newLink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为测试方便查看写了打印<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">void Print(Link_C *head)</span><br><span class="line">&#123;</span><br><span class="line">Link_C *node = head;</span><br><span class="line">while (node != NULL)</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;[%d  random(%p)-&gt;%d ] \n&quot;,</span><br><span class="line">node-&gt;data,</span><br><span class="line">node-&gt;random,</span><br><span class="line">node-&gt;random ? node-&gt;random-&gt;data:0);</span><br><span class="line"></span><br><span class="line">node = node-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">printf(&quot;\n&quot;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>以下为测试部分<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">oid TestCopy()</span><br><span class="line">&#123;</span><br><span class="line">Link_C *n1 = linkCreateNode(1);</span><br><span class="line">Link_C *n2 = linkCreateNode(2);</span><br><span class="line">Link_C *n3 = linkCreateNode(3);</span><br><span class="line">Link_C *n4 = linkCreateNode(4);</span><br><span class="line">Link_C *n5 = linkCreateNode(5);</span><br><span class="line">Link_C *n6 = linkCreateNode(6);</span><br><span class="line"></span><br><span class="line">Link_C *result;</span><br><span class="line"></span><br><span class="line">n1-&gt;next = n2;</span><br><span class="line">n2-&gt;next = n3;</span><br><span class="line">n3-&gt;next = n4;</span><br><span class="line">n4-&gt;next = n5;</span><br><span class="line">n5-&gt;next = n6;</span><br><span class="line"></span><br><span class="line">n1-&gt;random = n3;</span><br><span class="line">n2-&gt;random = n6;</span><br><span class="line">n3-&gt;random = n3;</span><br><span class="line">n4-&gt;random = n4;</span><br><span class="line">n5-&gt;random = n2;</span><br><span class="line"></span><br><span class="line">Print(n1);</span><br><span class="line"></span><br><span class="line">printf(&quot;\n----------------\n&quot;);</span><br><span class="line">result = LinkCopy(n1);</span><br><span class="line">Print(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>测试结果就不在这里赘述了，有兴趣的伙伴可以自己尝试</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;复制链表的复制&quot;&gt;&lt;a href=&quot;#复制链表的复制&quot; class=&quot;headerlink&quot; title=&quot;复制链表的复制&quot;&gt;&lt;/a&gt;复制链表的复制&lt;/h3&gt;&lt;p&gt;在复杂链表中，每个结点除了有一个next指针指向下一个结点之外，还有一个random指向链表中的任意结点或者NULL。&lt;br&gt;
    
    </summary>
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="链表" scheme="http://yoursite.com/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>判断元素出栈入栈合法性</title>
    <link href="http://yoursite.com/2018/08/23/%E5%88%A4%E6%96%AD%E5%85%83%E7%B4%A0%E5%87%BA%E6%A0%88%E5%85%A5%E6%A0%88%E5%90%88%E6%B3%95%E6%80%A7/"/>
    <id>http://yoursite.com/2018/08/23/判断元素出栈入栈合法性/</id>
    <published>2018-08-23T08:27:33.000Z</published>
    <updated>2018-09-02T01:23:56.194Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h3 id="判断元素入栈出栈的合法性"><a href="#判断元素入栈出栈的合法性" class="headerlink" title="判断元素入栈出栈的合法性"></a>判断元素入栈出栈的合法性</h3><p>一般来说，这种判断性的问题会出现在一些面试题目的选择题中，当然学习了栈之后，我们就要有解决这种问题的能力。<br><strong>思路：</strong> 判断元素是否相同，相同就进行下一个元素比较，当栈不为空并且栈顶元素和输出的栈元素相同，则将该元素出栈并指向输出元素的下一个，否则就将该元素进栈，并指向比较的元素的下一个 ，直到所有元素比较完<br>然后按出栈顺序进行比较，当栈不为空时，将栈顶元素与当前元素进行比较，不相同直接返回，则判断出栈元素不合法，否则将该元素出栈，并指向下一个元素；</p><p><strong>创建一个Valid.h的文件，在这里我们引入了stack.h文件</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">#pragma once</span><br><span class="line"></span><br><span class="line">#include &quot;Stack.h&quot;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line"></span><br><span class="line">int Valid(char in[], char out[],int size)</span><br><span class="line">&#123;</span><br><span class="line">int ii = 0;</span><br><span class="line">int io = 0;</span><br><span class="line">Stack stack;</span><br><span class="line">StackInit(&amp;stack);</span><br><span class="line"></span><br><span class="line">while (ii &lt; size)</span><br><span class="line">&#123;</span><br><span class="line">if (in[ii] == out[io])</span><br><span class="line">&#123;</span><br><span class="line">ii++;</span><br><span class="line">io++;</span><br><span class="line">&#125;</span><br><span class="line">else if (!StackEmpty(&amp;stack) &amp;&amp; StackTop(&amp;stack) == out[io])</span><br><span class="line">&#123;</span><br><span class="line">StackPop(&amp;stack);</span><br><span class="line">io++;</span><br><span class="line">&#125;</span><br><span class="line">else </span><br><span class="line">&#123;</span><br><span class="line">StackPush(&amp;stack,in[ii]);</span><br><span class="line">ii++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">while (!StackEmpty(&amp;stack))</span><br><span class="line">&#123;</span><br><span class="line">if (StackTop(&amp;stack) == out[io])</span><br><span class="line">&#123;</span><br><span class="line">StackPop(&amp;stack);</span><br><span class="line">io++;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line">return 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>接下来我们进行测试</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">void TestValid()</span><br><span class="line">&#123;</span><br><span class="line">char *in = &quot;abcdefg&quot;;</span><br><span class="line">char *out1 = &quot;decfbga&quot;;</span><br><span class="line">char *out2 = &quot;fegdacb&quot;;</span><br><span class="line">char *out3 = &quot;efdgbca&quot;;</span><br><span class="line">char *out4 = &quot;cdbefag&quot;;</span><br><span class="line"></span><br><span class="line">printf(&quot;%s\n&quot;,Valid(in,out1,strlen(in)) ? &quot;合法顺序&quot;:&quot;非法顺序&quot; );</span><br><span class="line">printf(&quot;%s\n&quot;,Valid(in,out2,strlen(in)) ? &quot;合法顺序&quot;:&quot;非法顺序&quot; );</span><br><span class="line">printf(&quot;%s\n&quot;,Valid(in,out3,strlen(in)) ? &quot;合法顺序&quot;:&quot;非法顺序&quot; );</span><br><span class="line">printf(&quot;%s\n&quot;,Valid(in,out4,strlen(in)) ? &quot;合法顺序&quot;:&quot;非法顺序&quot; );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输出结果：</span><br><span class="line">合法顺序</span><br><span class="line">非法顺序</span><br><span class="line">非法顺序</span><br><span class="line">合法顺序</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;\assets\js\APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h3 id=&quot;判断元素入栈出栈的合法性&quot;&gt;&lt;a href=&quot;#判断元素入栈出栈的合法性&quot; class=&quot;headerlink&quot; title=&quot;判断元素入栈出栈的合法性&quot;&gt;&lt;/a&gt;
      
    
    </summary>
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="栈" scheme="http://yoursite.com/tags/%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>栈实现括号匹配</title>
    <link href="http://yoursite.com/2018/08/23/%E6%A0%88%E5%AE%9E%E7%8E%B0%E6%8B%AC%E5%8F%B7%E5%8C%B9%E9%85%8D/"/>
    <id>http://yoursite.com/2018/08/23/栈实现括号匹配/</id>
    <published>2018-08-23T00:57:33.000Z</published>
    <updated>2018-09-02T01:23:53.061Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h3 id="栈实现括号匹配"><a href="#栈实现括号匹配" class="headerlink" title="栈实现括号匹配"></a>栈实现括号匹配</h3><p><strong>匹配思想</strong>：从左至右扫描一个字符串(或表达式)，则每个右括号将与最近遇到的那个左括号相匹配。则可以在从左至右扫描过程中把所遇到的左括号存放到堆栈中。每当遇到一个右括号时，就将它与栈顶的左括号(如果存在)相匹配，同时从栈顶删除该左括号。<br><strong>算法思想</strong>：设置一个栈，当读到左括号时，左括号进栈。当读到右括号时，则从栈中弹出一个元素，与读到的左括号进行匹配，若匹配成功，继续读入；否则匹配失败，返回FLASE。另外,在算法的开始和结束时,栈都应该是空的.所以匹配到最后还要判断栈是否为空,若非空,则说明匹配失败.   </p><p><strong>创建一个StackTest.h的文件</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">//以下是括号匹配具体代码</span><br><span class="line">void BracketMatch(const char *str,int size)</span><br><span class="line">&#123;</span><br><span class="line">Stack stack;</span><br><span class="line">char ch;</span><br><span class="line">char leftBracket;</span><br><span class="line">int i = 0;</span><br><span class="line">StackInit(&amp;stack);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">for (i=0;i&lt;size;i++)</span><br><span class="line">&#123;</span><br><span class="line">ch = str[i];</span><br><span class="line"></span><br><span class="line">switch(ch)</span><br><span class="line">&#123;</span><br><span class="line">case &apos;(&apos;:</span><br><span class="line">case &apos;[&apos;:</span><br><span class="line">case &apos;&#123;&apos;:</span><br><span class="line">StackPush(&amp;stack,(DataType)ch);</span><br><span class="line">break;</span><br><span class="line">case &apos;)&apos;:</span><br><span class="line">case &apos;]&apos;:</span><br><span class="line">case &apos;&#125;&apos;:</span><br><span class="line">if (StackEmpty(&amp;stack))</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;右括号多\n&quot;);</span><br><span class="line">StackDestory(&amp;stack);</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">leftBracket = (char)StackTop(&amp;stack);</span><br><span class="line">StackPop(&amp;stack);</span><br><span class="line"></span><br><span class="line">if (leftBracket == &apos;(&apos; &amp;&amp; ch != &apos;)&apos;)</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;不匹配\n&quot;);</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if (leftBracket == &apos;[&apos; &amp;&amp; ch != &apos;]&apos;)</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;不匹配\n&quot;);</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">if (leftBracket == &apos;&#123;&apos; &amp;&amp; ch != &apos;&#125;&apos;)</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;不匹配\n&quot;);</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">default:</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">if (!StackEmpty(&amp;stack))</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;左括号多\n&quot;);</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;匹配正常\n&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">//以下是Stack.h文件</span><br><span class="line">typedef int DataType;</span><br><span class="line"></span><br><span class="line">#define MAX_SIZE (100)</span><br><span class="line"></span><br><span class="line">typedef struct Stack&#123;</span><br><span class="line"></span><br><span class="line">DataType arr[MAX_SIZE];</span><br><span class="line">int top;</span><br><span class="line">&#125;Stack;</span><br><span class="line"></span><br><span class="line">void StackInit(Stack *stack)</span><br><span class="line">&#123;</span><br><span class="line">stack-&gt;top = 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void StackDestory(Stack *stack)</span><br><span class="line">&#123;</span><br><span class="line">stack-&gt;top = 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void StackPush(Stack *stack,DataType data)</span><br><span class="line">&#123;</span><br><span class="line">assert(stack-&gt;top &lt;MAX_SIZE);</span><br><span class="line">stack-&gt;arr[stack-&gt;top++] = data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">void StackPop(Stack *stack)</span><br><span class="line">&#123;</span><br><span class="line">assert(stack-&gt;top &gt; 0);</span><br><span class="line">stack-&gt;top--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DataType StackTop(const Stack *stack)</span><br><span class="line">&#123;</span><br><span class="line">assert(stack-&gt;top &gt; 0);</span><br><span class="line">return stack-&gt;arr[stack-&gt;top-1];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int stackSize(Stack *stack)</span><br><span class="line">&#123;</span><br><span class="line">return stack-&gt;top;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int StackFull(Stack *stack)</span><br><span class="line">&#123;</span><br><span class="line">return stack-&gt;top &gt;= MAX_SIZE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int StackEmpty(Stack *stack)</span><br><span class="line">&#123;</span><br><span class="line">return stack-&gt;top &lt;= 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">//以下我们测试括号是否匹配</span><br><span class="line">void TestBracket()</span><br><span class="line">&#123;</span><br><span class="line">const char *seq[]=&#123;</span><br><span class="line">&quot;(())abc&#123;[(])&#125;&quot;,</span><br><span class="line">&quot;(()))abc&#123;[]&#125;&quot;,</span><br><span class="line">&quot;(()()abc&#123;[]&#125;&quot;,</span><br><span class="line">&quot;(())abc&#123;[]()&#125;&quot;</span><br><span class="line">&#125;;</span><br><span class="line">int i = 0;</span><br><span class="line">for (i=0;i&lt;4;i++)</span><br><span class="line">&#123;</span><br><span class="line">BracketMatch(seq[i],strlen(seq[i]));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">打印结果：</span><br><span class="line">不匹配   </span><br><span class="line">右括号多  </span><br><span class="line">左括号多  </span><br><span class="line">匹配正常</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">//以上就是括号匹配的问题，如有问题望批评指正</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;\assets\js\APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h3 id=&quot;栈实现括号匹配&quot;&gt;&lt;a href=&quot;#栈实现括号匹配&quot; class=&quot;headerlink&quot; title=&quot;栈实现括号匹配&quot;&gt;&lt;/a&gt;栈实现括号匹配&lt;/h3&gt;&lt;p&gt;
      
    
    </summary>
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="栈" scheme="http://yoursite.com/tags/%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>搭建git服务器教程</title>
    <link href="http://yoursite.com/2018/07/25/git%E6%95%99%E7%A8%8B/"/>
    <id>http://yoursite.com/2018/07/25/git教程/</id>
    <published>2018-07-25T08:51:38.000Z</published>
    <updated>2018-09-02T01:23:11.780Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="1-下载安装git"><a href="#1-下载安装git" class="headerlink" title="1.下载安装git"></a>1.下载安装git</h2><h3 id="安装依赖库和编译工具"><a href="#安装依赖库和编译工具" class="headerlink" title="安装依赖库和编译工具"></a>安装依赖库和编译工具</h3><p>为了后续安装能正常进行，我们先来安装一些相关依赖库和编译工具    </p><pre><code>yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel</code></pre><p>安装编译工具  </p><pre><code>yum install gcc perl-ExtUtils-MakeMaker</code></pre><h3 id="下载git"><a href="#下载git" class="headerlink" title="下载git"></a>下载git</h3><p>选一个目录，用来放下载下来的安装包，这里将安装包放在 /usr/local/src 目录里   </p><pre><code>cd /usr/local/src    </code></pre><p>到官网找一个新版稳定的源码包下载到 /usr/local/src 文件夹里    </p><pre><code>wget https://www.kernel.org/pub/software/scm/git/git-2.10.0.tar.gz</code></pre><h3 id="解压和编译"><a href="#解压和编译" class="headerlink" title="解压和编译"></a>解压和编译</h3><p>解压下载的资源包 </p><pre><code>tar -zvxf git-2.10.0.tar.gz</code></pre><p>解压后进入git-2.10.0  </p><pre><code>cd git-2.10.0</code></pre><p>执行编译</p><pre><code>make all prefix=/usr/local/git</code></pre><p>编译完成后, 安装到 /usr/local/git 目录下   </p><pre><code>make install prefix=/usr/local/git</code></pre><h2 id="2-配置环境变量"><a href="#2-配置环境变量" class="headerlink" title="2.配置环境变量"></a>2.配置环境变量</h2><h3 id="将git目录加入PATH"><a href="#将git目录加入PATH" class="headerlink" title="将git目录加入PATH"></a>将git目录加入PATH</h3><p>将原来的PATH指向目录修改为现在的目录   </p><pre><code>echo &apos;export PATH=$PATH:/usr/local/git/bin&apos; &gt;&gt; /etc/bashrc</code></pre><p>生成环境变量   </p><pre><code>source /etc/bashrc</code></pre><p>此时我们查看git版本号，说明我们已经安装成功了。   </p><pre><code>git --version</code></pre><h2 id="3-创建git账号密码"><a href="#3-创建git账号密码" class="headerlink" title="3.创建git账号密码"></a>3.创建git账号密码</h2><h3 id="创建git账号"><a href="#创建git账号" class="headerlink" title="创建git账号"></a>创建git账号</h3><p>为我们刚刚搭建好的 git 创建一个账号   </p><pre><code>useradd -m gituser</code></pre><p>然后为这个账号设置密码[?]   </p><pre><code>passwd gituser</code></pre><h2 id="4-初始化git仓库并配置用户权限"><a href="#4-初始化git仓库并配置用户权限" class="headerlink" title="4.初始化git仓库并配置用户权限"></a>4.初始化git仓库并配置用户权限</h2><h3 id="创建git参考并初始化"><a href="#创建git参考并初始化" class="headerlink" title="创建git参考并初始化"></a>创建git参考并初始化</h3><p>我们创建 /data/repositories 目录用于存放 git 仓库   </p><pre><code>mkdir -p /data/repositories</code></pre><p>创建好后，初始化这个仓库   </p><pre><code>cd /data/repositories/ &amp;&amp; git init --bare test.git</code></pre><h3 id="配置用户权限"><a href="#配置用户权限" class="headerlink" title="配置用户权限"></a>配置用户权限</h3><p>给 git 仓库目录设置用户和用户组并设置权限   </p><pre><code>chown -R gituser:gituser /data/repositorieschmod 755 /data/repositories</code></pre><p>[查找 git-shell 所在目录] , 编辑 /etc/passwd 文件，将最后一行关于 gituser 的登录 shell 配置改为 如下</p><p>示例代码：/etc/passwd</p><pre><code>gituser:x:500:500::/home/gituser:/usr/local/git/bin/git-shell</code></pre><h3 id="使用搭建好的-Git-服务"><a href="#使用搭建好的-Git-服务" class="headerlink" title="使用搭建好的 Git 服务"></a>使用搭建好的 Git 服务</h3><p>克隆test repo 到本地</p><pre><code>cd ~ &amp;&amp; git clone gituser@&lt;您的 CVM IP 地址&gt;:/data/repositories/test.git</code></pre><p>恭喜，Git 服务器搭建完成, 从此以后你可以方便地将你的本地代码提交到 Git 服务器托管了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;\assets\js\APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h2 id=&quot;1-下载安装git&quot;&gt;&lt;a href=&quot;#1-下载安装git&quot; class=&quot;headerlink&quot; title=&quot;1.下载安装git&quot;&gt;&lt;/a&gt;1.下载安装git
      
    
    </summary>
    
      <category term="Git" scheme="http://yoursite.com/categories/Git/"/>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Welcome To MyBlog</title>
    <link href="http://yoursite.com/2018/07/19/index/"/>
    <id>http://yoursite.com/2018/07/19/index/</id>
    <published>2018-07-19T04:23:57.000Z</published>
    <updated>2018-09-02T01:27:54.243Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p><strong>今晚12点前向我发暑假学习计划及安排，以word形式私发给我，具体学习计划及内容如下，每人至少选择两个课程，如果有其它想法，可以写word一同发给我，暑假期间将进行不定期考察学习成果，开学将进行统一考核评优，希望各位小伙伴在放假期间也不要耽误学习哦，另外需要学习资源的可以私我</strong></p><a id="more"></a><h2 id="大一到大二："><a href="#大一到大二：" class="headerlink" title="大一到大二："></a>大一到大二：</h2><h3 id="主攻方向："><a href="#主攻方向：" class="headerlink" title="主攻方向："></a>主攻方向：</h3><p>大二必修课：数据结构  </p><p>Web前端：HTML+CSS+JavaScript  </p><p>主流语言：Java，PHP，python，</p><h2 id="大二到大三："><a href="#大二到大三：" class="headerlink" title="大二到大三："></a>大二到大三：</h2><p>大三必修课：操作系统，java，  </p><p>Linux操作系统，C++</p><h3 id="其他：hexo-GitHub-node-js个人博客搭建"><a href="#其他：hexo-GitHub-node-js个人博客搭建" class="headerlink" title="其他：hexo+GitHub+node.js个人博客搭建"></a>其他：hexo+GitHub+node.js个人博客搭建</h3><p>（学习过程中最好使用CSDN养成写博客的习惯）</p><p>不忘初心，方得始终。。。。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;今晚12点前向我发暑假学习计划及安排，以word形式私发给我，具体学习计划及内容如下，每人至少选择两个课程，如果有其它想法，可以写word一同发给我，暑假期间将进行不定期考察学习成果，开学将进行统一考核评优，希望各位小伙伴在放假期间也不要耽误学习哦，另外需要学习资源的可以私我&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://yoursite.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
</feed>
