<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LiuxiaoKun</title>
  
  <subtitle>My Awesome Site</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://LiuZiQiao.github.io/"/>
  <updated>2018-09-24T12:21:50.061Z</updated>
  <id>https://LiuZiQiao.github.io/</id>
  
  <author>
    <name>LiuXiaoKun</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Makefile工具使用</title>
    <link href="https://LiuZiQiao.github.io/2018/09/24/Makefile%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"/>
    <id>https://LiuZiQiao.github.io/2018/09/24/Makefile工具使用/</id>
    <published>2018-09-24T08:31:48.000Z</published>
    <updated>2018-09-24T12:21:50.061Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><a id="more"></a><p>Makefile是一个c语言的编译工具。如果学过Java，可能会认识Maven工具，makefile也是类似的工作。<br>Makefile能帮助c语言建立自动化的编译。一旦写好，执行一个make命令就可以编译整个工程。当然编写Makefile文件的时候有很多知识点在里面。这篇文章主要讲解如何编写基础性以及常用的Makefile文件。</p><h3 id="没有Makefile工具时如何进行编译"><a href="#没有Makefile工具时如何进行编译" class="headerlink" title="没有Makefile工具时如何进行编译"></a>没有Makefile工具时如何进行编译</h3><p>首先我们看一个例子：<br>当前我们有3个文件，分别是test.h test.c main.c<br>在main.c中,头文件定义如下<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">"test.h"</span></span></span><br></pre></td></tr></table></figure></p><p>在test.h中,头文件定义如下<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">"test.c"</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test_print</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure></p><p>在test.c中<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test_print</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"this is test.c \n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>当我们编译运行程序时，我们使用的命令是<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc test.h main.c -o main</span><br></pre></td></tr></table></figure></p><p>运行结果就是<br>    this is test.c   </p><p>对于小程序我们可以使用这样的命令，但是当我们这样运行一个大项目时，我们需要多少文件名来定义，此时Makefile就是一个很好的工具</p><h3 id="makefile简单示例"><a href="#makefile简单示例" class="headerlink" title="makefile简单示例"></a>makefile简单示例</h3><p>就如上面的三个文件<br>我们vim 一个名为Makefile的文件<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">main.o:test.o main.c</span><br><span class="line">    gcc test.o main.c</span><br><span class="line">test.o:test.c</span><br><span class="line">    gcc -c test.c</span><br></pre></td></tr></table></figure></p><p>编辑好Makefile文件后，我们返回，执行make后，将会输出<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gcc -c test.c   </span><br><span class="line">gcc test.o main.c</span><br></pre></td></tr></table></figure></p><p>这样是不是比原始的编译方便很多呢。其实也不是罪方便的，既然发明了make工具，那么肯定会让make工具更加方便开发人员使用的。</p><h3 id="Makefile具体使用"><a href="#Makefile具体使用" class="headerlink" title="Makefile具体使用"></a>Makefile具体使用</h3><h4 id="伪目标"><a href="#伪目标" class="headerlink" title="伪目标"></a>伪目标</h4><p>伪目标：不管是不是最新的，都需要重新生成；使用.PHONY来声明一个目标是伪目标；执行伪目标的效果等于执行了某一个动作，并不产生目标文件。例如添加一个伪目标：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">main.o:test.o main.c</span><br><span class="line">    gcc test.o main.c</span><br><span class="line">test.o:test.c</span><br><span class="line">    gcc -c test.c</span><br><span class="line">clean :                                        【这是一个伪目标】</span><br><span class="line">        rm -f $(OBJECTS) main</span><br></pre></td></tr></table></figure></p><p>使用make来执行伪目标<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ make clean</span><br><span class="line">rm -f test.o main.c main.o</span><br></pre></td></tr></table></figure></p><h4 id="Makefile自动变量"><a href="#Makefile自动变量" class="headerlink" title="Makefile自动变量"></a>Makefile自动变量</h4><table><thead><tr><th>选项名</th><th>作用</th></tr></thead><tbody><tr><td>@\</td><td>规定的目标文件名\</td><td></td><td>规定的第一个依赖文件名</td></tr><tr><td>$^</td><td>规定的所有依赖文件列表</td></tr></tbody></table><p>因此，上面的Makefile文件我们可以改下如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">main.o:test.o main.c</span><br><span class="line">    gcc -g $^ -o $@</span><br><span class="line">test.o:test.c</span><br><span class="line">    gcc -g -c  $&lt; -o $@</span><br></pre></td></tr></table></figure></p><p>执行make，可以看到效果还是一样的：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gcc -c test.c   </span><br><span class="line">gcc test.o main.c</span><br></pre></td></tr></table></figure></p><h4 id="编译生成多个可执行文件"><a href="#编译生成多个可执行文件" class="headerlink" title="编译生成多个可执行文件"></a>编译生成多个可执行文件</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">bin=main main2   <span class="comment">//自定义变量bin</span></span><br><span class="line">src=main.o test.o</span><br><span class="line">all:$(bin)    <span class="comment">//重点</span></span><br><span class="line">main: $(src)</span><br><span class="line">    gcc -g $^ -o $@</span><br><span class="line">main2:$(bin)</span><br><span class="line">    gcc -g $&lt; -o $@</span><br><span class="line">main.o :main.c</span><br><span class="line">    gcc -g -c $&lt; -o $@</span><br><span class="line">main2.o :main2.c</span><br><span class="line">    gcc -g -c $&lt; -o $@</span><br><span class="line">clean :</span><br><span class="line">    rm -f $(src) $(bin)</span><br></pre></td></tr></table></figure><p>为了生成目标文件all，需要生成bin，也就是main main2.这样就生成了两个可执行文件，利用自定义变量可以简化这段Makefile，但是这样写看起来内容其实还是很多的，因此下面我将介绍make的内嵌函数</p><h4 id="make常用内嵌函数"><a href="#make常用内嵌函数" class="headerlink" title="make常用内嵌函数"></a>make常用内嵌函数</h4><p>首先看到make中函数的调用形式<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(function arguments)   <span class="comment">//functions是函数名称，arguments是参数，使用$来调用</span></span><br></pre></td></tr></table></figure></p><p><strong><em>函数名与参数之间是空格</em></strong><br>以下三个重要的内嵌函数</p><ul><li><p>$(wildcard path)<br>  当前目录下匹配模式的文件</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">src=$(wildcard *.c)  <span class="comment">// 在当前目录下搜索所以.c文件，文件名称保存到src中</span></span><br></pre></td></tr></table></figure></li><li><p>$(patsubst pattern,replacement,text)模式替换函数，就是把text中文件列表从模式pattern替换为replacement模式</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$(patsubst %.c,%.o,$src)  <span class="comment">// 把src中的.c文件列表中的文件从.c替换为.o</span></span><br><span class="line">等价于：$(src:.c=.o)  <span class="comment">//这种方式更为常用</span></span><br></pre></td></tr></table></figure></li><li><p>shell函数<br>shell函数可以执行shell下的命令，同样是使用$来引用的，例如</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(shell ls -d */)  <span class="comment">//将当前目录下的所有文件列出来</span></span><br></pre></td></tr></table></figure></li></ul><p>下面我们通过一个例子来使用上面三个函数。假设当前目录下有main.c文件，同时还有若干个目录，每个目录中都有各自的.c文件，利用所有的.c文件编译生成最后的main文件：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">CC      = gcc</span><br><span class="line">CFLAGS  = -g</span><br><span class="line">BIN     = main</span><br><span class="line">SUBDIR  = $(shell ls -d */)     <span class="comment">// SUBDIR变量保存了子目录的列表</span></span><br><span class="line">ROOTSRC = $(wildcard *.c)       <span class="comment">//ROOTSRC保存了当前目录下的.c文件列表</span></span><br><span class="line">ROOTOBJ = $(ROOTSRC:%.c = %.o)  <span class="comment">//ROOTBOJ 保存了当前目录下.c文件同名的.o列表</span></span><br><span class="line">SUBSRC  = $(shell find $(SUBDIR) -name '*.c')       //SUBSRC 保存了所有子目录下的的.c文件</span><br><span class="line">SUBOBJ  = $(SUBSRC:%.c = %.o)       <span class="comment">//SUBOBJ保存了所有子目录下的.c文件同名的.o文件列表</span></span><br><span class="line">$(BIN):$(ROOTOBJ) $(SUBOBJ)         <span class="comment">//main的生成依赖与当前目录及所有子目录下的.o文件</span></span><br><span class="line">    $(CC) $(CFLAGS) -o $(BIN) $(ROOTOBJ) $(SUBOBJ)</span><br><span class="line">.o .c:</span><br><span class="line">    $(CC) $(CFLAGS) -c %&lt; -o $@</span><br><span class="line">clean:</span><br><span class="line">    rm -f $(BIN) $(ROOTOBJ) $(SUBOBJ)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;\assets\js\APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;Makefile是一个c语言的编译工具。如果学过Java，可能会认识Maven工具，makefile也是类似的工作。&lt;br&gt;Makefil
      
    
    </summary>
    
      <category term="Linux" scheme="https://LiuZiQiao.github.io/categories/Linux/"/>
    
    
      <category term="vim" scheme="https://LiuZiQiao.github.io/tags/vim/"/>
    
  </entry>
  
  <entry>
    <title>vim使用命令大全</title>
    <link href="https://LiuZiQiao.github.io/2018/09/23/vim%E4%BD%BF%E7%94%A8%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8/"/>
    <id>https://LiuZiQiao.github.io/2018/09/23/vim使用命令大全/</id>
    <published>2018-09-23T14:51:17.000Z</published>
    <updated>2018-09-24T06:08:40.019Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><a id="more"></a><p>不知不觉，vim已经使用快一年了，虽然不是经常使用，这就导致每次使用时一些命令还是模糊，需要查查文档才能正确使用，因此就这篇博客分享给学习Linux的小伙伴们。</p><h3 id="vim介绍"><a href="#vim介绍" class="headerlink" title="vim介绍"></a>vim介绍</h3><p>vim是程序员最喜欢的编辑器，也是Linux下第二强大的编辑器，虽然emacs是公认的世界第一，但我认为emacs并没有vim用起来高效。</p><h4 id="vim的几种模式"><a href="#vim的几种模式" class="headerlink" title="vim的几种模式"></a>vim的几种模式</h4><ul><li>正常模式：可以使用快捷键命令，或按输入命令</li><li>插入模式：可以输入文本，在正常模式下，按i，a，o等都可以进入插入模式</li><li>可视模式：正常模式下按v可进入可视模式，在可视模式下，移动光标可以选择文本，按v进入可视模式后，总是整行整行的选中。Ctrl+v进入可视块模式。<h3 id="启动vim"><a href="#启动vim" class="headerlink" title="启动vim"></a>启动vim</h3></li><li>vim -c cmd file：在打开文件前，先执行指定的命令</li><li>vim -r file：恢复上次异常退出的文件</li><li>vim -R file：以只读的方式打开文件，但可以强制保存</li><li>vim -M file：以只读方式打开文件，不可以强制保存</li><li>vim -y num file：将编辑窗口的大小设为num行</li><li>vim+file：从文件的末尾开始</li><li>vim+num file：从第num行开始</li><li>vim+/string file：打开file，并将光标停留在第一个找到的string上</li><li>vim -remote file：用已有的vim进程打开指定的文件。如果你不想启用多个vim会话，这个很有用。但要注意， 如果你用vim，会寻找名叫VIM的服务器；如果你已经有一个gvim在运行了， 你可以用gvim –remote file在已有的gvim中打开文件。</li></ul><h3 id="文档操作"><a href="#文档操作" class="headerlink" title="文档操作"></a>文档操作</h3><ul><li>e file -关闭当前编辑的文件，并开启新的文件。如果当前文件的修改未保存，vi会警告</li><li>e! file -放弃当前文件的修改，编辑新的文件</li><li>e+n file -开始新的文件，并从第n行开始编辑</li><li>enew -编译一个未命名的新文档（Ctrl-W n）</li><li>e – 重新加载当前文档。</li><li>e! – 重新加载当前文档，并丢弃已做的改动。</li><li>e#或ctrl+^ – 回到刚才编辑的文件，很实用。</li><li>f或ctrl+g –显示文档名，是否修改，和光标位置。</li><li>f filename – 改变编辑的文件名，这时再保存相当于另存为。</li><li>gf – 打开以光标所在字符串为文件名的文件。</li><li>w – 保存修改。</li><li>n1,n2w filename – 选择性保存从某n1行到另n2行的内容。</li><li>wq – 保存并退出。</li><li>ZZ – 保存并退出。</li><li>x – 保存并退出。</li><li>q[uit] ——退出当前窗口。(CTRL-W q或CTRL-W CTRL-Q)</li><li>saveas newfilename – 另存为</li><li>browse e – 会打开一个文件浏览器让你选择要编辑的文件。 如果是终端中，则会打开netrw的文件浏览窗口； 如果是gvim，则会打开一个图形界面的浏览窗口。 实际上</li><li>browse后可以跟任何编辑文档的命令，如sp等。 用browse打开的起始目录可以由browsedir来设置：</li><li>set browsedir=last – 用上次访问过的目录（默认）；</li><li>set browsedir=buffer – 用当前文件所在目录；</li><li>set browsedir=current – 用当前工作目录；</li><li>Sex – 水平分割一个窗口，浏览文件系统；</li><li>Vex – 垂直分割一个窗口，浏览文件系统；</li></ul><h3 id="光标移动"><a href="#光标移动" class="headerlink" title="光标移动"></a>光标移动</h3><h4 id="基本移动"><a href="#基本移动" class="headerlink" title="基本移动"></a>基本移动</h4><p><strong>在正常模式下</strong></p><ul><li>h或退格：左移一个字符</li><li>I或空格：右移一个字符</li><li>j：下移一行</li><li>k：上移一行</li><li>gj：移动到一段内的下一行</li><li>gk：移动到一段内的上一行</li><li>+或者enter：把光标移至下一行第一个非空白字符</li><li>-：把光标移至上一行第一个非空白字符</li><li>w：移动一个单词，可忽略一些标点</li><li>e：前移一个单词，光标停在下一个单词末尾</li><li>E：移动到下一个单词末尾，如果词末尾有标点，则移动到标点</li><li>b：后移一个单词，光标停在上一个单词开头</li><li>B：移动到上一个单词开头，忽略一些标点</li><li>ge：后移一个单词，光标停在上一个单词末尾</li><li>gE：同ge，不过单词包含单词相邻的标点</li><li>(: 前移1句。</li><li>): 后移1句。</li><li>{: 前移1段。</li><li>}: 后移1段。</li><li>fc: 把光标移到同一行的下一个c字符处</li><li>Fc: 把光标移到同一行的上一个c字符处</li><li>tc: 把光标移到同一行的下一个c字符前</li><li>Tc: 把光标移到同一行的上一个c字符后</li><li>;: 配合f &amp; t使用，重复一次</li><li>,: 配合f &amp; t使用，反向重复一次</li><li>0：移到首行</li><li>g0：移到光标所在行行首</li><li>^：移到本行第一个非空白字符</li><li>g^：同^，但是移到到当前第一个非空字符处</li><li>n|：光标移动到第n行</li><li>:n<cr> :移动到第n行</cr></li><li>:$<cr> :移动到最后一行</cr></li><li>H：把光标移动到最顶端一行</li><li>M：把光标移动到最中间一行</li><li>L：把光标移动到最底端一行</li><li>gg：到文件头部</li><li>G：到文件尾部</li></ul><h4 id="翻屏"><a href="#翻屏" class="headerlink" title="翻屏"></a>翻屏</h4><ul><li>Ctrl+f： 下翻一屏。</li><li>Ctrl+b: 上翻一屏。</li><li>Ctrl+d: 下翻半屏。</li><li>Ctrl+u: 上翻半屏。</li><li>Ctrl+e: 向下滚动一行。</li><li>Ctrl+y: 向上滚动一行。</li><li>n%: 到文件n%的位置。</li><li>zz: 将当前行移动到屏幕中央。</li><li>zt: 将当前行移动到屏幕顶端。</li><li>zb: 将当前行移动到屏幕底端。</li></ul><h4 id="标记"><a href="#标记" class="headerlink" title="标记"></a>标记</h4><p>使用标记可以快速移动。到达标记后，可以用Ctrl+o返回原来的位置Ctrl+o和Ctrl+i很像浏览器上的 后退 和 前进 。</p><ul><li>m{a-z}: 标记光标所在位置，局部标记，只用于当前文件。</li><li>m{A-Z}: 标记光标所在位置，全局标记。标记之后，退出Vim， 重新启动，标记仍然有效。</li><li>`{a-z}: 移动到标记位置。</li><li>‘{a-z}: 移动到标记行的行首。</li><li>`{0-9}：回到上[2-10]次关闭vim时最后离开的位置。</li><li>“: 移动到上次编辑的位置。”也可以，不过“精确到列，而”精确到行 。如果想跳转到更老的位置，可以按C-o，跳转到更新的位置用C-i。</li><li>`”: 移动到上次离开的地方。</li><li>`.: 移动到最后改动的地方。</li><li>:marks 显示所有标记。</li><li>:delmarks a b – 删除标记a和b。</li><li>:delmarks a-c – 删除标记a、b和c。</li><li>:delmarks a c-f – 删除标记a、c、d、e、f。</li><li>:delmarks! – 删除当前缓冲区的所有标记。</li><li>:help mark-motions 查看更多关于mark的知识。</li></ul><h3 id="插入文本"><a href="#插入文本" class="headerlink" title="插入文本"></a>插入文本</h3><h4 id="基本插入"><a href="#基本插入" class="headerlink" title="基本插入"></a>基本插入</h4><ul><li>i: 在光标前插入；一个小技巧：按8，再按i，进入插入模式，输入=， 按esc进入命令模式，就会出现8个=。 这在插入分割线时非常有用，如30i+<esc>就插入了36个+组成的分割线。</esc></li><li>I: 在当前行第一个非空字符前插入；</li><li>gI: 在当前行第一列插入；</li><li>a: 在光标后插入；</li><li>A: 在当前行最后插入；</li><li>o: 在下面新建一行插入；</li><li>O: 在上面新建一行插入；</li><li>:r filename在当前位置插入另一个文件的内容。</li><li>:[n]r filename在第n行插入另一个文件的内容。</li><li>:r !date 在光标处插入当前日期与时间。同理，:r !command可以将其它shell命令的输出插入当前文档。</li></ul><h4 id="改写插入"><a href="#改写插入" class="headerlink" title="改写插入"></a>改写插入</h4><ul><li>c[n]w：改写光标后第n个次</li><li>c[n]I：改写光标后的n个字母</li><li>c[n]h：改写光标前的n个字母</li><li>[n]cc：修改当前[n]行</li><li>[n]s：以输入的文本替代光标之后1(n)个字符</li><li>[n]S：删除指定数目的行，并以所输入文本代替</li></ul><h3 id="剪切复制和寄存器"><a href="#剪切复制和寄存器" class="headerlink" title="剪切复制和寄存器"></a>剪切复制和寄存器</h3><h4 id="剪切和复制、粘贴"><a href="#剪切和复制、粘贴" class="headerlink" title="剪切和复制、粘贴"></a>剪切和复制、粘贴</h4><ul><li>[n]x: 剪切光标右边n个字符，相当于d[n]l。</li><li>[n]X: 剪切光标左边n个字符，相当于d[n]h。</li><li>y: 复制在可视模式下选中的文本。</li><li>yy or Y: 复制整行文本。</li><li>y[n]w: 复制一(n)个词。</li><li>y[n]l: 复制光标右边1(n)个字符。</li><li>y[n]h: 复制光标左边1(n)个字符。</li><li>yor D: 删除（剪切）当前位置到行尾的内容。</li><li>d[n]w: 删除（剪切）1(n)个单词</li><li>d[n]l: 删除（剪切）光标右边1(n)个字符。</li><li>d[n]h: 删除（剪切）光标左边1(n)个字符。</li><li>d0: 删除（剪切）当前位置到行首的内容</li><li>[n] dd: 删除（剪切）1(n)行。</li><li>:m,nd<cr> 剪切m行到n行的内容。</cr></li><li>d1G或dgg: 剪切光标以上的所有行。</li><li>dG: 剪切光标以下的所有行。</li><li>daw和das：剪切一个词和剪切一个句子，即使光标不在词首和句首也没关系。</li><li>d/f<cr>：这是一个比较高级的组合命令，它将删除当前位置 到下一个f之间的内容。</cr></li><li>p: 在光标之后粘贴。</li><li>P: 在光标之前粘贴。</li></ul><p><strong><em>当然，我们也可以在视图模式下进行选择，然后进行复制剪切粘贴操作</em></strong></p><h4 id="文本对象"><a href="#文本对象" class="headerlink" title="文本对象"></a>文本对象</h4><ul><li>aw：一个词</li><li>as：一句</li><li>ap：一段</li><li>ab：一块<h4 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h4></li><li>a-z：都可以用作寄存器的名。“ayy把当前行的内容放入a寄存器。</li><li>A-Z：用大写字母索引寄存器，可以在寄存器中追加内容。</li><li>:reg：显示所有寄存器的内容</li><li>“”：不加寄存器索引时，默认使用的寄存器</li><li>“<em>：当前选择缓冲区，”</em>yy吧当前行的内容放入当前缓冲区。</li><li>“+：系统剪贴板。”+yy把当前行的内容放入系统剪贴板。</li></ul><h3 id="编辑多个文件"><a href="#编辑多个文件" class="headerlink" title="编辑多个文件"></a>编辑多个文件</h3><h4 id="一次编辑多个文件"><a href="#一次编辑多个文件" class="headerlink" title="一次编辑多个文件"></a>一次编辑多个文件</h4><pre><code>打开文件时：vi a.txt b.txt c.txt</code></pre><ul><li>使用：next(:n)编辑下一个文件</li><li>:2n编辑下2个文件</li><li>使用:previous或:N编辑上一个文件</li><li>使用:wnext，保存当前文件，并编辑下一个文件</li><li>使用:wprevious，保存当前文件，并编辑上一个文件</li><li>使用:args显示文件列表</li><li>:n filename或:args filename 指定新的文件列表</li><li>vi -o filename 在水平分割线的多个窗口编辑多个文件</li><li>vi -o filename 在垂直分割的多个窗口中编辑多个文件</li><li>vnew 在当前编辑文件时新增加一个编辑文件，:w filename 保存为filename的文件<h3 id="分屏编辑"><a href="#分屏编辑" class="headerlink" title="分屏编辑"></a>分屏编辑</h3></li><li>vim -o file1 file2 ：水平分割窗口，同时打开file1和file2</li><li>vim -O file1 file2 ：垂直分割窗口，同时打开file1和file2<h4 id="水平分割"><a href="#水平分割" class="headerlink" title="水平分割"></a>水平分割</h4></li><li>split(:sp) 把当前窗水平分割成两个窗口。(Ctrl-W s 或Ctrl-W ctrl-S)如果是在终端下，Ctrl-S可能会冻结终端，Ctrl-Q继续</li><li>split filename  水平分割窗口，并在新窗口中显示另外一个文件</li><li>nsplit(:nsp) 水平分割出一个n行高的窗口</li><li>C-W C-^ 水平分割一个窗口，打开刚才编辑的文件<h4 id="垂直分割"><a href="#垂直分割" class="headerlink" title="垂直分割"></a>垂直分割</h4></li><li>:vsplit(:vsp) 把当前窗口分割成水平分布的两个窗口</li><li>:[N]vne[W] 垂直分割出一各新窗口</li><li>:vertical 水平分割的命令，相应的垂直分割<h4 id="关闭子窗口"><a href="#关闭子窗口" class="headerlink" title="关闭子窗口"></a>关闭子窗口</h4></li><li>:qall  关闭所有窗口，退出vim</li><li>:wall 保存所有修改过的窗口</li><li>:only 只保留当前窗口，关闭其它窗口</li><li>:close 关闭当前窗口，Ctrl-W c能实现同样的功能<h4 id="调整窗口大小"><a href="#调整窗口大小" class="headerlink" title="调整窗口大小"></a>调整窗口大小</h4></li><li>Ctrl+w+  当前窗口增高一行。也可用n增高n行</li><li>Ctrl+w-  当前窗口减少一行。也可用n减少n行</li><li>Ctrl+w_  当前窗口扩展到尽可能的大。也可用n设定行数</li><li>resize n 当前窗口n行高</li><li>Ctrl+w&lt; 当前窗口减少一列。也可用n减少n列</li><li>Ctrl+w&gt; 当前窗口增加一列。也可用n增加n列<h4 id="切换和移动窗口"><a href="#切换和移动窗口" class="headerlink" title="切换和移动窗口"></a>切换和移动窗口</h4></li><li>Ctrl+w Ctrl+w 切换到下一个窗口(Ctrl+w w)</li><li>Ctrl+w p 切换到前一个窗口</li><li>Ctrl+w h(l,j,k) 切换到左（右，下，上）面</li><li>Ctrl+w r 旋转窗口位置</li><li>Ctrl+w T 将当前的窗口移动到新的标签页上</li></ul><h3 id="快速编辑"><a href="#快速编辑" class="headerlink" title="快速编辑"></a>快速编辑</h3><h4 id="改变大小写"><a href="#改变大小写" class="headerlink" title="改变大小写"></a>改变大小写</h4><ul><li>~: 反转光标所在字符的大小写</li><li>可视模式下的U或u：把选中的文本变为大写或小写</li><li>gu(U)接范围（如$，或G），可以把从光标当前位置到指定位置之间字母全部 转换成小写或大写。如ggguG，就是把开头到最后一行之间的字母全部变为小 写。再如gu5j，把当前行和下面四行全部变成小写。<h4 id="替换（正常模式）"><a href="#替换（正常模式）" class="headerlink" title="替换（正常模式）"></a>替换（正常模式）</h4></li><li>r: 替换光标处的字符，同样支持汉字。</li><li>R: 进入替换模式，按esc回到正常模式。</li></ul><h4 id="撤销与重做（正常模式）"><a href="#撤销与重做（正常模式）" class="headerlink" title="撤销与重做（正常模式）"></a>撤销与重做（正常模式）</h4><ul><li>[n] u: 取消一(n)个改动。</li><li>:undo 5 – 撤销5个改变。</li><li>:undolist – 你的撤销历史。</li><li>ctrl + r: 重做最后的改动。</li><li>U: 取消当前行中所有的改动。</li><li>:earlier 4m – 回到4分钟前</li><li>:later 55s – 前进55秒<h4 id="宏"><a href="#宏" class="headerlink" title="宏"></a>宏</h4></li><li>–重复上一个编辑动作</li><li>qa：开始录制宏a（键盘操作记录）</li><li>q：停止录制</li><li>@a：播放宏a</li></ul><h3 id="编辑特殊文件"><a href="#编辑特殊文件" class="headerlink" title="编辑特殊文件"></a>编辑特殊文件</h3><h4 id="文件加解密"><a href="#文件加解密" class="headerlink" title="文件加解密"></a>文件加解密</h4><ul><li>vim -x file 开始编辑一个加密文件</li><li>:X 为当前文件设置加密</li><li>:set key= 去除文件的密码<h4 id="文件的编码"><a href="#文件的编码" class="headerlink" title="文件的编码"></a>文件的编码</h4></li><li>:e ++enc=utf8 filename, 让vim用utf-8的编码打开这个文件。</li><li>:w ++enc=gbk，不管当前文件什么编码，把它转存成gbk编码。</li><li>:set fenc或:setfileencoding，查看当前文件的编码。</li><li>在vimrc中添加set fileencoding=ucs-bom,utf-8,cp936，vim会根据要打开的文件选择合适的编码。 注意：编码之间不要留空格。 cp936对应于gbk编码。 ucs-bom对应于windows下的文件格式。</li></ul><h3 id="编程辅助"><a href="#编程辅助" class="headerlink" title="编程辅助"></a>编程辅助</h3><ul><li>gd: 跳转到局部变量的定义处；</li><li>gD: 跳转到全局变量的定义处，从当前文件开头开始搜索；</li><li>g;: 上一个修改过的地方；</li><li>g,: 下一个修改过的地方；</li><li>[[: 跳转到上一个函数块开始，需要有单独一行的{。</li><li>]]: 跳转到下一个函数块开始，需要有单独一行的{。</li><li>[]: 跳转到上一个函数块结束，需要有单独一行的}。</li><li>][: 跳转到下一个函数块结束，需要有单独一行的}。</li><li>[{: 跳转到当前块开始处；</li><li>]}: 跳转到当前块结束处；</li><li>[/: 跳转到当前注释块开始处；</li><li>]/: 跳转到当前注释块结束处；</li><li>%: 不仅能移动到匹配的(),{}或[]上，而且能在#if，#else， #endif之间跳跃。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;\assets\js\APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;不知不觉，vim已经使用快一年了，虽然不是经常使用，这就导致每次使用时一些命令还是模糊，需要查查文档才能正确使用，因此就这篇博客分享给学习
      
    
    </summary>
    
      <category term="Linux" scheme="https://LiuZiQiao.github.io/categories/Linux/"/>
    
    
      <category term="vim" scheme="https://LiuZiQiao.github.io/tags/vim/"/>
    
  </entry>
  
  <entry>
    <title>MergeTwoSortedArray</title>
    <link href="https://LiuZiQiao.github.io/2018/09/20/MergeTwoSortedArray/"/>
    <id>https://LiuZiQiao.github.io/2018/09/20/MergeTwoSortedArray/</id>
    <published>2018-09-19T22:59:05.000Z</published>
    <updated>2018-09-21T13:06:20.277Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><a id="more"></a><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>给定两个有序整数数组 nums1 和 nums2，将 nums2 合并到 nums1 中，使得 num1 成为一个有序数组。</p><p>说明:</p><p>初始化 nums1 和 nums2 的元素数量分别为 m 和 n。<br>你可以假设 nums1 有足够的空间（空间大小大于或等于 m + n）来保存 nums2 中的元素。<br>示例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入:</span><br><span class="line">nums1 = [1,2,3,0,0,0], m = 3</span><br><span class="line">nums2 = [2,5,6],       n = 3</span><br><span class="line"></span><br><span class="line">输出: [1,2,2,3,5,6]</span><br></pre></td></tr></table></figure></p><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p>思路：申请一个大小是两个数组的临时空间用了存放排序后的元素，先对两个数组中的元素进行判断，小的放进临时数组中，直到一个数组放完后，把另外一个数组中的元素全部拷贝进去，最后将临时数组中的元素拷贝到原数组中。<br>以下是代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>* nums1, <span class="keyword">int</span> m, <span class="keyword">int</span>* nums2, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> cur1 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> cur2 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> *tmp = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>)*(m+n));</span><br><span class="line">assert(tmp);</span><br><span class="line"><span class="built_in">memset</span>(tmp,<span class="number">0</span>, m + n);</span><br><span class="line"><span class="keyword">while</span> (cur1 &lt; m &amp;&amp; cur2 &lt; n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (nums1[cur1] &lt; nums2[cur2])</span><br><span class="line">&#123;</span><br><span class="line">tmp[index] = nums1[cur1];</span><br><span class="line">index++;</span><br><span class="line">cur1++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(nums1[cur1] &gt; nums2[cur2])</span><br><span class="line">&#123;</span><br><span class="line">tmp[index] = nums2[cur2];</span><br><span class="line">index++;</span><br><span class="line">cur2++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (nums1[cur1] == nums2[cur2])</span><br><span class="line">&#123;</span><br><span class="line">tmp[index] = nums1[cur1];</span><br><span class="line">index++;</span><br><span class="line">tmp[index] = nums2[cur2];</span><br><span class="line">index++;</span><br><span class="line">cur1++;</span><br><span class="line">cur2++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//nums2没有元素，但nums1还有元素时，拷贝到tmp中</span></span><br><span class="line"><span class="keyword">while</span> (cur1 &lt; m)</span><br><span class="line">&#123;</span><br><span class="line">tmp[index++] = nums1[cur1++];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//nums1没有元素，但nums2还有元素时，拷贝到tmp中</span></span><br><span class="line"><span class="keyword">while</span> (cur2 &lt; n)</span><br><span class="line">&#123;</span><br><span class="line">tmp[index++] = nums2[cur2++];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将tmp中的元素放回nums1中</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m+n; i++)</span><br><span class="line">&#123;</span><br><span class="line">nums1[i] = tmp[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//释放掉申请的空间</span></span><br><span class="line"><span class="built_in">free</span>(tmp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>看了上面的代码，发现又长又繁琐，我们对其简化后的代码如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Merge</span><span class="params">(<span class="keyword">int</span> *nums1,<span class="keyword">int</span> m,<span class="keyword">int</span> *nums2,<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> count = m + n - <span class="number">1</span>;</span><br><span class="line">--m, --n;</span><br><span class="line"><span class="keyword">while</span> (n&gt;=<span class="number">0</span> &amp;&amp; m&gt;=<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">nums1[count--] = nums1[m] &gt; nums2[n] ? nums1[m--] : nums2[n--];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (m &gt;= <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">nums1[count--] = nums1[m--];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;\assets\js\APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h4 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h4&gt;&lt;p&gt;给定
      
    
    </summary>
    
      <category term="每日一题" scheme="https://LiuZiQiao.github.io/categories/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
    
      <category term="Array" scheme="https://LiuZiQiao.github.io/tags/Array/"/>
    
  </entry>
  
  <entry>
    <title>RemoveDuplicates2</title>
    <link href="https://LiuZiQiao.github.io/2018/09/18/RemoveDuplicates2/"/>
    <id>https://LiuZiQiao.github.io/2018/09/18/RemoveDuplicates2/</id>
    <published>2018-09-18T08:46:12.000Z</published>
    <updated>2018-09-19T00:57:13.015Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><a id="more"></a><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><blockquote><p>Follow up for “Remove Duplicates”:<br>What if duplicates are allowed at most twice?</p><p>For example,<br>Given sorted array nums = [1,1,1,2,2,3],</p><p>Your function should return length = 5, with the first five elements of nums being 1, 1, 2, 2 and 3. It doesn\’t matter what you leave beyond the new length.   </p></blockquote><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p><strong>思路</strong>：这道题是继Remove Duplicates from Sorted Array有序数组中出去重复项，这里运行最多重复次数是二次，因此我们需要定义一个count来记录重复次数，count初始化为1，当出现一次时count减1，下次再重复出现时，快指针直接前进一步，如果这时不是重复的则count恢复为1，该数组是有序的，所以一旦不出现重复的数，后面的数一定比这个数大。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">removeDuplicates</span><span class="params">(<span class="keyword">int</span>* nums, <span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (size &lt;= <span class="number">2</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (j&lt;size)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//当nums[i]== nums[j]，count == 0时，此时这个数是第一次和后面的一个数相等</span></span><br><span class="line"><span class="keyword">if</span> (nums[i] == nums[j] &amp;&amp; count == <span class="number">0</span>) &#123;</span><br><span class="line">++j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;<span class="comment">//此时判断是否与后面的数还能相等，相等时就 --count，</span></span><br><span class="line"><span class="comment">//否则不相等count还是1，说明这个数只出现两次</span></span><br><span class="line"><span class="keyword">if</span> (nums[i] == nums[j]) &#123;</span><br><span class="line">--count;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">count = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//此时我们让第二次出现的这个数后移动一位，并放在这个数后面</span></span><br><span class="line">nums[++i] = nums[j++];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> i+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;\assets\js\APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h3&gt;&lt;bloc
      
    
    </summary>
    
      <category term="每日一题" scheme="https://LiuZiQiao.github.io/categories/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
    
      <category term="Array" scheme="https://LiuZiQiao.github.io/tags/Array/"/>
    
  </entry>
  
  <entry>
    <title>RemoveDuplicates|</title>
    <link href="https://LiuZiQiao.github.io/2018/09/18/RemoveDuplicates1/"/>
    <id>https://LiuZiQiao.github.io/2018/09/18/RemoveDuplicates1/</id>
    <published>2018-09-18T08:23:27.000Z</published>
    <updated>2018-09-19T00:57:04.954Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><a id="more"></a><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><blockquote><p>Given a sorted array, remove the duplicates in place such that each element appear only once and return the new length.</p><p>Do not allocate extra space for another array, you must do this in place with constant memory.</p><p>For example,<br>Given input array nums = [1,1,2],</p><p>Your function should return length = 2, with the first two elements of nums being 1 and 2 respectively. It doesn\’t matter what you leave beyond the new length.</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p><strong>思路</strong>：这道题是让我们去掉数组里重复项，我们使用快慢指针来记录遍历的坐标，最开始两个指针指向第一个数，如果相同，快指针走一步，如果不同，都走一步，当快指针走完整个数组时，慢指针当前的坐标加1就是数组中不同数字的个数。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">removeDuplicates</span><span class="params">(<span class="keyword">int</span>* nums, <span class="keyword">int</span> numsSize)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (numsSize &lt;= <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; numsSize; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (nums[i] != nums[j])</span><br><span class="line">&#123;</span><br><span class="line">i++;</span><br><span class="line">nums[i] = nums[j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> i + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;\assets\js\APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h3&gt;&lt;bloc
      
    
    </summary>
    
      <category term="每日一题" scheme="https://LiuZiQiao.github.io/categories/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
    
      <category term="Array" scheme="https://LiuZiQiao.github.io/tags/Array/"/>
    
  </entry>
  
  <entry>
    <title>mySqrt</title>
    <link href="https://LiuZiQiao.github.io/2018/09/16/mySqrt/"/>
    <id>https://LiuZiQiao.github.io/2018/09/16/mySqrt/</id>
    <published>2018-09-16T01:33:22.000Z</published>
    <updated>2018-09-19T00:56:55.860Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><a id="more"></a><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>实现 int sqrt(int x) 函数。</p><p>计算并返回 x 的平方根，其中 x 是非负整数。</p><p>由于返回类型是整数，结果只保留整数的部分，小数部分将被舍去。</p><p>示例 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入: 4</span><br><span class="line">输出: 2</span><br><span class="line"></span><br><span class="line">输入: 8</span><br><span class="line">输出: 2</span><br><span class="line">说明: 8 的平方根是 2.82842..., </span><br><span class="line">     由于返回类型是整数，小数部分将被舍去。</span><br></pre></td></tr></table></figure></p><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p>通过二分法来确定取值区间<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mySqrt</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x &lt;= <span class="number">0</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> res = x;</span><br><span class="line"><span class="keyword">while</span> (res*res &gt; x)</span><br><span class="line">&#123;</span><br><span class="line">res = (res + x / res) / <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;\assets\js\APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h4 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h4&gt;&lt;p&gt;实现
      
    
    </summary>
    
    
      <category term="二分法" scheme="https://LiuZiQiao.github.io/tags/%E4%BA%8C%E5%88%86%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>哈希表(下)</title>
    <link href="https://LiuZiQiao.github.io/2018/09/14/%E5%93%88%E5%B8%8C%E8%A1%A8(%E4%B8%8B)/"/>
    <id>https://LiuZiQiao.github.io/2018/09/14/哈希表(下)/</id>
    <published>2018-09-14T10:10:45.000Z</published>
    <updated>2018-09-19T10:13:22.778Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><a id="more"></a><h3 id="哈希冲突的开散列方式"><a href="#哈希冲突的开散列方式" class="headerlink" title="哈希冲突的开散列方式"></a>哈希冲突的开散列方式</h3><p>在我的博客<a href="hhttps://LiuZiQiao.github.io/2018/09/07/哈希表(上">哈希表上</a>中详细介绍了哈希的概念以及处理哈希冲突的闭散列方式。在本文章中，主要介绍处理哈希冲突的另一种方式：开散列(链地址)。</p><h4 id="开散列的概念"><a href="#开散列的概念" class="headerlink" title="开散列的概念"></a>开散列的概念</h4><p>开散列：又叫链地址法、开链法。首先对关键码集合用哈希函数计算哈希地址，具有相同哈希地址的关键码归于同一子集合中，每一个子集合称为一个桶，各个桶中的元素通过一个单链表的方式链接起来（可以头插的方式将桶中元素链接起来），链表的第一个节点存放在哈希表中。</p><h4 id="代码实现部分"><a href="#代码实现部分" class="headerlink" title="代码实现部分"></a>代码实现部分</h4><p>关于代码的编程思路，在具体代码中有详细的说明！</p><h5 id="头文件的定义"><a href="#头文件的定义" class="headerlink" title="头文件的定义"></a>头文件的定义</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> KeyType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">KeyType key;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;Node;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">HashBucket</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">KeyType size;</span><br><span class="line">KeyType capacity;</span><br><span class="line">Node ** <span class="built_in">array</span>;</span><br><span class="line">&#125;HashBucket;</span><br></pre></td></tr></table></figure><h5 id="初始化及销毁操作"><a href="#初始化及销毁操作" class="headerlink" title="初始化及销毁操作"></a>初始化及销毁操作</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">HashBucketInit</span><span class="params">(HashBucket *pHB,<span class="keyword">int</span> capacity)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">pHB-&gt;<span class="built_in">array</span> = (Node **)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node*)* capacity);</span><br><span class="line">pHB-&gt;capacity = capacity;</span><br><span class="line">pHB-&gt;size = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; capacity; i++)</span><br><span class="line">&#123;</span><br><span class="line">pHB-&gt;<span class="built_in">array</span>[i] = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ListDestory</span><span class="params">(Node *first)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Node *next = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">for</span> (Node *cur = first; cur != <span class="literal">NULL</span>;cur = next)</span><br><span class="line">&#123;</span><br><span class="line">next = cur-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(cur);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">HashBucketDestory</span><span class="params">(HashBucket *pHB)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//需要先释放哈希桶 链表</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pHB-&gt;capacity; i++)</span><br><span class="line">&#123;</span><br><span class="line">ListDestory(pHB-&gt;<span class="built_in">array</span>[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//释放哈希桶</span></span><br><span class="line"><span class="built_in">free</span>(pHB-&gt;<span class="built_in">array</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="查找操作"><a href="#查找操作" class="headerlink" title="查找操作"></a>查找操作</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Node *<span class="title">HashFind</span><span class="params">(HashBucket* pHB,KeyType key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> index = key % pHB-&gt;capacity;</span><br><span class="line">Node *cur = pHB-&gt;<span class="built_in">array</span>[index];</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (cur != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (cur-&gt;key == key)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> cur;</span><br><span class="line">&#125;</span><br><span class="line">cur = cur-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="插入操作"><a href="#插入操作" class="headerlink" title="插入操作"></a>插入操作</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">HashInsert</span><span class="params">(HashBucket *pHB, <span class="keyword">int</span> key)</span></span>;</span><br><span class="line"><span class="comment">//插入之前我们判断是否需要扩容</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">IsExtend</span><span class="params">(HashBucket *pHB)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (pHB-&gt;size&lt;pHB-&gt;capacity)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">HashBucket *newHB = <span class="literal">NULL</span>;</span><br><span class="line">HashBucketInit(newHB,pHB-&gt;capacity*<span class="number">2</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pHB-&gt;capacity * <span class="number">2</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (Node *cur = pHB-&gt;<span class="built_in">array</span>[i]; cur != <span class="literal">NULL</span>;cur = cur-&gt;next)</span><br><span class="line">&#123;</span><br><span class="line">HashInsert(newHB,cur-&gt;key);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">HashBucketDestory(pHB);</span><br><span class="line">pHB-&gt;<span class="built_in">array</span> = newHB-&gt;<span class="built_in">array</span>;</span><br><span class="line">pHB-&gt;capacity = newHB-&gt;capacity;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//和开放地址不同的是，此时的插入不需要考虑负载因子</span></span><br><span class="line"><span class="comment">//插入成功返回0，失败返回-1</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">HashInsert</span><span class="params">(HashBucket *pHB,<span class="keyword">int</span> key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">IsExtend(pHB);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (HashFind(pHB,key) != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> index = key % pHB-&gt;capacity;</span><br><span class="line"></span><br><span class="line">Node *first = pHB-&gt;<span class="built_in">array</span>[index];</span><br><span class="line">Node *newNode = (Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line"></span><br><span class="line">newNode-&gt;key = key;</span><br><span class="line">newNode-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//头插</span></span><br><span class="line">newNode-&gt;next = first;</span><br><span class="line">pHB-&gt;<span class="built_in">array</span>[index] = newNode;  <span class="comment">//将新插入的结点地址改为原来在这个位置结点的地址</span></span><br><span class="line">pHB-&gt;size++;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除操作</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">HashBucketRemove</span><span class="params">(HashBucket *pHB,KeyType key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (HashFind(pHB, key) == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">Node *pre = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">int</span> index = key % pHB-&gt;capacity;</span><br><span class="line"><span class="keyword">for</span> (Node *cur = pHB-&gt;<span class="built_in">array</span>[index];cur != <span class="literal">NULL</span>;cur = cur-&gt;next)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (cur-&gt;key == key)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//删除</span></span><br><span class="line"><span class="keyword">if</span> (pre == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//如果要删除的结点是第一个结点</span></span><br><span class="line">pHB-&gt;<span class="built_in">array</span>[index] = cur-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">pre-&gt;next = cur-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">free</span>(cur);</span><br><span class="line">pHB-&gt;size--;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">pre = cur;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="打印操作"><a href="#打印操作" class="headerlink" title="打印操作"></a>打印操作</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">HashBucketPrint</span><span class="params">(HashBucket *pHB)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Node *pre = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;pHB-&gt;capacity;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (pHB-&gt;<span class="built_in">array</span>[i] != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (Node *cur = pHB-&gt;<span class="built_in">array</span>[i]; cur != <span class="literal">NULL</span>;cur = pre)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d --&gt; %p --&gt; %d\t"</span>,cur-&gt;key%pHB-&gt;capacity,cur,cur-&gt;key);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">pre = cur-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="测试操作"><a href="#测试操作" class="headerlink" title="测试操作"></a>测试操作</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">HashBucketTest</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">HashBucket hb;</span><br><span class="line">HashBucketInit(&amp;hb,<span class="number">11</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\n"</span>, HashInsert(&amp;hb, <span class="number">11</span>)==<span class="number">1</span> ? <span class="string">"插入成功"</span>:<span class="string">"插入失败"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\n"</span>, HashInsert(&amp;hb, <span class="number">13</span>)==<span class="number">1</span> ? <span class="string">"插入成功"</span>:<span class="string">"插入失败"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\n"</span>, HashInsert(&amp;hb, <span class="number">12</span>)==<span class="number">1</span> ? <span class="string">"插入成功"</span>:<span class="string">"插入失败"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\n"</span>, HashInsert(&amp;hb, <span class="number">22</span>)==<span class="number">1</span> ? <span class="string">"插入成功"</span>:<span class="string">"插入失败"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\n"</span>, HashInsert(&amp;hb, <span class="number">23</span>)==<span class="number">1</span> ? <span class="string">"插入成功"</span>:<span class="string">"插入失败"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\n"</span>, HashInsert(&amp;hb, <span class="number">16</span>)==<span class="number">1</span> ? <span class="string">"插入成功"</span>:<span class="string">"插入失败"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\n"</span>, HashInsert(&amp;hb, <span class="number">19</span>)==<span class="number">1</span> ? <span class="string">"插入成功"</span>:<span class="string">"插入失败"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\n"</span>, HashBucketRemove(&amp;hb, <span class="number">19</span>) == <span class="number">0</span> ? <span class="string">"删除成功"</span> : <span class="string">"删除失败"</span>);</span><br><span class="line"></span><br><span class="line">HashBucketPrint(&amp;hb);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;\assets\js\APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;哈希冲突的开散列方式&quot;&gt;&lt;a href=&quot;#哈希冲突的开散列方式&quot; class=&quot;headerlink&quot; title=&quot;哈希冲突
      
    
    </summary>
    
      <category term="数据结构" scheme="https://LiuZiQiao.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="链表" scheme="https://LiuZiQiao.github.io/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>反转整数</title>
    <link href="https://LiuZiQiao.github.io/2018/09/13/%E5%8F%8D%E8%BD%AC%E6%95%B4%E6%95%B0/"/>
    <id>https://LiuZiQiao.github.io/2018/09/13/反转整数/</id>
    <published>2018-09-13T15:01:43.000Z</published>
    <updated>2018-09-19T00:57:50.119Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><a id="more"></a><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>给定一个 32 位有符号整数，将整数中的数字进行反转。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">示例 1:</span><br><span class="line"></span><br><span class="line">输入: 123</span><br><span class="line">输出: 321</span><br><span class="line"> 示例 2:</span><br><span class="line"></span><br><span class="line">输入: -123</span><br><span class="line">输出: -321</span><br><span class="line">示例 3:</span><br><span class="line"></span><br><span class="line">输入: 120</span><br><span class="line">输出: 21</span><br></pre></td></tr></table></figure></p><p><strong>注意:</strong></p><p>假设我们的环境只能存储 32 位有符号整数，其数值范围是 [−231,  231 − 1]。根据这个假设，如果反转后的整数溢出，则返回 0。</p><h4 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h4><p><strong>Java解决方案</strong><br>安照正常的思考，我们的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (x!= <span class="number">0</span>) &#123;</span><br><span class="line">         </span><br><span class="line">temp = temp *<span class="number">10</span> +x%<span class="number">10</span>;</span><br><span class="line">x /= <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (temp &lt;Integer.MIN_VALUE||temp&gt;Integer.MAX_VALUE) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当输入1245678993<br>输出了-296201875<br>细心的人就会发现，此时栈溢出了；   </p><p>原因是多乘了一次10，解决办法就是，先判断是否已经栈溢出，再进行乘以10<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (x!= <span class="number">0</span>) &#123;</span><br><span class="line">           <span class="keyword">if</span> (temp &lt;Integer.MIN_VALUE/<span class="number">10</span>||temp&gt;Integer.MAX_VALUE/<span class="number">10</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">temp = temp *<span class="number">10</span> +x%<span class="number">10</span>;</span><br><span class="line">x /= <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>C语言解决方案</strong><br>和java一样，先判断是否越界，再进行反转操作，这里我们需要引入头文件”limits.h”<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span> x)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (x != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//正数是否越界</span></span><br><span class="line"><span class="keyword">if</span> (temp &gt; <span class="number">0</span> &amp;&amp; ((temp == INT_MAX / <span class="number">10</span> &amp;&amp; x % <span class="number">10</span> &gt; INT_MAX % <span class="number">10</span>) || temp &gt; INT_MAX / <span class="number">10</span>))</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//负数是否越界</span></span><br><span class="line"><span class="keyword">if</span> (temp &lt; <span class="number">0</span> &amp;&amp; ((temp == INT_MIN / <span class="number">10</span> &amp;&amp; x % <span class="number">10</span> &lt; (<span class="keyword">unsigned</span>)INT_MIN % <span class="number">10</span>) || temp &lt; INT_MIN / <span class="number">10</span>))</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">temp = temp * <span class="number">10</span> + x % <span class="number">10</span>;</span><br><span class="line">x /= <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;\assets\js\APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h4 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h4&gt;&lt;p&gt;给定
      
    
    </summary>
    
      <category term="每日一题" scheme="https://LiuZiQiao.github.io/categories/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
    
      <category term="java" scheme="https://LiuZiQiao.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>AddTwoNumbers</title>
    <link href="https://LiuZiQiao.github.io/2018/09/12/AddTwoNumbers/"/>
    <id>https://LiuZiQiao.github.io/2018/09/12/AddTwoNumbers/</id>
    <published>2018-09-12T04:06:40.000Z</published>
    <updated>2018-09-19T00:58:13.216Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><a id="more"></a><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>给定两个非空链表来表示两个非负整数。位数按照逆序方式存储，它们的每个节点只存储单个数字。将两数相加返回一个新的链表。</p><p>你可以假设除了数字 0 之外，这两个数字都不会以零开头。</p><p>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：(2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)</span><br><span class="line">输出：7 -&gt; 0 -&gt; 8</span><br><span class="line">原因：342 + 465 = 807</span><br></pre></td></tr></table></figure></p><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> val;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125; ListNode;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> ListNode * <span class="title">CreateNode</span><span class="params">(<span class="keyword">int</span> data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ListNode *newNode = (ListNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ListNode));</span><br><span class="line">assert(newNode);</span><br><span class="line">newNode-&gt;val = data;</span><br><span class="line">newNode-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> newNode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ListInsert</span><span class="params">(ListNode **<span class="built_in">list</span>,<span class="keyword">int</span> data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//if (*list == NULL)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line">ListNode *newNode = CreateNode(data);</span><br><span class="line"></span><br><span class="line">newNode-&gt;next = *<span class="built_in">list</span>;</span><br><span class="line">*<span class="built_in">list</span> = newNode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ListNode* <span class="title">addTwoNumbers</span><span class="params">(  ListNode *list1,<span class="keyword">const</span> ListNode *list2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> num1 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> num2 = <span class="number">0</span>;</span><br><span class="line">ListNode* l1 = list1;</span><br><span class="line">ListNode* l2 = list2;</span><br><span class="line"><span class="keyword">while</span> (l1 != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">num1 = num1*<span class="number">10</span>+l1-&gt;val;</span><br><span class="line">l1 = l1-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,num1); <span class="comment">// 321</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (l2 != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">num2 = num2*<span class="number">10</span>+l2-&gt;val;</span><br><span class="line">l2 = l2-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, num2);  <span class="comment">// 654</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> sum = num1 + num2;  <span class="comment">// 975</span></span><br><span class="line"></span><br><span class="line">ListNode *newNode = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (sum&gt;<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">ListInsert(&amp;newNode, sum %<span class="number">10</span>);</span><br><span class="line">sum = sum / <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*int lg = 1;</span></span><br><span class="line"><span class="comment">int temp = sum;</span></span><br><span class="line"><span class="comment">while (temp &gt; 10) &#123;</span></span><br><span class="line"><span class="comment">temp = temp / 10;</span></span><br><span class="line"><span class="comment">lg *= 10;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">while (sum &gt; 0) &#123;</span></span><br><span class="line"><span class="comment">ListInsert(&amp;newNode, sum/lg);</span></span><br><span class="line"><span class="comment">sum = sum - (sum / lg)*lg;</span></span><br><span class="line"><span class="comment">lg = lg / 10;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="comment">/*while (sum&gt;9)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">ListInsert(&amp;newNode,sum);</span></span><br><span class="line"><span class="comment">sum = sum % 10;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">ListInsert(&amp;newNode,sum);*/</span></span><br><span class="line"><span class="keyword">return</span> newNode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Print</span><span class="params">(<span class="keyword">int</span> sum)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (sum &lt; <span class="number">9</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>, sum);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">Print(sum/<span class="number">10</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>,sum%<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;\assets\js\APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h4 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h4&gt;&lt;p&gt;给定
      
    
    </summary>
    
      <category term="每日一题" scheme="https://LiuZiQiao.github.io/categories/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
    
      <category term="List" scheme="https://LiuZiQiao.github.io/tags/List/"/>
    
  </entry>
  
  <entry>
    <title>maxProfit</title>
    <link href="https://LiuZiQiao.github.io/2018/09/12/maxProfit/"/>
    <id>https://LiuZiQiao.github.io/2018/09/12/maxProfit/</id>
    <published>2018-09-12T02:55:17.000Z</published>
    <updated>2018-09-19T00:58:03.464Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><a id="more"></a><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。</p><p>如果你最多只允许完成一笔交易（即买入和卖出一支股票），设计一个算法来计算你所能获取的最大利润。</p><p>注意你不能在买入股票前卖出股票。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">示例 1:</span><br><span class="line"></span><br><span class="line">输入: [7,1,5,3,6,4]</span><br><span class="line">输出: 5</span><br><span class="line">解释: 在第 2 天（股票价格 = 1）的时候买入，在第 5 天（股票价格 = 6）的时候卖出，最大利润 = 6-1 = 5 。</span><br><span class="line">     注意利润不能是 7-1 = 6, 因为卖出价格需要大于买入价格。</span><br></pre></td></tr></table></figure></p><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><ul><li>C语言实现<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>* prices, <span class="keyword">int</span> pricesSize)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> s = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; pricesSize; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (j =i+<span class="number">1</span>; j &lt; pricesSize; j++)&#123;</span><br><span class="line">s = prices[j] - prices[i];</span><br><span class="line">max = (s &gt; max ? s : max);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;\assets\js\APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h4 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h4&gt;&lt;p&gt;给定
      
    
    </summary>
    
      <category term="每日一题" scheme="https://LiuZiQiao.github.io/categories/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
    
      <category term="Array" scheme="https://LiuZiQiao.github.io/tags/Array/"/>
    
  </entry>
  
  <entry>
    <title>七大排序算法</title>
    <link href="https://LiuZiQiao.github.io/2018/09/11/%E4%B8%83%E5%A4%A7%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    <id>https://LiuZiQiao.github.io/2018/09/11/七大排序算法/</id>
    <published>2018-09-11T15:14:16.000Z</published>
    <updated>2018-09-19T00:52:48.197Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><a id="more"></a><p>排序分为内部排序和外部排序，内部排序是数据记录在内存中进行排序，而外部排序是因排序的数据很大，一次不能容纳全部的排序记录，在排序过程中需要访问外存。<br>我们这里的八大排序就是内部排序。</p><p> <strong><em>快速排序：是目前基于比较的内部排序中被认为是最好的方法，当待排序的关键字是随机分布时，快速排序的平均时间最短；</em></strong></p><h4 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h4><p><strong>基本思想：</strong></p><p>在要排序的一组数中，对当前还未排好序的范围内的全部数，自上而下对相邻的两个数依次进行比较和调整，让较大的数往下沉，较小的往上冒。即：每当两相邻的数比较后发现它们的排序与排序要求相反时，就将它们互换。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//冒泡排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BubbleSort</span><span class="params">(<span class="keyword">int</span> *<span class="built_in">array</span>,<span class="keyword">int</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> flag = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">&#123;</span><br><span class="line">flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i+<span class="number">1</span>; j &lt; size; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">array</span>[i]&gt;<span class="built_in">array</span>[j])</span><br><span class="line">&#123;</span><br><span class="line">Swap(&amp;<span class="built_in">array</span>[i],&amp;<span class="built_in">array</span>[j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (flag == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h4><h5 id="单向选择排序"><a href="#单向选择排序" class="headerlink" title="单向选择排序"></a>单向选择排序</h5><p><strong>基本思想：</strong></p><p>在要排序的一组数中，选出最小（或者最大）的一个数与第1个位置的数交换；然后在剩下的数当中再找最小（或者最大）的与第2个位置的数交换，依次类推，直到第n-1个元素（倒数第二个数）和第n个元素（最后一个数）比较为止。<br><strong>操作方法：</strong></p><p>第一趟，从n 个记录中找出关键码最小的记录与第一个记录交换；</p><p>第二趟，从第二个记录开始的n-1 个记录中再选出关键码最小的记录与第二个记录交换；</p><p>以此类推…..</p><p>第i 趟，则从第i 个记录开始的n-i+1 个记录中选出关键码最小的记录与第i 个记录交换，</p><p>直到整个序列按关键码有序。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//选择排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SelectSort</span><span class="params">(<span class="keyword">int</span> *<span class="built_in">array</span>,<span class="keyword">int</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> min;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">&#123;</span><br><span class="line">min = i;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; size; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">array</span>[j] &lt; <span class="built_in">array</span>[min])</span><br><span class="line">&#123;</span><br><span class="line">min = j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (i != min)</span><br><span class="line">&#123;</span><br><span class="line">Swap(&amp;<span class="built_in">array</span>[min],&amp;<span class="built_in">array</span>[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h5 id="双向选择排序"><a href="#双向选择排序" class="headerlink" title="双向选择排序"></a>双向选择排序</h5><p><strong>基本思路</strong><br>与单向选择排序一样，在从头部开始排序的同时，我们让其从末端也进行排序，当前后前后两个下标索引相遇就停止，具体代码如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//双向选择排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SelectSort</span><span class="params">(<span class="keyword">int</span> arr[],<span class="keyword">int</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> minSpace = <span class="number">0</span>; </span><br><span class="line"><span class="keyword">int</span> maxSpace = size - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (minSpace &lt; maxSpace)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> minPos = minSpace;</span><br><span class="line"><span class="keyword">int</span> maxPos = minSpace;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = minSpace +<span class="number">1</span>; i &lt;= maxSpace; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (arr[i] &gt; arr[maxPos])</span><br><span class="line">&#123;</span><br><span class="line">maxPos = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (arr[i] &lt; arr[minPos])</span><br><span class="line">&#123;</span><br><span class="line">minPos = i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Swap(arr + minSpace,arr + minPos);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (minSpace == maxPos)</span><br><span class="line">&#123;</span><br><span class="line">maxPos = minPos;</span><br><span class="line">&#125;</span><br><span class="line">Swap(arr + maxSpace,arr + maxPos);</span><br><span class="line">minSpace++;</span><br><span class="line">maxSpace--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序:"></a>插入排序:</h4><p><strong>基本思想</strong><br>将一个记录插入到已排序好的有序表中，从而得到一个新，记录数增1的有序表。即：先将序列的第1个记录看成是一个有序的子序列，然后从第2个记录逐个进行插入，直至整个序列有序为止。</p><p>要点：设立哨兵，作为临时存储和判断数组边界之用。<br>如果碰见一个和插入元素相等的，那么插入元素把想插入的元素放在相等元素的后面。所以，相等元素的前后顺序没有改变，从原无序序列出去的顺序就是排好序后的顺序，所以插入排序是稳定的。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//直接插入排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InsertSort</span><span class="params">(<span class="keyword">int</span> *<span class="built_in">array</span>, <span class="keyword">int</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> temp,i,j;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; size; i++)</span><br><span class="line">&#123;</span><br><span class="line">temp = <span class="built_in">array</span>[i];<span class="comment">//取出一个未排序的数</span></span><br><span class="line"><span class="keyword">for</span> (j = i<span class="number">-1</span>; j &gt;= <span class="number">0</span> ;j--) <span class="comment">//在排序序列中查找位置</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(temp&lt;<span class="built_in">array</span>[j])</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">array</span>[j + <span class="number">1</span>] = <span class="built_in">array</span>[j]; <span class="comment">// 向后移动数据</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">array</span>[j+<span class="number">1</span>] = temp;  <span class="comment">//将数据插入</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//优化后的插入排序--折半插入排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BinaryInsertSort</span><span class="params">(<span class="keyword">int</span> *<span class="built_in">array</span>,<span class="keyword">int</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, j, left, right, mid;</span><br><span class="line"><span class="keyword">int</span> key;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i&lt;size;i++)</span><br><span class="line">&#123;</span><br><span class="line">key = <span class="built_in">array</span>[i];</span><br><span class="line">left = <span class="number">0</span>;</span><br><span class="line">right = i - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (left &lt;= right)</span><br><span class="line">&#123;</span><br><span class="line">mid = left + (right - left);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">array</span>[mid]&lt;= key)</span><br><span class="line">&#123;</span><br><span class="line">left = mid + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">right = mid - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (j = i; j&gt;left; j--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">array</span>[j] = <span class="built_in">array</span>[j - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">array</span>[left] = key;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//希尔排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShellSort</span><span class="params">(<span class="keyword">int</span> *arr,<span class="keyword">int</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> d, i, j, x;</span><br><span class="line">d = size / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">while</span>(d&gt;=<span class="number">1</span>)  <span class="comment">//循环至增量为1时结束</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> ( i = d; i &lt; size; i++)</span><br><span class="line">&#123;</span><br><span class="line">x = arr[i];  <span class="comment">//获取序列中的下一个数据</span></span><br><span class="line">j = i - d;<span class="comment">// 序列中前一个数据的序号</span></span><br><span class="line"><span class="keyword">while</span> (j &gt;= <span class="number">0</span>&amp;&amp;arr[j]&gt;x) <span class="comment">// 下一个数大于前一个数</span></span><br><span class="line">&#123;</span><br><span class="line">arr[j + d] = arr[j];  <span class="comment">//将后一个数向前移动</span></span><br><span class="line">j = j - d;<span class="comment">//修改序号，继续向前比较</span></span><br><span class="line">&#125;</span><br><span class="line">arr[j + d] = x;  <span class="comment">//保存数据</span></span><br><span class="line">&#125;</span><br><span class="line">d /= <span class="number">2</span>;  <span class="comment">//缩小增量</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h4><p>堆排序:树形选择排序，将带排序记录看成完整的二叉树，第一步：建立初堆，第二步：调整堆   </p><h5 id="方案一：降序排序，建立小堆"><a href="#方案一：降序排序，建立小堆" class="headerlink" title="方案一：降序排序，建立小堆"></a>方案一：降序排序，建立小堆</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第二步：调整堆</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">HeapAdjust</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> s, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//调整为小根堆，从小到大</span></span><br><span class="line"><span class="keyword">int</span> rc = arr[s];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">2</span> * s; j &lt;= n; j *= <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (j&lt;n &amp;&amp; arr[j]&gt;arr[j + <span class="number">1</span>])<span class="comment">//判断左右子数大小</span></span><br><span class="line">j++;</span><br><span class="line"><span class="keyword">if</span> (rc &lt;= arr[j])</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">arr[s] = arr[j];</span><br><span class="line">s = j;</span><br><span class="line">&#125;</span><br><span class="line">arr[s] = rc;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//第一步：建初堆</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreatHeap</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//小根堆</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = n / <span class="number">2</span>; i &gt; <span class="number">0</span>; i--)</span><br><span class="line">HeapAdjust(arr, i, n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//整合</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">HeapSort</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">CreatHeap(arr, n);<span class="comment">//第一步，建立初堆</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt; <span class="number">1</span>; i--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x = arr[<span class="number">1</span>];<span class="comment">//堆顶与最后一个元素互换</span></span><br><span class="line">arr[<span class="number">1</span>] = arr[i];</span><br><span class="line">arr[i] = x;</span><br><span class="line">HeapAdjust(arr, <span class="number">1</span>, i - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="方案二：升序排序，建立大堆"><a href="#方案二：升序排序，建立大堆" class="headerlink" title="方案二：升序排序，建立大堆"></a>方案二：升序排序，建立大堆</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AdjustDown</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> size, <span class="keyword">int</span> root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span>right = <span class="number">0</span>;;</span><br><span class="line"><span class="keyword">int</span> maxChild = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">left = <span class="number">2</span> * root + <span class="number">1</span>;</span><br><span class="line">right = <span class="number">2</span> * root + <span class="number">2</span>;</span><br><span class="line"><span class="comment">//判断左孩子是否越界</span></span><br><span class="line"><span class="keyword">if</span> (left &gt;= size)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断左右孩子谁是最大的</span></span><br><span class="line">maxChild = left;   <span class="comment">//假设是左孩子</span></span><br><span class="line"><span class="keyword">if</span> (right &lt;size &amp;&amp; arr[right] &gt; arr[left])</span><br><span class="line">&#123;</span><br><span class="line">maxChild = right;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断最大的是不是在根处，不是的话进行交换</span></span><br><span class="line"><span class="keyword">if</span> (arr[root] &gt;= arr[maxChild])</span><br><span class="line">&#123;  <span class="comment">//判断是否满足大堆性质</span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">Swap(&amp;arr[root],&amp;arr[maxChild]);</span><br><span class="line"></span><br><span class="line">root = maxChild;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">HeapSort</span><span class="params">(<span class="keyword">int</span> arr[],<span class="keyword">int</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//建立初堆</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = (size - <span class="number">2</span>) / <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">&#123;</span><br><span class="line">AdjustDown(arr, size, i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; size - <span class="number">1</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line">Swap(&amp;arr[<span class="number">0</span>],&amp;arr[size-j<span class="number">-1</span>]);</span><br><span class="line">AdjustDown(arr,size-j<span class="number">-1</span>,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h4><p>思路：利用递归的方法递归划分一个无序数组，直到每个数组只有一个元素时，对相邻的两个数组进行归并。</p><h5 id="递归写法"><a href="#递归写法" class="headerlink" title="递归写法"></a>递归写法</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//归并排序</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第三步：合并两个有序数组为一个数组</span></span><br><span class="line"><span class="keyword">void</span> _MergeArray(<span class="keyword">int</span> arr[], <span class="keyword">int</span> begin, <span class="keyword">int</span> mid, <span class="keyword">int</span> end, <span class="keyword">int</span>* tmp)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> cur1 = begin;</span><br><span class="line"><span class="keyword">int</span> cur2 = mid;</span><br><span class="line"><span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (cur1 &lt; mid &amp;&amp; cur2 &lt; end)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (arr[cur1] &lt; arr[cur2])</span><br><span class="line">&#123;</span><br><span class="line">tmp[index] = arr[cur1];</span><br><span class="line">index++;</span><br><span class="line">cur1++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">tmp[index] = arr[cur2];</span><br><span class="line">index++;</span><br><span class="line">cur2++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//当cur1指向的数组元素都比较完后，cur2指向的数组还有元素时，将cur2指向的全部元素拷贝到tmp中</span></span><br><span class="line"><span class="keyword">while</span> (cur1 &lt; mid)</span><br><span class="line">&#123;</span><br><span class="line">tmp[index++] = arr[cur1++];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (cur2 &lt; end)</span><br><span class="line">&#123;</span><br><span class="line">tmp[index++] = arr[cur2++];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//最后将tmp中的元素全部拷贝到原来的数组中</span></span><br><span class="line"><span class="built_in">memcpy</span>(arr + begin, tmp, <span class="keyword">sizeof</span>(<span class="keyword">int</span>)*index);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//对无序数组进行划分为只有一个元素的数组后再对数组进行归并</span></span><br><span class="line"><span class="keyword">void</span> _MergeSort(<span class="keyword">int</span> arr[],<span class="keyword">int</span> begin,<span class="keyword">int</span> end,<span class="keyword">int</span> *tmp)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (end - begin &lt;= <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> mid = begin + (end - begin) / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">_MergeSort(arr,begin,mid,tmp);</span><br><span class="line">_MergeSort(arr, mid, end, tmp);</span><br><span class="line">_MergeArray(arr,begin,mid,end,tmp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MergeSort</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (size &lt;= <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> *tmp = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>)*size);</span><br><span class="line">_MergeSort(arr, <span class="number">0</span>, size, tmp);</span><br><span class="line"><span class="built_in">free</span>(tmp);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="非递归写法"><a href="#非递归写法" class="headerlink" title="非递归写法"></a>非递归写法</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MergeSort</span><span class="params">(<span class="keyword">int</span> arr[],<span class="keyword">int</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (size &lt;= <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> *tmp = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>)*size);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> gap = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (; gap &lt; size; gap*=<span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (;i &lt; size; i +=<span class="number">2</span>* gap)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> begin = i;</span><br><span class="line"><span class="keyword">int</span> mid = gap + i;</span><br><span class="line"><span class="keyword">if</span> (mid &gt; size)</span><br><span class="line">&#123;</span><br><span class="line">mid = size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> end = i + <span class="number">2</span> * gap;</span><br><span class="line"><span class="keyword">if</span> (end &gt; size)</span><br><span class="line">&#123;</span><br><span class="line">end = size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">_MergeArray(arr,begin,mid,end,tmp);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h4><h5 id="方法一：左右指针法"><a href="#方法一：左右指针法" class="headerlink" title="方法一：左右指针法"></a>方法一：左右指针法</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//左右指针法，选的基准值放在最右边</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Partion</span><span class="params">(<span class="keyword">int</span> arr[],<span class="keyword">int</span> left,<span class="keyword">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> pivot = arr[right];</span><br><span class="line"><span class="keyword">int</span> begin = left;</span><br><span class="line"><span class="keyword">int</span> end = right;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (begin &lt; end)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (begin &lt; end &amp;&amp;arr[begin] &lt;= pivot)</span><br><span class="line">&#123;</span><br><span class="line">begin++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (begin &lt; end &amp;&amp;arr[end] &gt;= pivot)</span><br><span class="line">&#123; </span><br><span class="line">end--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (begin == end)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Swap(arr + begin,arr + end);</span><br><span class="line">&#125;</span><br><span class="line">Swap(arr + begin, arr + right);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> begin;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="方法二：挖坑法"><a href="#方法二：挖坑法" class="headerlink" title="方法二：挖坑法"></a>方法二：挖坑法</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//挖坑法</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Partion2</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> pivot = arr[right];</span><br><span class="line"><span class="keyword">int</span> begin = left;</span><br><span class="line"><span class="keyword">int</span> end = right;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (begin &lt; end)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (begin &lt; end &amp;&amp; arr[begin] &lt;= pivot)</span><br><span class="line">&#123;</span><br><span class="line">begin++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (begin == end)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">arr[end] = arr[begin];</span><br><span class="line"> </span><br><span class="line"><span class="keyword">while</span> (begin &lt; end &amp;&amp; arr[end] &gt;= pivot)</span><br><span class="line">&#123;</span><br><span class="line">end--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">arr[begin] = arr[end];</span><br><span class="line">&#125;</span><br><span class="line">arr[begin] = pivot;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> begin;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="方法三：前后指针法"><a href="#方法三：前后指针法" class="headerlink" title="方法三：前后指针法"></a>方法三：前后指针法</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//前后指针法</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Partion3</span><span class="params">(<span class="keyword">int</span> arr[],<span class="keyword">int</span> left,<span class="keyword">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> pivot = arr[right];</span><br><span class="line"><span class="keyword">int</span> part = left;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> cur = left; cur &lt;= right; cur++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (arr[cur] &lt; pivot)</span><br><span class="line">&#123;</span><br><span class="line">Swap(arr + cur, arr + part);</span><br><span class="line">part++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Swap(arr + right, arr + part);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> part;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="快速排序-1"><a href="#快速排序-1" class="headerlink" title="快速排序"></a>快速排序</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> _QuickSort(<span class="keyword">int</span> arr[],<span class="keyword">int</span> left,<span class="keyword">int</span> right)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (left &gt;= right)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> pivot = arr[right];  <span class="comment">//选取最右边的一个作为基准值</span></span><br><span class="line"><span class="keyword">int</span> part = Partion3(arr,left,right);</span><br><span class="line">_QuickSort(arr,left,part<span class="number">-1</span>);</span><br><span class="line">_QuickSort(arr,part+<span class="number">1</span>,right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QuickSort</span><span class="params">(<span class="keyword">int</span> arr[],<span class="keyword">int</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">_QuickSort(arr, <span class="number">0</span>, size - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;\assets\js\APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;排序分为内部排序和外部排序，内部排序是数据记录在内存中进行排序，而外部排序是因排序的数据很大，一次不能容纳全部的排序记录，在排序过程中需要
      
    
    </summary>
    
      <category term="数据结构" scheme="https://LiuZiQiao.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="算法" scheme="https://LiuZiQiao.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Linux基本操作上</title>
    <link href="https://LiuZiQiao.github.io/2018/09/10/Linux%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%E4%B8%8A/"/>
    <id>https://LiuZiQiao.github.io/2018/09/10/Linux基本操作上/</id>
    <published>2018-09-10T12:07:27.000Z</published>
    <updated>2018-09-24T05:22:55.313Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><a id="more"></a><h3 id="目录介绍"><a href="#目录介绍" class="headerlink" title="目录介绍"></a>目录介绍</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">/ 根目录</span><br><span class="line"></span><br><span class="line">/bin 存放必要的命令</span><br><span class="line"></span><br><span class="line">/boot 存放内核以及启动所需的文件等</span><br><span class="line"></span><br><span class="line">/dev 存放设备文件</span><br><span class="line"></span><br><span class="line">/etc 存放系统的配置文件</span><br><span class="line"></span><br><span class="line">/home 用户文件的主目录，用户数据存放在其主目录中</span><br><span class="line"></span><br><span class="line">/lib 存放必要的运行库</span><br><span class="line"></span><br><span class="line">/mnt 存放临时的映射文件系统，我们常把软驱和光驱挂装在这里的floppy和cdrom子目录下。</span><br><span class="line"></span><br><span class="line">/proc 存放存储进程和系统信息</span><br><span class="line"></span><br><span class="line">/root 超级用户的主目录</span><br><span class="line"></span><br><span class="line">/sbin 存放系统管理程序</span><br><span class="line"></span><br><span class="line">/tmp 存放临时文件的目录</span><br><span class="line"></span><br><span class="line">/usr 包含了一般不需要修改的应用程序，命令程序文件、程序库、手册和其它文档。</span><br><span class="line"></span><br><span class="line">/var 包含系统产生的经常变化的文件</span><br></pre></td></tr></table></figure><h3 id="基础指令"><a href="#基础指令" class="headerlink" title="基础指令"></a>基础指令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ls: 列出目录   </span><br><span class="line">-a ：全部的文件，连同隐藏档( 开头为 . 的文件) 一起列出来(常用)   </span><br><span class="line">-d ：仅列出目录本身，而不是列出目录内的文件数据(常用)   </span><br><span class="line">-l ：长数据串列出，包含文件的属性与权限等等数据；(常用)   </span><br><span class="line"></span><br><span class="line">cd：切换目录   </span><br><span class="line">pwd：显示目前的目录   </span><br><span class="line">mkdir：创建一个新的目录   </span><br><span class="line">创建多个层次文件时，需要加  -p</span><br></pre></td></tr></table></figure><p><strong><em>示例</em></strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost]# mkdir test1/test2/test3/test4</span><br><span class="line">mkdir: cannot create directory `test1/test2/test3/test4&apos;: </span><br><span class="line">No such file or directory       &lt;== 没办法直接创建此目录啊！</span><br><span class="line">[root@localhost]# mkdir -p test1/test2/test3/test4</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rmdir：删除一个空的目录   </span><br><span class="line">cp: 复制文件或目录</span><br></pre></td></tr></table></figure><h4 id="一些常用参数"><a href="#一些常用参数" class="headerlink" title="一些常用参数"></a>一些常用参数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">-a：相当于 -pdr的意思，至于pdr请参考下列说明；(常用)</span><br><span class="line"> </span><br><span class="line">-d：若来源档为连结档的属性(link file)，则复制连结档属性而非文件本身；</span><br><span class="line"> </span><br><span class="line">-f：为强制(force)的意思，若目标文件已经存在且无法开启，则移除后再尝试一次；</span><br><span class="line"> </span><br><span class="line">-i：若目标档(destination)已经存在时，在覆盖时会先询问动作的进行(常用)</span><br><span class="line"> </span><br><span class="line">-l：进行硬式连结(hard link)的连结档创建，而非复制文件本身；</span><br><span class="line"> </span><br><span class="line">-p：连同文件的属性一起复制过去，而非使用默认属性(备份常用)；</span><br><span class="line"> </span><br><span class="line">-r：递归持续复制，用於目录的复制行为；(常用)</span><br><span class="line"> </span><br><span class="line">-s：复制成为符号连结档 (symbolic link)，亦即『捷径』文件；</span><br><span class="line"> </span><br><span class="line">-u：若 destination 比 source 旧才升级 destination ！</span><br><span class="line">- rm: 移除文件或目录</span><br></pre></td></tr></table></figure><p><strong>选项与参数：</strong></p><p>-f ：就是 force的意思，忽略不存在的文件，不会出现警告信息；<br>-i ：互动模式，在删除前会询问使用者是否动作<br>-r ：递归删除啊！最常用在目录的删除了！这是非常危险的选项！！！   </p><ul><li>mv (移动文件与目录，或修改名称)<br>-f ：force 强制的意思，如果目标文件已经存在，不会询问而直接覆盖；<br>-i ：若目标文件 (destination) 已经存在时，就会询问是否覆盖！<br>-u ：若目标文件已经存在，且 source 比较新，才会升级 (update)   </li></ul><h3 id="文件内容查看"><a href="#文件内容查看" class="headerlink" title="文件内容查看"></a>文件内容查看</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">cat  由第一行开始显示文件内容   </span><br><span class="line">tac  从最后一行开始显示，可以看出 tac 是 cat 的倒著写！   </span><br><span class="line">nl   显示的时候，顺道输出行号！   </span><br><span class="line">more 一页一页的显示文件内容   </span><br><span class="line">空白键 (space)：代表向下翻一页；   </span><br><span class="line">Enter         ：代表向下翻『一行』；   </span><br><span class="line">/字串            ：代表在这个显示的内容当中，向下搜寻『字串』这个关键字；   </span><br><span class="line">:f            ：立刻显示出档名以及目前显示的行数；  </span><br><span class="line">q            ：代表立刻离开more，不再显示该文件内容。   </span><br><span class="line">b 或 [ctrl]-b ：代表往回翻页，不过这动作只对文件有用，对管线无用。   </span><br><span class="line">less 与 more 类似，但是比 more 更好的是，他可以往前翻页！   </span><br><span class="line">空白键    ：向下翻动一页；   </span><br><span class="line">[pagedown]：向下翻动一页；   </span><br><span class="line">[pageup]  ：向上翻动一页；   </span><br><span class="line">/字串     ：向下搜寻『字串』的功能；   </span><br><span class="line">?字串     ：向上搜寻『字串』的功能；   </span><br><span class="line">n         ：重复前一个搜寻 (与 / 或 ? 有关！)   </span><br><span class="line">N         ：反向的重复前一个搜寻 (与 / 或 ?    有关！)   </span><br><span class="line">q         ：离开 less 这个程序；   </span><br><span class="line"></span><br><span class="line">head 只看头几行 </span><br><span class="line">head [参数]...[文件]</span><br><span class="line">tail 只看尾巴几行</span><br><span class="line">-f 循环读取</span><br><span class="line">-n&lt;行数&gt;显示行数</span><br></pre></td></tr></table></figure><h4 id="时间相关的指令"><a href="#时间相关的指令" class="headerlink" title="时间相关的指令"></a>时间相关的指令</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">date 显示</span><br><span class="line">date 用法：date[OPTION]...[+FORMAT]</span><br></pre></td></tr></table></figure><p><strong>Cal指令</strong><br>命令格式 ： cal[参数][月份][年份]<br><strong>find指令</strong>：（非常重要） -name<br>语法：find pathname -option<br>功能：用于在文件树中查找文件，并作出相应的处理<br><strong>grep 指令</strong><br>语法：grep[选项]搜寻字符串 文件<br>功能：在文件中搜索字符串，将找到的行打印出来<br><strong>常用选项</strong>：</p><ul><li>-i:忽略大小写的不同，所以大小写视为相同</li><li>-n:顺便输出行号</li><li>-v:反向选择，亦即显示出没有’搜寻字符串’内容的那一行    </li></ul><p><strong>zip/unzip指令</strong><br>语法：zip压缩文件.zip目录或文件<br>功能：将目录或文件压缩成zip格式</p><p>常用选项：</p><ul><li>-r递归处理，将指令目录下的所有文件和子目录一并处理   </li></ul><p>举例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">将test目录压缩： zip test.zip test/*</span><br><span class="line">解压到tmp目录：unzip test.zip -d /tmp</span><br></pre></td></tr></table></figure></p><p><strong>tar指令</strong><br>tar [-cxtzjvf]文件与目录…参数：</p><ul><li>-c:建立一个压缩文件的参数指令（create）；</li><li>-x:解压一个压缩文件的参数指令；</li><li>-t:查看tarfile里面的文件；</li><li>-z:是否同时具有gzip的属性，是否需要用gzip压缩</li><li>-j:是否同时具有bzip2的属性，是否需要用bzip2压缩</li><li>-v:压缩过程中显示文件</li><li>-f:使用档名，f用在最后</li><li>-C:解压到指定目录<h4 id="重要的几个热键"><a href="#重要的几个热键" class="headerlink" title="重要的几个热键"></a>重要的几个热键</h4></li></ul><p>[ctrl]-c:让当前程序停止<br>[ctrl]-d:通常代表着：键盘输入结束的意思<br>[Tab]:按键具有命令补全和档案补齐功能</p><h4 id="关机"><a href="#关机" class="headerlink" title="关机"></a>关机</h4><p>shutdown [选项]<br>常见选项：</p><ul><li>-h：将系统服务停止后，立即关机</li><li>-r:在将系统服务停止之后就重新启动</li><li>-t sec:-t后面加秒数，意思是过几秒关机的意思</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;\assets\js\APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;目录介绍&quot;&gt;&lt;a href=&quot;#目录介绍&quot; class=&quot;headerlink&quot; title=&quot;目录介绍&quot;&gt;&lt;/a&gt;目录介绍&lt;/
      
    
    </summary>
    
      <category term="Linux" scheme="https://LiuZiQiao.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://LiuZiQiao.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>哈希表(上)</title>
    <link href="https://LiuZiQiao.github.io/2018/09/07/%E5%93%88%E5%B8%8C%E8%A1%A8(%E4%B8%8A)/"/>
    <id>https://LiuZiQiao.github.io/2018/09/07/哈希表(上)/</id>
    <published>2018-09-07T15:40:33.000Z</published>
    <updated>2018-09-19T00:44:03.657Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><a id="more"></a><h3 id="哈希冲突的闭散列处理方式"><a href="#哈希冲突的闭散列处理方式" class="headerlink" title="哈希冲突的闭散列处理方式"></a>哈希冲突的闭散列处理方式</h3><h4 id="哈希的概念"><a href="#哈希的概念" class="headerlink" title="哈希的概念"></a>哈希的概念</h4><p>在顺序搜索以及二叉树搜索树中，元素存储的位置与元素的关键码之间没有对应的关系，因此查找一个元素时，必须要经过关键码的多次比较，搜索效率取决于搜索过程中元素的比较次数。<br>理想的搜索方法是：可以不经过任何的比较，一次直接从中找到要搜索的元素。如果构造一种存储结构，通过某种函数使得元素的存储位置与元素的关键码之间有一一映射的关系，那么在查找过程中通过该哈希函数可以直接找到该元素。当向该存储结构中：</p><p>（1）插入元素时：根据某种函数利用待插元素的关键码计算出该元素的存储位置并按照此位置进行存放。</p><p>（2）搜索元素时：根据某种函数利用待搜索元素的关键码计算出该元素应该存储的位置，在该位置取出元素与搜索元素比较，若相等时则表示搜索成功，否则搜索失败。<br><strong>该方式即为哈希（散列）方法，哈希方法中使用的某种函数称为哈希（散列）函数，构造出来的存储结构称为哈希（散列）表。</strong></p><p><strong><em>举个例子</em></strong><br>数租={1,3,5,6,8}    哈希函数：Hash(key)=key%10<br>将key值代入到哈希函数中，从而取出该key值的存储位置，此时，搜索指定元素如8时，直接利用哈希函数计算出存储位置下标，将其对应的值与要搜索的值8比较，相等时，表示找到了，否则没找到。通过上述操作可以看出，搜索的速度非常快。</p><p>但是存在这样一个问题：当向数据集合中插入元素11时，将元素11存储在哪儿？依旧利用key=11计算出Hash(11)=11%10=1，那么原本应该存储在下标为1的位置，但是此时下标为1的位置已经有存储的元素1，对于出现的这种现象我们称为哈希冲突！<br><strong>处理哈希冲突有两种常见的处理方式</strong></p><h4 id="闭散列处理哈希冲突"><a href="#闭散列处理哈希冲突" class="headerlink" title="闭散列处理哈希冲突"></a>闭散列处理哈希冲突</h4><ul><li>闭散列：也叫开放地址法，当发生哈希冲突时，如果哈希表未被装满，说明哈希表中必然还有空位置，那么就可以把key存放在表中的“下一个”空位中。那么下一个空位置如何查找呢？</li></ul><p>我们用<strong>线性探测</strong>的方式寻找下一个空位置。下面举例介绍如何线性探测寻找下一个空位置去处理哈希冲突：</p><p>设关键码集合={1,3,5,6,8,11,12}，哈希表的大小为11，哈希函数的设计用<strong>除留余数法</strong>，即哈希函数为Hash(Key)=Key%10；<br>通过计算，<br>我们将1存放在下标为1的位置，<br>      3存放在下标为3的位置，<br>      5存放在下标为5的位置，<br>            ……<br>      12存放是应存放在下标为1的位置，但是该位置已经存放了1，我们就探测1的下一位置是否为空，即2的位置存放11；    </p><h4 id="代码实现部分"><a href="#代码实现部分" class="headerlink" title="代码实现部分"></a>代码实现部分</h4><h5 id="头文件定义"><a href="#头文件定义" class="headerlink" title="头文件定义"></a>头文件定义</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">enum</span></span><br><span class="line">&#123;</span><br><span class="line">EXIST,</span><br><span class="line">DELETE,</span><br><span class="line">EMPTY</span><br><span class="line">&#125;State;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> KeyType;</span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span> <span class="params">(*HashFunc)</span><span class="params">(KeyType key,<span class="keyword">int</span> capacity)</span></span>;  <span class="comment">//定义函数指针，参数类型为KeyType</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">HashElem</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">KeyType key;</span><br><span class="line">State state;</span><br><span class="line">&#125;HashElem;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">HashTable</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">HashElem *table;   </span><br><span class="line"><span class="keyword">int</span> size;<span class="comment">//数据个数</span></span><br><span class="line"><span class="keyword">int</span> capacity;<span class="comment">//容量</span></span><br><span class="line">HashFunc hashfunc; <span class="comment">//哈希函数</span></span><br><span class="line">&#125;HashTable;</span><br></pre></td></tr></table></figure><h5 id="初始化及销毁"><a href="#初始化及销毁" class="headerlink" title="初始化及销毁"></a>初始化及销毁</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化/销毁</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">HashInit</span><span class="params">(HashTable *pH,HashFunc hashfunc,<span class="keyword">int</span> capacity)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">pH-&gt;table = (HashElem*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(HashElem)*capacity);</span><br><span class="line">assert(pH-&gt;table);</span><br><span class="line"></span><br><span class="line">pH-&gt;size = <span class="number">0</span>;</span><br><span class="line">pH-&gt;hashfunc = hashfunc;</span><br><span class="line">pH-&gt;capacity = capacity;</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; capacity; i++)</span><br><span class="line">&#123;</span><br><span class="line">pH-&gt;table[i].state = EMPTY;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">HashDestroy</span><span class="params">(HashTable *pH)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">free</span>(pH-&gt;table);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h5><p><strong><em>插入之前，我们需要判断是否需要扩大容量，减小哈希冲突的概率</em></strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">HashInsert</span><span class="params">(HashTable *pH, KeyType key)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">IsExpand</span><span class="params">(HashTable *pH)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (pH-&gt;size &lt;=  pH-&gt;capacity * <span class="number">0.8</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">HashTable newHT;</span><br><span class="line">HashInit(&amp;newHT,pH-&gt;hashfunc, pH-&gt;capacity * <span class="number">2</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pH-&gt;capacity * <span class="number">2</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (pH-&gt;table[i].state == EXIST)</span><br><span class="line">&#123;</span><br><span class="line">HashInsert(&amp;newHT, pH-&gt;table[i].key);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">free</span>(pH-&gt;table);   <span class="comment">//释放原来的table</span></span><br><span class="line">pH-&gt;table = newHT.table; <span class="comment">//将新的table地址赋给</span></span><br><span class="line">pH-&gt;capacity = newHT.capacity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">HashInsert</span><span class="params">(HashTable *pH,KeyType key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">IsExpand(pH);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>  index = pH-&gt;hashfunc(key, pH-&gt;capacity);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (pH-&gt;table[index].key == key &amp;&amp; pH-&gt;table[index].state == EXIST)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pH-&gt;table[index].state != EXIST)</span><br><span class="line">&#123;</span><br><span class="line">pH-&gt;table[index].key = key;</span><br><span class="line">pH-&gt;table[index].state = EXIST;</span><br><span class="line">pH-&gt;size++;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">index = (index + <span class="number">1</span>) % pH-&gt;capacity;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h5 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查找</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">HashFind</span><span class="params">(HashTable *pH,KeyType  key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> index = pH-&gt;hashfunc(key,pH-&gt;capacity);</span><br><span class="line"><span class="keyword">while</span> (pH-&gt;table[index].state != EMPTY)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (pH-&gt;table[index].key == key)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> index;</span><br><span class="line">&#125;</span><br><span class="line">index = (index + <span class="number">1</span>) % pH-&gt;capacity;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">HashRemove</span><span class="params">(HashTable *pH,KeyType key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> index = pH-&gt;hashfunc(key,pH-&gt;capacity);</span><br><span class="line"><span class="keyword">while</span> (pH-&gt;table[index].state != EMPTY)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (pH-&gt;table[index].key == key &amp;&amp; pH-&gt;table[index].state == EXIST)</span><br><span class="line">&#123;</span><br><span class="line">pH-&gt;table[index].state = DELETE;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">index = (index + <span class="number">1</span>) % pH-&gt;capacity;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="打印出key所对应的value以及状态"><a href="#打印出key所对应的value以及状态" class="headerlink" title="打印出key所对应的value以及状态"></a>打印出key所对应的value以及状态</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintKeyValue</span><span class="params">(HashTable *pH)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"index --&gt; value --&gt;state\n"</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pH-&gt;size; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> index = pH-&gt;hashfunc(pH-&gt;table[i].key,pH-&gt;capacity);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d --&gt; %d  --&gt;%d\n"</span>,index,pH-&gt;table[index].key,pH-&gt;table[index].state);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><em>测试部分我就不在这里放了，有兴趣的话可以自行测试</em></strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;\assets\js\APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;哈希冲突的闭散列处理方式&quot;&gt;&lt;a href=&quot;#哈希冲突的闭散列处理方式&quot; class=&quot;headerlink&quot; title=&quot;
      
    
    </summary>
    
      <category term="数据结构" scheme="https://LiuZiQiao.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="https://LiuZiQiao.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="哈希表" scheme="https://LiuZiQiao.github.io/tags/%E5%93%88%E5%B8%8C%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>面向对象之集合框架</title>
    <link href="https://LiuZiQiao.github.io/2018/09/01/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%B9%8B%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/"/>
    <id>https://LiuZiQiao.github.io/2018/09/01/面向对象之集合框架/</id>
    <published>2018-09-01T15:11:49.000Z</published>
    <updated>2018-09-19T00:50:48.891Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><a id="more"></a><h3 id="一、集合框架的由来"><a href="#一、集合框架的由来" class="headerlink" title="一、集合框架的由来"></a>一、集合框架的由来</h3><p>Java 集合框架主要包括两种类型的容器，一种是集合（Collection），存储一个元素集合，另一种是图（Map），存储键/值对映射。Collection 接口又有 3 种子类型，List、Set和Queue，再下面是一些抽象类，最后是具体实现类，常用的有ArrayList、LinkedList、HashSet、LinkedHashSet、HashMap、LinkedHashMap 等等。</p><p>集合框架是一个用来代表和操纵集合的统一架构。所有的集合框架都包含如下内容：</p><ul><li><p>接口：是代表集合的抽象数据类型。例如 Collection、List、Set、Map 等。之所以定义多个接口，是为了以不同的方式操作集合对象</p></li><li><p>实现（类）：是集合接口的具体实现。从本质上讲，它们是可重复使用的数据结构，例如：ArrayList、LinkedList、HashSet、HashMap。</p></li><li><p>算法：是实现集合接口的对象里的方法执行的一些有用的计算，例如：搜索和排序。这些算法被称为多态，那是因为相同的方法可以在相似的接口上有着不同的实现。</p></li></ul><p>除了集合，该框架也定义了几个 Map 接口和类。Map 里存储的是键/值对。尽管Map不是集合，但是它们完全整合在集合中。</p><h3 id="二、数组与集合的区别"><a href="#二、数组与集合的区别" class="headerlink" title="二、数组与集合的区别"></a>二、数组与集合的区别</h3><p><strong>数组的特点：</strong></p><ol><li>只能存储同一种数据类型的数据。</li><li>一旦初始化，长度固定。 </li><li>数组中的元素与元素之间的内存地址是连续的。</li></ol><blockquote><p>注意： Object类型的数组可以存储任意类型的数据。</p><p>集合：集合是存储对象数据的集合容器。</p></blockquote><p><strong>集合比数组的优势:</strong></p><ol><li>集合可以存储任意类型的对象数据，数组只能存储同一种数据类型 的数据。</li><li>集合的长度是会发生变化的，数组的长度是固定的</li></ol><h3 id="三、collection之继承体系"><a href="#三、collection之继承体系" class="headerlink" title="三、collection之继承体系"></a>三、collection之继承体系</h3><p>Collection<e>接口是所有单列集合的共同父接口，下面列出了常用的Collection子类集合及其继承关系。   </e></p><h4 id="集合框架概述"><a href="#集合框架概述" class="headerlink" title="集合框架概述"></a>集合框架概述</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Collection   </span><br><span class="line">    |-----List有序(存储顺序和取出顺序一致)，可重复</span><br><span class="line">    |----ArrayList，线程不安全，底层使用数组实现，查询快，增删慢。效率高。</span><br><span class="line">            每次容量不足时，自增长度的一半，如下源码可知</span><br><span class="line">                  <span class="keyword">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    |----LinkedList ， 线程不安全，底层使用链表实现，查询慢，增删快。效率高</span><br><span class="line"> </span><br><span class="line">    |----Vector ， 线程安全，底层使用数组实现，查询快，增删慢。效率低         每次容量不足时，默认自增长度的一倍（如果不指定增量的话），如下源码可知</span><br><span class="line">                   <span class="keyword">int</span> newCapacity = oldCapacity + ((capacityIncrement &gt; <span class="number">0</span>) ?</span><br><span class="line">                                     capacityIncrement : oldCapacity);</span><br><span class="line">    |-----Set   元素唯一一个不包含重复元素的 collection。更确切地讲，set 不包含满足 e1.equals(e2) 的元素对 e1 和 e2，并且最多包含一个 <span class="keyword">null</span> 元素。</span><br><span class="line"> </span><br><span class="line">    |--HashSet 底层是由HashMap实现的，通过对象的hashCode方法与equals方法来保证插入元素的唯一性，无序(存储顺序和取出顺序不一致)。</span><br><span class="line"> </span><br><span class="line">    |--LinkedHashSet 底层数据结构由哈希表和链表组成。哈希表保证元素的唯一性，链表保证元素有序。(存储和取出是一致)</span><br><span class="line"> </span><br><span class="line">    |--TreeSet 基于 TreeMap 的 NavigableSet 实现。使用元素的自然顺序对元素进行排序，或者根据创建 set 时提供的 Comparator 进行排序，具体取决于使用的构造方法。 元素唯一。</span><br></pre></td></tr></table></figure><h3 id="四、Collection泛型接口"><a href="#四、Collection泛型接口" class="headerlink" title="四、Collection泛型接口"></a>四、Collection泛型接口</h3> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span></span><br><span class="line"><span class="function">             确保此 collection 包含指定的元素（可选操作）。    </span></span><br><span class="line"><span class="function">    <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span></span><br><span class="line"><span class="function">   将指定collection中的所有元素都添加到此collection 中（可选操作）。    </span></span><br><span class="line"><span class="function">    <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">             移除此 collection 中的所有元素（可选操作）。 </span></span><br><span class="line"><span class="function">    <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span> </span></span><br><span class="line"><span class="function">             如果此 collection 包含指定的元素，则返回 <span class="keyword">true</span>。 </span></span><br><span class="line"><span class="function">    <span class="keyword">boolean</span> <span class="title">containsAll</span><span class="params">(Collection&lt;?&gt; c)</span> </span></span><br><span class="line"><span class="function">             如果此 collection 包含指定 collection 中的所有元素，则返回 <span class="keyword">true</span>。 </span></span><br><span class="line"><span class="function">    <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span></span><br><span class="line"><span class="function">             比较此 collection 与指定对象是否相等。 </span></span><br><span class="line"><span class="function">    <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">             返回此 collection 的哈希码值。 </span></span><br><span class="line"><span class="function">    <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">             如果此 collection 不包含元素，则返回 <span class="keyword">true</span>。 </span></span><br><span class="line"><span class="function">    Iterator&lt;E&gt; <span class="title">iterator</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">             返回在此 collection 的元素上进行迭代的迭代器。 </span></span><br><span class="line"><span class="function">    <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span></span><br><span class="line"><span class="function">             从此 collection 中移除指定元素的单个实例，如果存在的话（可选操作）。 </span></span><br><span class="line"><span class="function">    <span class="keyword">boolean</span> <span class="title">removeAll</span><span class="params">(Collection&lt;?&gt; c)</span> </span></span><br><span class="line"><span class="function">             移除此 collection 中那些也包含在指定 collection 中的所有元素（可选操作）。 </span></span><br><span class="line"><span class="function">    <span class="keyword">boolean</span> <span class="title">retainAll</span><span class="params">(Collection&lt;?&gt; c)</span> </span></span><br><span class="line"><span class="function">             仅保留此 collection 中那些也包含在指定 collection 的元素（可选操作）。 </span></span><br><span class="line"><span class="function">    <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">             返回此 collection 中的元素数。 </span></span><br><span class="line"><span class="function">    Object[] <span class="title">toArray</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">             返回包含此 collection 中所有元素的数组。 </span></span><br><span class="line"><span class="function">   &lt;T&gt; T[] </span></span><br><span class="line"><span class="function">    <span class="title">toArray</span><span class="params">(T[] a)</span></span></span><br></pre></td></tr></table></figure><h4 id="collection方法简单示例："><a href="#collection方法简单示例：" class="headerlink" title="collection方法简单示例："></a>collection方法简单示例：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">//集合转数组遍历</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Collection coll = <span class="keyword">new</span> ArrayList();</span><br><span class="line">coll.add(<span class="keyword">new</span> Student(<span class="string">"张三"</span>,<span class="number">23</span>));<span class="comment">//Object obj = new Student("张三",23);</span></span><br><span class="line">coll.add(<span class="keyword">new</span> Student(<span class="string">"李四"</span>,<span class="number">24</span>));</span><br><span class="line">coll.add(<span class="keyword">new</span> Student(<span class="string">"王五"</span>,<span class="number">25</span>));</span><br><span class="line">coll.add(<span class="keyword">new</span> Student(<span class="string">"赵六"</span>,<span class="number">26</span>));</span><br><span class="line"></span><br><span class="line">Object[] arr = coll.toArray();<span class="comment">//将集合转换成数组</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">Student s = (Student)arr[i];<span class="comment">//强转成Student</span></span><br><span class="line">System.out.println(s.getName() + <span class="string">","</span> + s.getAge());</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">//集合的遍历之迭代器遍历</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Collection c = <span class="keyword">new</span> ArrayList();</span><br><span class="line">c.add(<span class="string">"a"</span>);</span><br><span class="line">c.add(<span class="string">"b"</span>);</span><br><span class="line">c.add(<span class="string">"c"</span>);</span><br><span class="line">c.add(<span class="string">"d"</span>);</span><br><span class="line"></span><br><span class="line">Iterator it = c.iterator();<span class="comment">//获取迭代器的引用</span></span><br><span class="line"><span class="keyword">while</span>(it.hasNext()) &#123;<span class="comment">//集合中的迭代方法(遍历)</span></span><br><span class="line">System.out.println(it.next());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="五、List泛型接口"><a href="#五、List泛型接口" class="headerlink" title="五、List泛型接口"></a>五、List泛型接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;<span class="keyword">extends</span> <span class="title">Collection</span>&lt;<span class="title">E</span>&gt;  //超级接口</span></span><br></pre></td></tr></table></figure><h4 id="方法概述："><a href="#方法概述：" class="headerlink" title="方法概述："></a>方法概述：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E o)</span> </span></span><br><span class="line"><span class="function">          向列表的尾部追加指定的元素（可选操作）。 </span></span><br><span class="line"><span class="function"> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span></span><br><span class="line"><span class="function">          在列表的指定位置插入指定元素（可选操作）。 </span></span><br><span class="line"><span class="function"> <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span></span><br><span class="line"><span class="function">          追加指定 collection 中的所有元素到此列表的结尾，顺序是指定 collection 的迭代器返回这些元素的顺序（可选操作）。 </span></span><br><span class="line"><span class="function"> <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(<span class="keyword">int</span> index, Collection&lt;? extends E&gt; c)</span> </span></span><br><span class="line"><span class="function">          将指定 collection 中的所有元素都插入到列表中的指定位置（可选操作）。 </span></span><br><span class="line"><span class="function"> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">          从列表中移除所有元素（可选操作）。 </span></span><br><span class="line"><span class="function"> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span> </span></span><br><span class="line"><span class="function">          如果列表包含指定的元素，则返回 <span class="keyword">true</span>。 </span></span><br><span class="line"><span class="function"> <span class="keyword">boolean</span> <span class="title">containsAll</span><span class="params">(Collection&lt;?&gt; c)</span> </span></span><br><span class="line"><span class="function">          如果列表包含指定 collection 的所有元素，则返回 <span class="keyword">true</span>。 </span></span><br><span class="line"><span class="function"> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span></span><br><span class="line"><span class="function">          比较指定的对象与列表是否相等。 </span></span><br><span class="line"><span class="function"> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span></span><br><span class="line"><span class="function">          返回列表中指定位置的元素。 </span></span><br><span class="line"><span class="function"> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">          返回列表的哈希码值。 </span></span><br><span class="line"><span class="function"> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(Object o)</span> </span></span><br><span class="line"><span class="function">          返回列表中首次出现指定元素的索引，如果列表不包含此元素，则返回 -1。 </span></span><br><span class="line"><span class="function"> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">          如果列表不包含元素，则返回 <span class="keyword">true</span>。 </span></span><br><span class="line"><span class="function"> Iterator&lt;E&gt; <span class="title">iterator</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">          返回以正确顺序在列表的元素上进行迭代的迭代器。 </span></span><br><span class="line"><span class="function"> <span class="keyword">int</span> <span class="title">lastIndexOf</span><span class="params">(Object o)</span> </span></span><br><span class="line"><span class="function">          返回列表中最后出现指定元素的索引，如果列表不包含此元素，则返回 -1。 </span></span><br><span class="line"><span class="function"> ListIterator&lt;E&gt; <span class="title">listIterator</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">          返回列表中元素的列表迭代器（以正确的顺序）。 </span></span><br><span class="line"><span class="function"> ListIterator&lt;E&gt; <span class="title">listIterator</span><span class="params">(<span class="keyword">int</span> index)</span> </span></span><br><span class="line"><span class="function">          返回列表中元素的列表迭代器（以正确的顺序），从列表的指定位置开始。 </span></span><br><span class="line"><span class="function"> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span></span><br><span class="line"><span class="function">          移除列表中指定位置的元素（可选操作）。 </span></span><br><span class="line"><span class="function"> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span></span><br><span class="line"><span class="function">          移除列表中出现的首个指定元素（可选操作）。 </span></span><br><span class="line"><span class="function"> <span class="keyword">boolean</span> <span class="title">removeAll</span><span class="params">(Collection&lt;?&gt; c)</span> </span></span><br><span class="line"><span class="function">          从列表中移除指定 collection 中包含的所有元素（可选操作）。 </span></span><br><span class="line"><span class="function"> <span class="keyword">boolean</span> <span class="title">retainAll</span><span class="params">(Collection&lt;?&gt; c)</span> </span></span><br><span class="line"><span class="function">          仅在列表中保留指定 collection 中所包含的元素（可选操作）。 </span></span><br><span class="line"><span class="function"> E <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span></span><br><span class="line"><span class="function">          用指定元素替换列表中指定位置的元素（可选操作）。 </span></span><br><span class="line"><span class="function"> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">          返回列表中的元素数。 </span></span><br><span class="line"><span class="function"> List&lt;E&gt; <span class="title">subList</span><span class="params">(<span class="keyword">int</span> fromIndex, <span class="keyword">int</span> toIndex)</span> </span></span><br><span class="line"><span class="function">          返回列表中指定的 fromIndex（包括 ）和 toIndex（不包括）之间的部分视图。 </span></span><br><span class="line"><span class="function"> Object[] <span class="title">toArray</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">          返回以正确顺序包含列表中的所有元素的数组。 </span></span><br><span class="line"><span class="function">&lt;T&gt; T[] </span></span><br><span class="line"><span class="function"> <span class="title">toArray</span><span class="params">(T[] a)</span> </span></span><br><span class="line"><span class="function">          返回以正确顺序包含列表中所有元素的数组；返回数组的运行时类型是指定数组的运行时类型。</span></span><br></pre></td></tr></table></figure><h4 id="list方法简单示例："><a href="#list方法简单示例：" class="headerlink" title="list方法简单示例："></a>list方法简单示例：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">List list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">list.add(<span class="keyword">new</span> Student(<span class="string">"张三"</span>,<span class="number">23</span>));</span><br><span class="line">list.add(<span class="keyword">new</span> Student(<span class="string">"李四"</span>,<span class="number">24</span>));</span><br><span class="line">list.add(<span class="keyword">new</span> Student(<span class="string">"王五"</span>,<span class="number">25</span>));</span><br><span class="line">list.add(<span class="keyword">new</span> Student(<span class="string">"赵六"</span>,<span class="number">26</span>));</span><br><span class="line"></span><br><span class="line">Iterator iterator = list.iterator();</span><br><span class="line"><span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">Student s = (Student) iterator.next(); <span class="comment">//向下转型</span></span><br><span class="line">System.out.println(s);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">List list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">list.add(<span class="string">"a"</span>);</span><br><span class="line">list.add(<span class="string">"b"</span>);</span><br><span class="line">list.add(<span class="string">"c"</span>);</span><br><span class="line">list.add(<span class="string">"d"</span>);</span><br><span class="line"></span><br><span class="line">Iterator iterator  = list.iterator();</span><br><span class="line"><span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">System.out.println(iterator.next());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="并发修改异常产生的原因及解决方案"><a href="#并发修改异常产生的原因及解决方案" class="headerlink" title="并发修改异常产生的原因及解决方案"></a>并发修改异常产生的原因及解决方案</h4><blockquote><p>假设有一个集合，请问，我想判断里面有没有”world”这个元素，如果有，我就添加一个”java”元素,具体代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">List list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">list.add(<span class="string">"a"</span>);</span><br><span class="line">list.add(<span class="string">"b"</span>);</span><br><span class="line">list.add(<span class="string">"world"</span>);</span><br><span class="line">list.add(<span class="string">"d"</span>);</span><br><span class="line">list.add(<span class="string">"e"</span>);</span><br><span class="line"></span><br><span class="line">Iterator it = list.iterator();</span><br><span class="line"><span class="keyword">while</span>(it.hasNext()) &#123;</span><br><span class="line">String str = (String)it.next();</span><br><span class="line"><span class="keyword">if</span>(str.equals(<span class="string">"world"</span>)) &#123;</span><br><span class="line">list.add(<span class="string">"javaee"</span>);<span class="comment">//这里会抛出ConcurrentModificationException并发修改异常</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><p><strong>运行上面代码发生ConcurrentModificationException并发修改异常，查看迭代器源代码如下。</strong><br><strong><em>产生原因：迭代器是依赖于集合而存在的，在判断成功后，集合的中新添加了元素，而迭代器却不知道，迭代器的内容不发生改变。所以就报错了，这个错叫并发修改异常。</em></strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">checkForComodification</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (modCount != expectedModCount)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>解决办法及代码如下：<br>迭代器迭代元素，迭代器修改元素(ListIterator的特有功能add)<br>集合遍历元素，集合修改元素<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ListIterator lit = list.listIterator();<span class="comment">//如果想在遍历的过程中添加元素,可以用ListIterator中的add方法</span></span><br><span class="line"><span class="keyword">while</span>(lit.hasNext()) &#123;</span><br><span class="line">String str = (String)lit.next();</span><br><span class="line"><span class="keyword">if</span>(str.equals(<span class="string">"world"</span>)) &#123;</span><br><span class="line">lit.add(<span class="string">"javaee"</span>);</span><br><span class="line"><span class="comment">//list.add("javaee");</span></span><br><span class="line">&#125;</span><br><span class="line">          &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>了解：(ListIterator)   </p><ol><li>boolean hasNext()是否有下一个</li><li>boolean hasPrevious()是否有前一个</li><li>Object next()返回下一个元素</li><li>Object previous();返回上一个元素</li></ol></blockquote><h3 id="六、ArrayList类"><a href="#六、ArrayList类" class="headerlink" title="六、ArrayList类"></a>六、ArrayList类</h3><h4 id="方法摘要："><a href="#方法摘要：" class="headerlink" title="方法摘要："></a>方法摘要：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">E</span>&gt;<span class="keyword">extends</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt;<span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">RandomAccess</span>, <span class="title">Cloneable</span>, <span class="title">Serializable</span></span></span><br></pre></td></tr></table></figure><h4 id="构造方法摘要"><a href="#构造方法摘要" class="headerlink" title="构造方法摘要"></a>构造方法摘要</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">ArrayList() </span><br><span class="line">          构造一个初始容量为 <span class="number">10</span> 的空列表。 </span><br><span class="line">ArrayList(Collection&lt;? extends E&gt; c) </span><br><span class="line">          构造一个包含指定 collection 的元素的列表，这些元素是按照该 collection 的迭代器返回它们的顺序排列的。 </span><br><span class="line">ArrayList(<span class="keyword">int</span> initialCapacity) </span><br><span class="line">          构造一个具有指定初始容量的空列表。 </span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E o)</span> </span></span><br><span class="line"><span class="function">          将指定的元素追加到此列表的尾部。 </span></span><br><span class="line"><span class="function"> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span></span><br><span class="line"><span class="function">          将指定的元素插入此列表中的指定位置。 </span></span><br><span class="line"><span class="function"> <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span></span><br><span class="line"><span class="function">          按照指定 Collection 的迭代器所返回的元素顺序，将该 Collection 中的所有元素追加到此列表的尾部。 </span></span><br><span class="line"><span class="function"> <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(<span class="keyword">int</span> index, Collection&lt;? extends E&gt; c)</span> </span></span><br><span class="line"><span class="function">          从指定的位置开始，将指定 Collection 中的所有元素插入到此列表中。 </span></span><br><span class="line"><span class="function"> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">          移除此列表中的所有元素。 </span></span><br><span class="line"><span class="function"> Object <span class="title">clone</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">          返回此 ArrayList 实例的浅表复制。 </span></span><br><span class="line"><span class="function"> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object elem)</span> </span></span><br><span class="line"><span class="function">          如果此列表中包含指定的元素，则返回 <span class="keyword">true</span>。 </span></span><br><span class="line"><span class="function"> <span class="keyword">void</span> <span class="title">ensureCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span></span><br><span class="line"><span class="function">          如有必要，增加此 ArrayList 实例的容量，以确保它至少能够容纳最小容量参数所指定的元素数。 </span></span><br><span class="line"><span class="function"> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span></span><br><span class="line"><span class="function">          返回此列表中指定位置上的元素。 </span></span><br><span class="line"><span class="function"> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(Object elem)</span> </span></span><br><span class="line"><span class="function">          搜索给定参数第一次出现的位置，使用 equals 方法进行相等性测试。 </span></span><br><span class="line"><span class="function"> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">          测试此列表中是否没有元素。 </span></span><br><span class="line"><span class="function"> <span class="keyword">int</span> <span class="title">lastIndexOf</span><span class="params">(Object elem)</span> </span></span><br><span class="line"><span class="function">          返回指定的对象在列表中最后一次出现的位置索引。 </span></span><br><span class="line"><span class="function"> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span></span><br><span class="line"><span class="function">          移除此列表中指定位置上的元素。 </span></span><br><span class="line"><span class="function"> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span></span><br><span class="line"><span class="function">          从此列表中移除指定元素的单个实例（如果存在），此操作是可选的。 </span></span><br><span class="line"><span class="function"><span class="keyword">protected</span>  <span class="keyword">void</span> <span class="title">removeRange</span><span class="params">(<span class="keyword">int</span> fromIndex, <span class="keyword">int</span> toIndex)</span> </span></span><br><span class="line"><span class="function">          移除列表中索引在 fromIndex（包括）和 toIndex（不包括）之间的所有元素。 </span></span><br><span class="line"><span class="function"> E <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span></span><br><span class="line"><span class="function">          用指定的元素替代此列表中指定位置上的元素。 </span></span><br><span class="line"><span class="function"> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">          返回此列表中的元素数。 </span></span><br><span class="line"><span class="function"> Object[] <span class="title">toArray</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">          返回一个按照正确的顺序包含此列表中所有元素的数组。 </span></span><br><span class="line"><span class="function">&lt;T&gt; T[] </span></span><br><span class="line"><span class="function"> <span class="title">toArray</span><span class="params">(T[] a)</span> </span></span><br><span class="line"><span class="function">          返回一个按照正确的顺序包含此列表中所有元素的数组；返回数组的运行时类型就是指定数组的运行时类型。 </span></span><br><span class="line"><span class="function"> <span class="keyword">void</span> <span class="title">trimToSize</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">          将此 ArrayList 实例的容量调整为列表的当前大小。 </span></span><br><span class="line"><span class="function">从类 java.util.AbstractList 继承的方法 </span></span><br><span class="line"><span class="function">equals, hashCode, iterator, listIterator, listIterator, subList </span></span><br><span class="line"><span class="function">  从类 java.util.AbstractCollection 继承的方法 </span></span><br><span class="line"><span class="function">containsAll, removeAll, retainAll, toString </span></span><br><span class="line"><span class="function">  从类 java.lang.Object 继承的方法 </span></span><br><span class="line"><span class="function">finalize, getClass, notify, notifyAll, wait, wait, wait </span></span><br><span class="line"><span class="function">  从接口 java.util.List 继承的方法 </span></span><br><span class="line"><span class="function">containsAll, equals, hashCode, iterator, listIterator, listIterator, removeAll, retainAll, subList</span></span><br></pre></td></tr></table></figure><p><strong>ArrayList示例：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ArrayList arr = <span class="keyword">new</span> ArrayList();</span><br><span class="line">arr.add(<span class="keyword">new</span> Student(<span class="string">"张三"</span>, <span class="number">23</span>));</span><br><span class="line">arr.add(<span class="keyword">new</span> Student(<span class="string">"李四"</span>,<span class="number">24</span>));</span><br><span class="line"></span><br><span class="line">System.out.println(arr);</span><br><span class="line"></span><br><span class="line">Iterator it = arr.iterator();</span><br><span class="line"><span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">Student student = (Student) it.next();</span><br><span class="line">System.out.println(student.getName()+<span class="string">"..."</span>+student.getAge());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ArrayList arr = <span class="keyword">new</span> ArrayList();</span><br><span class="line">arr.add(<span class="string">"a"</span>);</span><br><span class="line">arr.add(<span class="string">"b"</span>);</span><br><span class="line">arr.add(<span class="string">"c"</span>);</span><br><span class="line">arr.add(<span class="string">"d"</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(arr);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="七、LinkedList类"><a href="#七、LinkedList类" class="headerlink" title="七、LinkedList类"></a>七、LinkedList类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedList</span>&lt;<span class="title">E</span>&gt;<span class="keyword">extends</span> <span class="title">AbstractSequentialList</span>&lt;<span class="title">E</span>&gt;<span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">Queue</span>&lt;<span class="title">E</span>&gt;, <span class="title">Cloneable</span>, <span class="title">Serializable</span></span></span><br></pre></td></tr></table></figure><h4 id="构造方法摘要-1"><a href="#构造方法摘要-1" class="headerlink" title="构造方法摘要"></a>构造方法摘要</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">LinkedList() </span><br><span class="line">          构造一个空列表。 </span><br><span class="line">LinkedList(Collection&lt;? extends E&gt; c) </span><br><span class="line">          构造一个包含指定集合中的元素的列表，这些元素按其集合的迭代器返回的顺序排列。</span><br></pre></td></tr></table></figure><h4 id="方法摘要"><a href="#方法摘要" class="headerlink" title="方法摘要"></a>方法摘要</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E o)</span> </span></span><br><span class="line"><span class="function">          将指定元素追加到此列表的结尾。 </span></span><br><span class="line"><span class="function"> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span></span><br><span class="line"><span class="function">          在此列表中指定的位置插入指定的元素。 </span></span><br><span class="line"><span class="function"> <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span></span><br><span class="line"><span class="function">          追加指定 collection 中的所有元素到此列表的结尾，顺序是指定 collection 的迭代器返回这些元素的顺序。 </span></span><br><span class="line"><span class="function"> <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(<span class="keyword">int</span> index, Collection&lt;? extends E&gt; c)</span> </span></span><br><span class="line"><span class="function">          将指定集合中的所有元素从指定位置开始插入此列表。 </span></span><br><span class="line"><span class="function"> <span class="keyword">void</span> <span class="title">addFirst</span><span class="params">(E o)</span> </span></span><br><span class="line"><span class="function">          将给定元素插入此列表的开头。 </span></span><br><span class="line"><span class="function"> <span class="keyword">void</span> <span class="title">addLast</span><span class="params">(E o)</span> </span></span><br><span class="line"><span class="function">          将给定元素追加到此列表的结尾。 </span></span><br><span class="line"><span class="function"> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">          从此列表中移除所有元素。 </span></span><br><span class="line"><span class="function"> Object <span class="title">clone</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">          返回此 LinkedList 的浅表复制。 </span></span><br><span class="line"><span class="function"> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span> </span></span><br><span class="line"><span class="function">          如果此列表包含指定元素，则返回 <span class="keyword">true</span>。 </span></span><br><span class="line"><span class="function"> E <span class="title">element</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">          找到但不移除此列表的头（第一个元素）。 </span></span><br><span class="line"><span class="function"> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span></span><br><span class="line"><span class="function">          返回此列表中指定位置处的元素。 </span></span><br><span class="line"><span class="function"> E <span class="title">getFirst</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">          返回此列表的第一个元素。 </span></span><br><span class="line"><span class="function"> E <span class="title">getLast</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">          返回此列表的最后一个元素。 </span></span><br><span class="line"><span class="function"> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(Object o)</span> </span></span><br><span class="line"><span class="function">          返回此列表中首次出现的指定元素的索引，如果列表中不包含此元素，则返回 -1。 </span></span><br><span class="line"><span class="function"> <span class="keyword">int</span> <span class="title">lastIndexOf</span><span class="params">(Object o)</span> </span></span><br><span class="line"><span class="function">          返回此列表中最后出现的指定元素的索引，如果列表中不包含此元素，则返回 -1。 </span></span><br><span class="line"><span class="function"> ListIterator&lt;E&gt; <span class="title">listIterator</span><span class="params">(<span class="keyword">int</span> index)</span> </span></span><br><span class="line"><span class="function">          返回此列表中的元素的列表迭代器（按适当顺序），从列表中指定位置开始。 </span></span><br><span class="line"><span class="function"> <span class="keyword">boolean</span> <span class="title">offer</span><span class="params">(E o)</span> </span></span><br><span class="line"><span class="function">          将指定元素添加到此列表的末尾（最后一个元素）。 </span></span><br><span class="line"><span class="function"> E <span class="title">peek</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">          找到但不移除此列表的头（第一个元素）。 </span></span><br><span class="line"><span class="function"> E <span class="title">poll</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">          找到并移除此列表的头（第一个元素）。 </span></span><br><span class="line"><span class="function"> E <span class="title">remove</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">          找到并移除此列表的头（第一个元素）。 </span></span><br><span class="line"><span class="function"> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span></span><br><span class="line"><span class="function">          移除此列表中指定位置处的元素。 </span></span><br><span class="line"><span class="function"> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span></span><br><span class="line"><span class="function">          移除此列表中首次出现的指定元素。 </span></span><br><span class="line"><span class="function"> E <span class="title">removeFirst</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">          移除并返回此列表的第一个元素。 </span></span><br><span class="line"><span class="function"> E <span class="title">removeLast</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">          移除并返回此列表的最后一个元素。 </span></span><br><span class="line"><span class="function"> E <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span></span><br><span class="line"><span class="function">          将此列表中指定位置的元素替换为指定的元素。 </span></span><br><span class="line"><span class="function"> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">          返回此列表的元素数。 </span></span><br><span class="line"><span class="function"> Object[] <span class="title">toArray</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">          以正确顺序返回包含此列表中所有元素的数组。 </span></span><br><span class="line"><span class="function">&lt;T&gt; T[] </span></span><br><span class="line"><span class="function"> <span class="title">toArray</span><span class="params">(T[] a)</span> </span></span><br><span class="line"><span class="function">          以正确顺序返回包含此列表中所有元素的数组；返回数组的运行时类型即为指定数组的类。</span></span><br></pre></td></tr></table></figure><h3 id="八、vector"><a href="#八、vector" class="headerlink" title="八、vector"></a>八、vector</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Vector</span>&lt;<span class="title">E</span>&gt;<span class="keyword">extends</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt;<span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">RandomAccess</span>, <span class="title">Cloneable</span>, <span class="title">Serializable</span></span></span><br></pre></td></tr></table></figure><h4 id="构造方法摘要-2"><a href="#构造方法摘要-2" class="headerlink" title="构造方法摘要"></a>构造方法摘要</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Vector() </span><br><span class="line">          构造一个空向量，使其内部数据数组的大小为 <span class="number">10</span>，其标准容量增量为零。 </span><br><span class="line">Vector(Collection&lt;? extends E&gt; c) </span><br><span class="line">          构造一个包含指定集合中的元素的向量，这些元素按其集合的迭代器返回元素的顺序排列。 </span><br><span class="line">Vector(<span class="keyword">int</span> initialCapacity) </span><br><span class="line">          使用指定的初始容量和等于零的容量增量构造一个空向量。 </span><br><span class="line">Vector(<span class="keyword">int</span> initialCapacity, <span class="keyword">int</span> capacityIncrement) </span><br><span class="line">          使用指定的初始容量和容量增量构造一个空的向量</span><br></pre></td></tr></table></figure><h4 id="特有方法摘要"><a href="#特有方法摘要" class="headerlink" title="特有方法摘要"></a>特有方法摘要</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E o)</span> </span></span><br><span class="line"><span class="function">          将指定元素追加到此向量的末尾。 </span></span><br><span class="line"><span class="function"> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span></span><br><span class="line"><span class="function">          在此向量的指定位置插入指定的元素。 </span></span><br><span class="line"><span class="function"> <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span></span><br><span class="line"><span class="function">          将指定 Collection 中的所有元素追加到此向量的末尾，按照指定集合的迭代器所返回的顺序追加这些元素。 </span></span><br><span class="line"><span class="function"> <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(<span class="keyword">int</span> index, Collection&lt;? extends E&gt; c)</span> </span></span><br><span class="line"><span class="function">          在指定位置将指定 Collection 中的所有元素插入到此向量中。 </span></span><br><span class="line"><span class="function"> <span class="keyword">void</span> <span class="title">addElement</span><span class="params">(E obj)</span> </span></span><br><span class="line"><span class="function">          将指定的组件添加到此向量的末尾，将其大小增加 1。 </span></span><br><span class="line"><span class="function"> <span class="keyword">int</span> <span class="title">capacity</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">          返回此向量的当前容量。 </span></span><br><span class="line"><span class="function"> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">          从此向量中移除所有元素。 </span></span><br><span class="line"><span class="function"> Object <span class="title">clone</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">          返回向量的一个副本。 </span></span><br><span class="line"><span class="function"> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object elem)</span> </span></span><br><span class="line"><span class="function">          测试指定的对象是否为此向量中的组件。 </span></span><br><span class="line"><span class="function"> <span class="keyword">boolean</span> <span class="title">containsAll</span><span class="params">(Collection&lt;?&gt; c)</span> </span></span><br><span class="line"><span class="function">          如果此向量包含指定 Collection 中的所有元素，则返回 <span class="keyword">true</span>。 </span></span><br><span class="line"><span class="function"> <span class="keyword">void</span> <span class="title">copyInto</span><span class="params">(Object[] anArray)</span> </span></span><br><span class="line"><span class="function">          将此向量的组件复制到指定的数组中。 </span></span><br><span class="line"><span class="function"> E <span class="title">elementAt</span><span class="params">(<span class="keyword">int</span> index)</span> </span></span><br><span class="line"><span class="function">          返回指定索引处的组件。 </span></span><br><span class="line"><span class="function"> Enumeration&lt;E&gt; <span class="title">elements</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">          返回此向量的组件的枚举。 </span></span><br><span class="line"><span class="function"> <span class="keyword">void</span> <span class="title">ensureCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span></span><br><span class="line"><span class="function">          增加此向量的容量（如有必要），以确保其至少能够保存最小容量参数指定的组件数。 </span></span><br><span class="line"><span class="function"> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span></span><br><span class="line"><span class="function">          比较指定对象与此向量的相等性。 </span></span><br><span class="line"><span class="function"> E <span class="title">firstElement</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">          返回此向量的第一个组件（位于索引 0 处的项）。 </span></span><br><span class="line"><span class="function"> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span></span><br><span class="line"><span class="function">          返回向量中指定位置的元素。 </span></span><br><span class="line"><span class="function"> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">          返回此向量的哈希码值。 </span></span><br><span class="line"><span class="function"> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(Object elem)</span> </span></span><br><span class="line"><span class="function">          搜索给定参数的第一个匹配项，使用 equals 方法测试相等性。 </span></span><br><span class="line"><span class="function"> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(Object elem, <span class="keyword">int</span> index)</span> </span></span><br><span class="line"><span class="function">          搜索给定参数的第一个匹配项，从 index 处开始搜索，并使用 equals 方法测试其相等性。 </span></span><br><span class="line"><span class="function"> <span class="keyword">void</span> <span class="title">insertElementAt</span><span class="params">(E obj, <span class="keyword">int</span> index)</span> </span></span><br><span class="line"><span class="function">          将指定对象作为此向量中的组件插入到指定的 index 处。 </span></span><br><span class="line"><span class="function"> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">          测试此向量是否不包含组件。 </span></span><br><span class="line"><span class="function"> E <span class="title">lastElement</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">          返回此向量的最后一个组件。 </span></span><br><span class="line"><span class="function"> <span class="keyword">int</span> <span class="title">lastIndexOf</span><span class="params">(Object elem)</span> </span></span><br><span class="line"><span class="function">          返回指定的对象在此向量中最后一个匹配项的索引。 </span></span><br><span class="line"><span class="function"> <span class="keyword">int</span> <span class="title">lastIndexOf</span><span class="params">(Object elem, <span class="keyword">int</span> index)</span> </span></span><br><span class="line"><span class="function">          向后搜索指定的对象，从指定的索引处开始搜索，并返回一个索引。 </span></span><br><span class="line"><span class="function"> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span></span><br><span class="line"><span class="function">          移除此向量中指定位置的元素。 </span></span><br><span class="line"><span class="function"> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span></span><br><span class="line"><span class="function">          移除此向量中指定元素的第一个匹配项，如果向量不包含该元素，则元素保持不变。 </span></span><br><span class="line"><span class="function"> <span class="keyword">boolean</span> <span class="title">removeAll</span><span class="params">(Collection&lt;?&gt; c)</span> </span></span><br><span class="line"><span class="function">          从此向量中移除包含在指定 Collection 中的所有元素。 </span></span><br><span class="line"><span class="function"> <span class="keyword">void</span> <span class="title">removeAllElements</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">          从此向量中移除全部组件，并将其大小设置为零。 </span></span><br><span class="line"><span class="function"> <span class="keyword">boolean</span> <span class="title">removeElement</span><span class="params">(Object obj)</span> </span></span><br><span class="line"><span class="function">          从此向量中移除变量的第一个（索引最小的）匹配项。 </span></span><br><span class="line"><span class="function"> <span class="keyword">void</span> <span class="title">removeElementAt</span><span class="params">(<span class="keyword">int</span> index)</span> </span></span><br><span class="line"><span class="function">          删除指定索引处的组件。 </span></span><br><span class="line"><span class="function"><span class="keyword">protected</span>  <span class="keyword">void</span> <span class="title">removeRange</span><span class="params">(<span class="keyword">int</span> fromIndex, <span class="keyword">int</span> toIndex)</span> </span></span><br><span class="line"><span class="function">          从此 List 中移除其索引位于 fromIndex（包括）与 toIndex（不包括）之间的所有元素。 </span></span><br><span class="line"><span class="function"> <span class="keyword">boolean</span> <span class="title">retainAll</span><span class="params">(Collection&lt;?&gt; c)</span> </span></span><br><span class="line"><span class="function">          在此向量中仅保留包含在指定 Collection 中的元素。 </span></span><br><span class="line"><span class="function"> E <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span></span><br><span class="line"><span class="function">          用指定的元素替换此向量中指定位置处的元素。 </span></span><br><span class="line"><span class="function"> <span class="keyword">void</span> <span class="title">setElementAt</span><span class="params">(E obj, <span class="keyword">int</span> index)</span> </span></span><br><span class="line"><span class="function">          将此向量指定 index 处的组件设置为指定的对象。 </span></span><br><span class="line"><span class="function"> <span class="keyword">void</span> <span class="title">setSize</span><span class="params">(<span class="keyword">int</span> newSize)</span> </span></span><br><span class="line"><span class="function">          设置此向量的大小。 </span></span><br><span class="line"><span class="function"> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">          返回此向量中的组件数。 </span></span><br><span class="line"><span class="function"> List&lt;E&gt; <span class="title">subList</span><span class="params">(<span class="keyword">int</span> fromIndex, <span class="keyword">int</span> toIndex)</span> </span></span><br><span class="line"><span class="function">          返回此 List 的部分视图，元素范围为从 fromIndex（包括）到 toIndex（不包括）。 </span></span><br><span class="line"><span class="function"> Object[] <span class="title">toArray</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">          返回一个数组，包含此向量中以正确顺序存放的所有元素。 </span></span><br><span class="line"><span class="function">&lt;T&gt; T[] </span></span><br><span class="line"><span class="function"> <span class="title">toArray</span><span class="params">(T[] a)</span> </span></span><br><span class="line"><span class="function">          返回一个数组，包含此向量中以正确顺序存放的所有元素；返回数组的运行时类型为指定数组的类型。 </span></span><br><span class="line"><span class="function"> String <span class="title">toString</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">          返回此向量的字符串表示形式，其中包含每个元素的 String 表示形式。 </span></span><br><span class="line"><span class="function"> <span class="keyword">void</span> <span class="title">trimToSize</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">          对此向量的容量进行微调，使其等于向量的当前大小。</span></span><br><span class="line"><span class="function">```          </span></span><br><span class="line"><span class="function">#### vector 使用示例:</span></span><br><span class="line"><span class="function">```java</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Vector v = <span class="keyword">new</span> Vector();</span><br><span class="line">v.add(<span class="keyword">new</span> Student(<span class="string">"张三"</span>, <span class="number">23</span>));</span><br><span class="line">v.add(<span class="keyword">new</span> Student(<span class="string">"李四"</span>, <span class="number">24</span>));</span><br><span class="line">v.add(<span class="keyword">new</span> Student(<span class="string">"王五"</span>, <span class="number">25</span>));</span><br><span class="line"></span><br><span class="line">Iterator it = v.iterator();</span><br><span class="line"><span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">Object s = (Student) it.next();</span><br><span class="line">System.out.println(s);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Vector v = <span class="keyword">new</span> Vector();</span><br><span class="line">v.add(<span class="string">"a"</span>);</span><br><span class="line">v.add(<span class="string">"b"</span>);</span><br><span class="line">v.add(<span class="string">"c"</span>);</span><br><span class="line">v.add(<span class="string">"d"</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(v);</span><br><span class="line">System.out.println(v.capacity());</span><br><span class="line">System.out.println(v.size());</span><br><span class="line">System.out.println(v.contains(<span class="string">"a"</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;\assets\js\APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;一、集合框架的由来&quot;&gt;&lt;a href=&quot;#一、集合框架的由来&quot; class=&quot;headerlink&quot; title=&quot;一、集合框架
      
    
    </summary>
    
      <category term="java" scheme="https://LiuZiQiao.github.io/categories/java/"/>
    
    
      <category term="collection" scheme="https://LiuZiQiao.github.io/tags/collection/"/>
    
      <category term="ArrayList" scheme="https://LiuZiQiao.github.io/tags/ArrayList/"/>
    
      <category term="Vector" scheme="https://LiuZiQiao.github.io/tags/Vector/"/>
    
      <category term="Iterator" scheme="https://LiuZiQiao.github.io/tags/Iterator/"/>
    
  </entry>
  
  <entry>
    <title>二叉搜索树</title>
    <link href="https://LiuZiQiao.github.io/2018/08/31/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/"/>
    <id>https://LiuZiQiao.github.io/2018/08/31/二叉搜索树/</id>
    <published>2018-08-31T14:29:32.000Z</published>
    <updated>2018-09-19T00:36:24.272Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><a id="more"></a><h3 id="二叉搜索树概念"><a href="#二叉搜索树概念" class="headerlink" title="二叉搜索树概念"></a>二叉搜索树概念</h3><p>二叉搜索树又称二叉排序树，它或者是一棵空树，或者是具有以下性质的二叉树</p><ul><li>若它的左子树不为空，则左子树上所有节点的值都小于根节点的值</li><li>若它的右子树不为空，则右子树上所有节点的值都大于根节点的值</li><li>它的左右子树也分别为二叉搜索树</li></ul><h3 id="二叉搜索树操作"><a href="#二叉搜索树操作" class="headerlink" title="二叉搜索树操作"></a>二叉搜索树操作</h3><p><strong><em>头文件定义</em></strong><br><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">typedef int DataType;</span><br><span class="line"></span><br><span class="line">typedef struct BSTreeNode</span><br><span class="line">&#123;</span><br><span class="line">DataType key;</span><br><span class="line">struct BSTreeNode *left;</span><br><span class="line">struct BSTreeNode *right;</span><br><span class="line">&#125;BSTreeNode;</span><br></pre></td></tr></table></figure></p><h4 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h4><p><strong>若根结点不为空</strong><br><strong>当key == 查找的key，返回true</strong><br><strong>当key &gt; 查找的key，在其左子树中查找</strong><br><strong>当key &lt; 查找的key，在其右子树中查找</strong><br><strong>否则返回false</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查找递归写法</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">BSTreeFind</span><span class="params">(<span class="keyword">const</span> BSTreeNode *root, DataType key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (root == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (key == root-&gt;key)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;<span class="keyword">else</span><span class="keyword">if</span> (root-&gt;key &lt; key)</span><br><span class="line">&#123;</span><br><span class="line">BSTreeFind(root-&gt;right,key);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">BSTreeFind(root-&gt;left, key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查找非递归写法</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">BSTreeFind2</span><span class="params">(<span class="keyword">const</span> BSTreeNode *root,DataType key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">BSTreeNode *cur = (BSTreeNode *)root;</span><br><span class="line"><span class="keyword">while</span> (cur != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (cur-&gt;key == key)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (cur-&gt;key &gt; key)</span><br><span class="line">&#123;</span><br><span class="line">cur = cur-&gt;left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">cur = cur-&gt;right;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h4><p>在二叉搜索树中插入新元素时，必须先检测该元素是否在树中已经存在。如果已经存在，则不进行插入；否则将新元素加入到搜索停止的地方。</p><p><strong><em>插入具体过程</em></strong>   </p><ol><li>树为空，则直接插入,返回true</li><li>树不空，按二叉搜索树性质查找插入位置，插入新节点<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">//非递归插入写法</span><br><span class="line">int BSTreeInsert(BSTreeNode **root,DataType key)</span><br><span class="line">&#123;</span><br><span class="line">BSTreeNode *cur = *root;</span><br><span class="line">BSTreeNode *parent = NULL;</span><br><span class="line"></span><br><span class="line">//先找到要插入的位置</span><br><span class="line">while (cur != NULL)</span><br><span class="line">&#123;</span><br><span class="line">//先判断是否已存在该元素</span><br><span class="line">if (key == cur-&gt;key)</span><br><span class="line">&#123;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">parent = cur;</span><br><span class="line">if (key&gt;cur-&gt;key)</span><br><span class="line">&#123;</span><br><span class="line">cur = cur-&gt;right;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">cur = cur-&gt;left;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//创建结点</span><br><span class="line">BSTreeNode *node = (BSTreeNode *)malloc(sizeof(BSTreeNode));</span><br><span class="line">node-&gt;key = key;</span><br><span class="line">node-&gt;left = node-&gt;right = NULL;</span><br><span class="line"></span><br><span class="line">//插入元素</span><br><span class="line">if (parent == NULL)</span><br><span class="line">&#123;</span><br><span class="line">*root = node;</span><br><span class="line">return 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if (key&lt;parent-&gt;key)</span><br><span class="line">&#123;</span><br><span class="line">parent-&gt;left = node;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">parent-&gt;right = node;</span><br><span class="line">&#125;</span><br><span class="line">return 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//递归插入写法   </span><br><span class="line">int BSTreeInsert2(BSTreeNode **root, DataType key)</span><br><span class="line">&#123;</span><br><span class="line">if (*root == NULL)</span><br><span class="line">&#123;</span><br><span class="line">BSTreeNode *node = (BSTreeNode *)malloc(sizeof(BSTreeNode));</span><br><span class="line">node-&gt;key = key;</span><br><span class="line">node-&gt;left = node-&gt;right = NULL;</span><br><span class="line">*root = node;</span><br><span class="line">return 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if ((*root)-&gt;key == key)</span><br><span class="line">&#123;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line">if (key &gt;(*root)-&gt;key)</span><br><span class="line">&#123;</span><br><span class="line">return BSTreeInsert2(&amp;(*root)-&gt;right,key);</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">return BSTreeInsert2(&amp;(*root)-&gt;right, key);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><p><strong>首先查找元素是否在二叉搜索树中，如果不存在，则返回, 否则要删除的结点可能分下面四种情况：</strong><br>a. 要删除的结点无孩子结点<br>b. 要删除的结点只有左孩子结点<br>c. 要删除的结点只有右孩子结点<br>d. 要删除的结点有左、右孩子结点<br>==情况1可以归类到2或者3==<br>对于上述情况，相应的删除方法如下：<br>a. 直接删除该结点<br>b. 删除该结点且使被删除节点的双亲结点指向被删除节点的左孩子结点<br>c. 删除该结点且使被删除节点的双亲结点指向被删除结点的右孩子结点<br>d. 在它的右子树中寻找中序下的第一个结点(关键码最小)，用它的值填补到被删除节点中，在来处理该结点的删除问题<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line">void RemoveLeftNULL(BSTreeNode *parent,BSTreeNode *cur, BSTreeNode **root,DataType key)</span><br><span class="line">&#123;</span><br><span class="line">if (parent == NULL)</span><br><span class="line">&#123;</span><br><span class="line">*root = cur-&gt;right;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">if (key &lt; parent-&gt;key)</span><br><span class="line">&#123;</span><br><span class="line">parent-&gt;left = cur-&gt;right;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">parent-&gt;right = cur-&gt;right;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">free(cur);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void RemoveRightNULL(BSTreeNode *parent, BSTreeNode *cur, BSTreeNode **root, DataType key)</span><br><span class="line">&#123;</span><br><span class="line">if (parent == NULL)</span><br><span class="line">&#123;</span><br><span class="line">*root = cur-&gt;left;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">if (key &lt; parent-&gt;key)</span><br><span class="line">&#123;</span><br><span class="line">parent-&gt;left = cur-&gt;left;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">parent-&gt;right = cur-&gt;left;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">free(cur);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static void RemoveHasLeftAndRight(BSTreeNode *cur)</span><br><span class="line">&#123;</span><br><span class="line">BSTreeNode *del = cur-&gt;left;</span><br><span class="line">BSTreeNode *delParent = NULL;</span><br><span class="line">while (del-&gt;right != NULL)</span><br><span class="line">&#123;</span><br><span class="line">delParent = del;</span><br><span class="line">del = del-&gt;right;</span><br><span class="line">&#125;</span><br><span class="line">cur-&gt;key = del-&gt;key;</span><br><span class="line"></span><br><span class="line">//删除del结点</span><br><span class="line">if (delParent == NULL)</span><br><span class="line">&#123;</span><br><span class="line">//左孩子中最大的就是cur的左孩子</span><br><span class="line">cur-&gt;left = del-&gt;left;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">delParent-&gt;right = del-&gt;left;</span><br><span class="line">&#125;</span><br><span class="line">free(del);</span><br><span class="line">&#125;</span><br><span class="line">int BSTreeRemove(BSTreeNode **root,DataType key)</span><br><span class="line">&#123;</span><br><span class="line">BSTreeNode *cur = *root;</span><br><span class="line">BSTreeNode *parent = NULL;</span><br><span class="line"></span><br><span class="line">//先找到要插入的位置</span><br><span class="line">while (cur != NULL)</span><br><span class="line">&#123;</span><br><span class="line">//先判断是否已存在该元素</span><br><span class="line">if (key == cur-&gt;key)</span><br><span class="line">&#123;</span><br><span class="line">if (cur-&gt;left == NULL)</span><br><span class="line">&#123;</span><br><span class="line">RemoveLeftNULL(parent,cur,root,key);</span><br><span class="line">&#125;</span><br><span class="line">else if (cur-&gt;right == NULL)</span><br><span class="line">&#123;</span><br><span class="line">RemoveRightNULL(parent,cur,root,key);</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">RemoveHasLeftAndRight(cur);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">parent = cur;//parent记录当前找到结点</span><br><span class="line">if (key &gt; cur-&gt;key)</span><br><span class="line">&#123;</span><br><span class="line">cur = cur-&gt;right;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">cur = cur-&gt;left;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="二叉搜索树应用"><a href="#二叉搜索树应用" class="headerlink" title="二叉搜索树应用"></a>二叉搜索树应用</h4><ol><li>判断一个单词是否拼写正确</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">typedef struct Word</span><br><span class="line">&#123;</span><br><span class="line">char word[20];</span><br><span class="line">struct  Word *left;</span><br><span class="line">struct Word *right;</span><br><span class="line">&#125;Word;</span><br><span class="line"></span><br><span class="line">//递归查找</span><br><span class="line">int WordFind(Word *root,char word[])</span><br><span class="line">&#123;</span><br><span class="line">const Word *cur = root;</span><br><span class="line">int r;</span><br><span class="line"></span><br><span class="line">while (cur != NULL)</span><br><span class="line">&#123;</span><br><span class="line">r = strncmp(word, cur-&gt;word, 20);</span><br><span class="line">if (r == 0)</span><br><span class="line">&#123;</span><br><span class="line">return 1;</span><br><span class="line">&#125;</span><br><span class="line">else if(r&gt;0)</span><br><span class="line">&#123;</span><br><span class="line">cur = cur-&gt;right;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">cur = cur-&gt;left;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int WordInsert(Word **root,char word[])</span><br><span class="line">&#123;</span><br><span class="line">int r;</span><br><span class="line">if (*root == NULL)</span><br><span class="line">&#123;</span><br><span class="line">Word *node = (Word *)malloc(sizeof(Word));</span><br><span class="line">strncpy(node-&gt;word,word,20);</span><br><span class="line">node-&gt;left = node-&gt;right = NULL;</span><br><span class="line">*root = node;</span><br><span class="line">return 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">r = strncmp(word, (*root)-&gt;word, 20);</span><br><span class="line">// r为0时，此时该word已存在，返回0</span><br><span class="line">if (r == 0)</span><br><span class="line">&#123;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line">// r小于0，此时该word放在左子树，否则放右子树</span><br><span class="line">if (r&lt;0)</span><br><span class="line">&#123;</span><br><span class="line">return WordInsert(&amp;(*root)-&gt;left,word);</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">return WordInsert(&amp;(*root)-&gt;right, word);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void TestWord()</span><br><span class="line">&#123;</span><br><span class="line">Word *dict = NULL;</span><br><span class="line">WordInsert(&amp;dict, &quot;Apple&quot;);</span><br><span class="line">WordInsert(&amp;dict, &quot;Banana&quot;);</span><br><span class="line">WordInsert(&amp;dict, &quot;Orange&quot;);</span><br><span class="line">WordInsert(&amp;dict, &quot;Watermelon&quot;);</span><br><span class="line">WordInsert(&amp;dict, &quot;Pinapple&quot;);</span><br><span class="line">WordInsert(&amp;dict, &quot;Pear&quot;);</span><br><span class="line"></span><br><span class="line">char word[20];</span><br><span class="line"></span><br><span class="line">while (1)</span><br><span class="line">&#123;</span><br><span class="line">scanf(&quot;%s&quot;,word);</span><br><span class="line">if (WordFind(dict,word) == 1)</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;拼写正确\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;拼写错误\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>模拟实现一个简单的字典</li><li>log文件中有许多异常重复的IP地址，请统计出每个异常IP出现了多少<br>次？</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;\assets\js\APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;二叉搜索树概念&quot;&gt;&lt;a href=&quot;#二叉搜索树概念&quot; class=&quot;headerlink&quot; title=&quot;二叉搜索树概念&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="数据结构" scheme="https://LiuZiQiao.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="https://LiuZiQiao.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="二叉树" scheme="https://LiuZiQiao.github.io/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>面向对象之封装</title>
    <link href="https://LiuZiQiao.github.io/2018/08/29/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%B9%8B%E5%B0%81%E8%A3%85/"/>
    <id>https://LiuZiQiao.github.io/2018/08/29/面向对象之封装/</id>
    <published>2018-08-28T16:03:09.000Z</published>
    <updated>2018-09-19T00:36:09.246Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h4 id="封装概述："><a href="#封装概述：" class="headerlink" title="封装概述："></a>封装概述：</h4><pre><code>封装就是隐藏对象的属性和实现细节，仅对外提供访问方式</code></pre><h4 id="封装的好处："><a href="#封装的好处：" class="headerlink" title="封装的好处："></a>封装的好处：</h4><pre><code>隐藏对象属性和实现细节，提供公共访问方式提高代码的复用性提高了安全性</code></pre><h4 id="封装原则"><a href="#封装原则" class="headerlink" title="封装原则"></a>封装原则</h4><p>  将不需要对外提供的内容隐藏起来<br>  把属性隐藏，提供公共方法对其访问</p><h4 id="关键字的介绍"><a href="#关键字的介绍" class="headerlink" title="关键字的介绍"></a>关键字的介绍</h4><p>   (1) private 关键字 ：</p><pre><code>a：修改属性的可见性来限制对属性的访问特点：是一个修饰符，可以修饰成员变量和成员方法，被修饰的成员只能在本类中被访问</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  这段代码中，将 name 和 age 属性设置为私有的，只能本类才能访问，其他类都访问不了，如此就对信息进行了隐藏。</p><pre><code>b： 对每个值属性提供对外的公共方法访问，也就是创建一对赋取值方法，用于对私有属性的访问 </code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">​</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">​</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">​</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">​</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>   (2) this 关键字：是为了解决实例变量（private String name）和局部变量（setName(String name)中的name变量）之间发生的同名的冲突。</p><pre><code>特点：代表当前对象的引用</code></pre><p><strong><em>以下是一个java封装实例</em></strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">private</span> String name;</span><br><span class="line">   <span class="keyword">private</span> String idNum;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> age;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> name;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">getIdNum</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> idNum;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">( <span class="keyword">int</span> newAge)</span></span>&#123;</span><br><span class="line">      age = newAge;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String newName)</span></span>&#123;</span><br><span class="line">      name = newName;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIdNum</span><span class="params">( String newId)</span></span>&#123;</span><br><span class="line">      idNum = newId;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>public方法是外部类访问该类成员变量的入口。</strong></p><p>通常情况下，这些方法被称为getter和setter方法。</p><p><strong><em>因此，任何要访问类中私有成员变量的类都要通过这些getter和setter方法。</em></strong></p><p>通过如下的例子说明Test类的变量怎样被访问：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RunEncap</span></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">      Test test= <span class="keyword">new</span> Test();</span><br><span class="line">      test.setName(<span class="string">"James"</span>);</span><br><span class="line">      test.setAge(<span class="number">20</span>);</span><br><span class="line">      test.setIdNum(<span class="string">"12343ms"</span>);</span><br><span class="line"> </span><br><span class="line">      System.out.print(<span class="string">"Name : "</span> + test.getName()+ </span><br><span class="line">                             <span class="string">" Age : "</span>+ test.getAge());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>以上代码编译运行结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Name : James Age : 20</span><br></pre></td></tr></table></figure></p><p><strong><em>本人学习总结所用，如有纰漏错误之处请指正，定虚心学习改正！谢谢。</em></strong></p><p><strong>不为失败找借口，只为成功找方法！！！！</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;\assets\js\APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h4 id=&quot;封装概述：&quot;&gt;&lt;a href=&quot;#封装概述：&quot; class=&quot;headerlink&quot; title=&quot;封装概述：&quot;&gt;&lt;/a&gt;封装概述：&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;
      
    
    </summary>
    
      <category term="java" scheme="https://LiuZiQiao.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://LiuZiQiao.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>二叉堆</title>
    <link href="https://LiuZiQiao.github.io/2018/08/28/%E4%BA%8C%E5%8F%89%E5%A0%86/"/>
    <id>https://LiuZiQiao.github.io/2018/08/28/二叉堆/</id>
    <published>2018-08-28T00:44:48.000Z</published>
    <updated>2018-09-19T00:55:39.025Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><a id="more"></a><h4 id="堆的概念"><a href="#堆的概念" class="headerlink" title="堆的概念"></a>堆的概念</h4><ul><li>如果有一个关键码的集合K = {k0，k1， k2，…，kn-1}，把它的所有元<br>素按完全二叉树的顺序存储方式存储在一个一维数组中，并满足：<br>Ki &lt;= K2<em>i+1 且 Ki&lt;= K2</em>i+2 (Ki &gt;= K2<em>i+1 且 Ki &gt;= K2</em>i+2) i = 0，1，2…，则称为小堆(或大堆)。   </li><li><p>小堆(大堆)中：任一结点的关键码均小于(大于)等于它的左右孩子的关键码，位于堆顶结点的关键码最小(最大)，从根节点到每个结点的路径上数组元素组成的序列都是递增(递减)的</p></li><li><p>堆存储在下标为0开始的数组中，因此在堆中给定下标为i的结点时：<br>(1)如果i=0，结点i是根节点，没有双亲节点；否则结点i的双亲结点为结点(i-1)/2<br>(2)如果2 <em> i + 1 &lt;= n - 1，则结点i的左孩子为结点2 </em> i + 1，否则结点i无左孩子<br>(3)如果2 <em> i + 2 &lt;= n - 1，则结点i的右孩子为结点2 </em> i + 2，否则结<br>点i无右孩子</p></li></ul><h4 id="堆的实现"><a href="#堆的实现" class="headerlink" title="堆的实现"></a>堆的实现</h4><p><strong><em>将二叉树调整为最小堆的原理：<br>从最后一个非叶子结点开始调整，一直到根节点为止，将每个结点及其子树调整到满足小堆的性质即可</em></strong></p><h5 id="头文件的定义"><a href="#头文件的定义" class="headerlink" title="头文件的定义"></a>头文件的定义</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_SIZE 100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Heap</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> <span class="built_in">array</span>[MAX_SIZE];</span><br><span class="line"><span class="keyword">int</span> size;</span><br><span class="line">&#125;Heap;</span><br></pre></td></tr></table></figure><h5 id="堆的初始化"><a href="#堆的初始化" class="headerlink" title="堆的初始化"></a>堆的初始化</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">HeapInit</span><span class="params">(Heap *pH,<span class="keyword">int</span> arr[],<span class="keyword">int</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pH-&gt;size; i++)</span><br><span class="line">&#123;</span><br><span class="line">pH-&gt;<span class="built_in">array</span>[i] = arr[i];</span><br><span class="line">&#125;</span><br><span class="line">pH-&gt;size = size;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="堆的创建"><a href="#堆的创建" class="headerlink" title="堆的创建"></a>堆的创建</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//向下调整</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">HeaoAdjustDown</span><span class="params">(Heap *pH,<span class="keyword">int</span> root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> parent = root;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//当左孩子存在时</span></span><br><span class="line"><span class="keyword">int</span> left = parent * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line"><span class="comment">//判断左孩子是否越界</span></span><br><span class="line"><span class="keyword">if</span> (left &gt;= pH-&gt;size)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//当一定有右孩子时</span></span><br><span class="line"><span class="keyword">int</span> MaxChild = left;</span><br><span class="line"><span class="keyword">if</span> (parent*<span class="number">2</span>+<span class="number">2</span>&lt;pH-&gt;size &amp;&amp; pH-&gt;<span class="built_in">array</span>[parent*<span class="number">2</span>+<span class="number">2</span>]&gt;MaxChild)</span><br><span class="line">&#123;</span><br><span class="line">MaxChild = parent * <span class="number">2</span> + <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pH-&gt;<span class="built_in">array</span>[parent]&gt;pH-&gt;<span class="built_in">array</span>[MaxChild])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> temp = pH-&gt;<span class="built_in">array</span>[parent];</span><br><span class="line">pH-&gt;<span class="built_in">array</span>[parent] = pH-&gt;<span class="built_in">array</span>[MaxChild];</span><br><span class="line">pH-&gt;<span class="built_in">array</span>[MaxChild] = temp;</span><br><span class="line"></span><br><span class="line">parent = MaxChild;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建堆</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">HeapMake</span><span class="params">(Heap *pH)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = (pH-&gt;size<span class="number">-2</span>)/<span class="number">2</span>; i &gt; <span class="number">0</span>; i--)</span><br><span class="line">&#123;</span><br><span class="line">HeaoAdjustDown(pH,i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="堆的插入操作"><a href="#堆的插入操作" class="headerlink" title="堆的插入操作"></a>堆的插入操作</h5><p><strong><em>堆的插入：在已经建成的最小堆的后面插入新元素，插入之后，当树中结点不满足堆的性质时，就需要对堆进行重新调整</em></strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//插入</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">HeapPush</span><span class="params">(Heap *pH,<span class="keyword">int</span> data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(pH-&gt;size &lt; MAX_SIZE);</span><br><span class="line">pH-&gt;<span class="built_in">array</span>[pH-&gt;size++] = data;</span><br><span class="line">HeapAdjustUp(pH, pH-&gt;size - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h5 id="堆的插入操作-1"><a href="#堆的插入操作-1" class="headerlink" title="堆的插入操作"></a>堆的插入操作</h5><p><strong><em>堆的删除：删除时每次删除堆顶元素</em></strong><br>具体方法：将最后一个元素顶替堆顶元素，将堆中元素个数减少一个，相当于将堆中最后一个元素删掉，此时堆结构可能破坏，在向下调整使其满足堆的性质<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">HeapPop</span><span class="params">(Heap *pH)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">pH-&gt;<span class="built_in">array</span>[<span class="number">0</span>] = pH-&gt;<span class="built_in">array</span>[pH-&gt;size - <span class="number">1</span>];</span><br><span class="line">pH-&gt;size--;</span><br><span class="line"></span><br><span class="line">HeapAdjustUp(pH, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//升序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">HeapSort</span><span class="params">(<span class="keyword">int</span> <span class="built_in">array</span>[],<span class="keyword">int</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//建立大堆</span></span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = (size<span class="number">-2</span>)/<span class="number">2</span>; i &gt; <span class="number">0</span>;  i--)</span><br><span class="line">&#123;</span><br><span class="line">ArrayAdjustDown(<span class="built_in">array</span>,size,i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//开始排序</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; size; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> s = size - <span class="number">1</span> - j;</span><br><span class="line">Swap(<span class="built_in">array</span>, <span class="built_in">array</span> + s);</span><br><span class="line">ArrayAdjustDown(<span class="built_in">array</span>, size - <span class="number">1</span> - j, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="查找最小-大-的前K个数"><a href="#查找最小-大-的前K个数" class="headerlink" title="查找最小(大)的前K个数"></a>查找最小(大)的前K个数</h4><p><strong><em>100亿个数中找出最小的前K个数（海量数据top K问题）</em></strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> *<span class="title">TopK</span><span class="params">(<span class="keyword">int</span> <span class="built_in">array</span>[],<span class="keyword">int</span> size,<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> *heapArray = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>(k * <span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">assert(heapArray);</span><br><span class="line"></span><br><span class="line"><span class="comment">//搬前K个数</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++)</span><br><span class="line">&#123;</span><br><span class="line">heapArray[i] = <span class="built_in">array</span>[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//建立堆(大堆)</span></span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> j = (k<span class="number">-2</span>)/<span class="number">2</span>; j &gt;= <span class="number">0</span>; j--)</span><br><span class="line">&#123;</span><br><span class="line">ArrayAdjustDown(heapArray,k,j);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将第K个与堆中最大元素比较</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = k; i &lt; size; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">array</span>[i] &gt;= heapArray[<span class="number">0</span>])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">heapArray[<span class="number">0</span>] = <span class="built_in">array</span>[i];     <span class="comment">//替换堆中最大元素</span></span><br><span class="line">ArrayAdjustDown(heapArray,k,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> heapArray;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h5 id="测试部分"><a href="#测试部分" class="headerlink" title="测试部分"></a>测试部分</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TestHeap</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">array</span>[] = &#123; <span class="number">53</span>, <span class="number">17</span>, <span class="number">78</span>, <span class="number">9</span>, <span class="number">45</span>, <span class="number">65</span>, <span class="number">87</span>, <span class="number">23</span>, <span class="number">31</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> size = <span class="keyword">sizeof</span>(<span class="built_in">array</span>) / <span class="keyword">sizeof</span>(<span class="keyword">int</span>);</span><br><span class="line"></span><br><span class="line">Heapheap;</span><br><span class="line">HeapInit(&amp;heap, <span class="built_in">array</span>, size);</span><br><span class="line">HeapMake(&amp;heap);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"建堆完成\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//查找最小的前K个数</span></span><br><span class="line"><span class="keyword">int</span> <span class="built_in">array</span>[] = &#123; <span class="number">1</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">3</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> sz = <span class="keyword">sizeof</span>(<span class="built_in">array</span>) / <span class="keyword">sizeof</span>(<span class="built_in">array</span>[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> *ret = TopK(<span class="built_in">array</span>, sz, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>,ret[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;\assets\js\APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h4 id=&quot;堆的概念&quot;&gt;&lt;a href=&quot;#堆的概念&quot; class=&quot;headerlink&quot; title=&quot;堆的概念&quot;&gt;&lt;/a&gt;堆的概念&lt;/
      
    
    </summary>
    
      <category term="数据结构" scheme="https://LiuZiQiao.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="https://LiuZiQiao.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="堆" scheme="https://LiuZiQiao.github.io/tags/%E5%A0%86/"/>
    
  </entry>
  
  <entry>
    <title>面向对象之类以及内部类</title>
    <link href="https://LiuZiQiao.github.io/2018/08/28/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%B9%8B%E5%86%85%E9%83%A8%E7%B1%BB/"/>
    <id>https://LiuZiQiao.github.io/2018/08/28/面向对象之内部类/</id>
    <published>2018-08-28T00:40:24.000Z</published>
    <updated>2018-09-19T00:40:02.179Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h3 id="面向对象之内部类"><a href="#面向对象之内部类" class="headerlink" title="面向对象之内部类"></a>面向对象之内部类</h3><h4 id="类及其常见修饰符"><a href="#类及其常见修饰符" class="headerlink" title="类及其常见修饰符"></a>类及其常见修饰符</h4><ul><li>A：修饰符<br>权限修饰符  private 默认的，protected，public<br>状态修饰符  static，final<br>抽象修饰符  abstract</li><li>B：类<br>权限修饰符  默认的，public<br>状态修饰符  final<br>抽象修饰符  abstract</li><li>C：成员变量<br>权限修饰符  private 默认的，protected，public<br>状态修饰符  static，final</li><li>D：构造方法<br>权限修饰符  private 默认的，protected，public</li><li>E：成员方法：<br>  权限修饰符：private，默认的，protected，public<br>  状态修饰符：static，final<br>  抽象修饰符：abstract    </li><li>F：除此以外的组合规则：<ul><li>成员变量：public static final</li><li>成员方法：<ul><li>public static </li><li>public abstract</li><li>public final<br>内部类访问特点<br>a:内部类可以直接访问外部类的成员，包括私有。<br>b:外部类要访问内部类的成员，必须创建对象。<br>外部类名.内部类名 对象名 = 外部类对象.内部类对象;<br>案例演示<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">Outer.Inner  io = <span class="keyword">new</span> Outer().new Inner();</span><br><span class="line">io.print();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outer</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> num = <span class="number">20</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> num = <span class="number">30</span>;</span><br><span class="line">System.out.println(num);</span><br><span class="line">System.out.println(<span class="keyword">this</span>.num);</span><br><span class="line">System.out.println(Outer.<span class="keyword">this</span>.num);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output：</span><br><span class="line"><span class="number">30</span></span><br><span class="line"><span class="number">20</span></span><br><span class="line"><span class="number">10</span></span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h4 id="静态类及其方法访问"><a href="#静态类及其方法访问" class="headerlink" title="静态类及其方法访问"></a>静态类及其方法访问</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test2</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">Outer.Inner oi = <span class="keyword">new</span> Outer.Inner();</span><br><span class="line">oi.method();</span><br><span class="line">Outer.Inner2.method2();<span class="comment">//静态方法调用</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outer</span></span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"method"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Inner2</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"method2"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="私有类及其访问特点"><a href="#私有类及其访问特点" class="headerlink" title="私有类及其访问特点"></a>私有类及其访问特点</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test1</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Outer oi = <span class="keyword">new</span> Outer();</span><br><span class="line">oi.print();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outer</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> num = <span class="number">30</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> num = <span class="number">20</span>;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(num);   <span class="comment">//20</span></span><br><span class="line">System.out.println(Outer.<span class="keyword">this</span>.num);  <span class="comment">//30</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Inner inner = <span class="keyword">new</span> Inner();</span><br><span class="line">inner.method();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>匿名类<br>。。。未完待续</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;\assets\js\APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h3 id=&quot;面向对象之内部类&quot;&gt;&lt;a href=&quot;#面向对象之内部类&quot; class=&quot;headerlink&quot; title=&quot;面向对象之内部类&quot;&gt;&lt;/a&gt;面向对象之内部类&lt;/h3
      
    
    </summary>
    
      <category term="java" scheme="https://LiuZiQiao.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://LiuZiQiao.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>二叉树基本操作下</title>
    <link href="https://LiuZiQiao.github.io/2018/08/26/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%E4%B8%8B/"/>
    <id>https://LiuZiQiao.github.io/2018/08/26/二叉树基本操作下/</id>
    <published>2018-08-26T13:43:52.000Z</published>
    <updated>2018-09-19T00:54:25.995Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h3 id="二叉树进阶"><a href="#二叉树进阶" class="headerlink" title="二叉树进阶"></a>二叉树进阶</h3><h4 id="将三种递归遍历改写成非递归遍历形式"><a href="#将三种递归遍历改写成非递归遍历形式" class="headerlink" title="将三种递归遍历改写成非递归遍历形式"></a>将三种递归遍历改写成非递归遍历形式</h4><p><strong>头文件引用</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">二叉树的遍历非递归、层序遍历、是否是完全二叉树</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"BTree.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Stack.h"</span>   <span class="comment">//递归遍历用stack完成</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Queue.h"</span>  <span class="comment">//层序遍历用queue完成</span></span></span><br></pre></td></tr></table></figure></p><p><strong>先序遍历</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">preOrderTraverse</span><span class="params">(BTreeNode *root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">BTreeNode *cur = root;</span><br><span class="line">BTreeNode *top = <span class="literal">NULL</span>;</span><br><span class="line">Stack <span class="built_in">stack</span>;</span><br><span class="line">StackInit(&amp;<span class="built_in">stack</span>);</span><br><span class="line"><span class="keyword">while</span> (cur != <span class="literal">NULL</span> || !StackEmpty(&amp;<span class="built_in">stack</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (cur != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">StackPush(&amp;<span class="built_in">stack</span>, cur);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>, cur-&gt;data);</span><br><span class="line">cur = cur-&gt;LeftChild;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">top = StackTop(&amp;<span class="built_in">stack</span>);</span><br><span class="line">StackPop(&amp;<span class="built_in">stack</span>);</span><br><span class="line">cur = top-&gt;RightChild;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>中序遍历</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inOrderTraverse</span><span class="params">(BTreeNode *root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">BTreeNode *cur = root;</span><br><span class="line">BTreeNode *top;</span><br><span class="line">Stack <span class="built_in">stack</span>;</span><br><span class="line">StackInit(&amp;<span class="built_in">stack</span>);</span><br><span class="line"><span class="keyword">while</span> (cur != <span class="literal">NULL</span> || !StackEmpty(&amp;<span class="built_in">stack</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (cur!=<span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">StackPush(&amp;<span class="built_in">stack</span>, cur);</span><br><span class="line">cur = cur-&gt;LeftChild;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">top = StackTop(&amp;<span class="built_in">stack</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>,top-&gt;data);</span><br><span class="line">StackPop(&amp;<span class="built_in">stack</span>);</span><br><span class="line">cur = top-&gt;RightChild;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>后序遍历</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">lastOrderTraverse</span><span class="params">(BTreeNode *root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">BTreeNode *cur = root;</span><br><span class="line">BTreeNode *top,*last = <span class="literal">NULL</span>;</span><br><span class="line">Stack <span class="built_in">stack</span>;</span><br><span class="line">StackInit(&amp;<span class="built_in">stack</span>);</span><br><span class="line"><span class="keyword">while</span> (cur != <span class="literal">NULL</span> || !StackEmpty(&amp;<span class="built_in">stack</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (cur != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">StackPush(&amp;<span class="built_in">stack</span>, cur);</span><br><span class="line">cur = cur-&gt;LeftChild;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">top = StackTop(&amp;<span class="built_in">stack</span>);</span><br><span class="line"><span class="keyword">if</span> (top-&gt;RightChild == <span class="literal">NULL</span> || top-&gt;RightChild == last)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//判断右子树是否遍历过</span></span><br><span class="line">StackPop(&amp;<span class="built_in">stack</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>, top-&gt;data);</span><br><span class="line">last = top;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">cur = top-&gt;RightChild;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>层序遍历非递归算法</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//层序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LevelTraverse</span><span class="params">(BTreeNode *root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Queue <span class="built_in">queue</span>;</span><br><span class="line">QueueInit(&amp;<span class="built_in">queue</span>);</span><br><span class="line">BTreeNode *pre;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (root == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">QueuePush(&amp;<span class="built_in">queue</span>,root); <span class="comment">//存放结点地址，不是结点</span></span><br><span class="line"><span class="keyword">while</span> (!QueueEmpty(&amp;<span class="built_in">queue</span>))</span><br><span class="line">&#123;</span><br><span class="line">pre = QueueFront(&amp;<span class="built_in">queue</span>);</span><br><span class="line">QueuePop(&amp;<span class="built_in">queue</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pre-&gt;LeftChild != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">QueuePush(&amp;<span class="built_in">queue</span>, pre-&gt;LeftChild);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (pre-&gt;RightChild != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">QueuePush(&amp;<span class="built_in">queue</span>, pre-&gt;RightChild);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>, pre-&gt;data);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="二叉树的其他操作"><a href="#二叉树的其他操作" class="headerlink" title="二叉树的其他操作"></a>二叉树的其他操作</h4><p>1.判断一棵树是不是完全二叉树<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判断一棵树是不是完全二叉树</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">IsCompleteBTree</span><span class="params">(BTreeNode *root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Queue <span class="built_in">queue</span>;</span><br><span class="line">QueueInit(&amp;<span class="built_in">queue</span>);</span><br><span class="line">BTreeNode *pre;</span><br><span class="line"><span class="comment">//这里和层序遍历的区别：pre 可能是NULL</span></span><br><span class="line"><span class="keyword">if</span> (root == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//如果是完全二叉树，剩下的结点应该全是NULL</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">QueuePush(&amp;<span class="built_in">queue</span>, root);</span><br><span class="line"><span class="keyword">while</span> (!QueueEmpty(&amp;<span class="built_in">queue</span>))</span><br><span class="line">&#123;</span><br><span class="line">pre = QueueFront(&amp;<span class="built_in">queue</span>);</span><br><span class="line">QueuePop(&amp;<span class="built_in">queue</span>);</span><br><span class="line"><span class="keyword">if</span> (pre == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">QueuePush(&amp;<span class="built_in">queue</span>, pre-&gt;LeftChild);</span><br><span class="line">QueuePush(&amp;<span class="built_in">queue</span>, pre-&gt;RightChild);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//队列剩余结点是否都是NULL</span></span><br><span class="line"><span class="comment">//判定队列为空 </span></span><br><span class="line"><span class="keyword">while</span> (!QueueEmpty(&amp;<span class="built_in">queue</span>))</span><br><span class="line">&#123;</span><br><span class="line">pre = QueueFront(&amp;<span class="built_in">queue</span>);</span><br><span class="line">QueuePop(&amp;<span class="built_in">queue</span>);</span><br><span class="line"><span class="keyword">if</span> (pre != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>2.求二叉树的镜像</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//求镜像 递归写法</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Mirror</span><span class="params">(BTreeNode *root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (root == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Mirror(root-&gt;LeftChild);</span><br><span class="line">Mirror(root-&gt;RightChild);</span><br><span class="line"></span><br><span class="line">BTreeNode *t = root-&gt;LeftChild;</span><br><span class="line">root-&gt;LeftChild = root-&gt;RightChild;</span><br><span class="line">root-&gt;RightChild = t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//非递归写法</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Mirror2</span><span class="params">(BTreeNode *root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">BTreeNode *cur = root;</span><br><span class="line">BTreeNode *top, *last = <span class="literal">NULL</span>;</span><br><span class="line">Stack <span class="built_in">stack</span>;</span><br><span class="line">StackInit(&amp;<span class="built_in">stack</span>);</span><br><span class="line"><span class="keyword">while</span> (cur != <span class="literal">NULL</span> || !StackEmpty(&amp;<span class="built_in">stack</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (cur != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">StackPush(&amp;<span class="built_in">stack</span>, cur);</span><br><span class="line">cur = cur-&gt;LeftChild;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//top的左子树已经遍历过了</span></span><br><span class="line">top = StackTop(&amp;<span class="built_in">stack</span>);</span><br><span class="line"><span class="keyword">if</span> (top-&gt;RightChild == <span class="literal">NULL</span> || top-&gt;RightChild == last)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//判断右子树是否遍历过</span></span><br><span class="line"></span><br><span class="line">BTreeNode *t = top-&gt;LeftChild;</span><br><span class="line">top-&gt;LeftChild = top-&gt;RightChild;</span><br><span class="line">top-&gt;RightChild = t;</span><br><span class="line"></span><br><span class="line"><span class="comment">//记录这个被遍历的结点</span></span><br><span class="line">last = top;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">cur = top-&gt;RightChild;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.有前序遍历和中序遍历重建二叉树(前序遍历结果：1,2,3,4,5,6 ;中序遍历结果：4, 2, 5, 1, 6, 3)<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BTreeNode* <span class="title">CreateTree</span><span class="params">(<span class="keyword">int</span> preOrder[],<span class="keyword">int</span> inOrder[],<span class="keyword">int</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (size &lt;= <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> rootValue = preOrder[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> rootIndexInOrder = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (inOrder[i] == rootValue)</span><br><span class="line">&#123;</span><br><span class="line">rootIndexInOrder = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">assert(rootIndexInOrder != <span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">BTreeNode *root = CreateNode(rootValue);</span><br><span class="line">root-&gt;LeftChild = CreateTree(preOrder+<span class="number">1</span>,inOrder,rootIndexInOrder);</span><br><span class="line">root-&gt;RightChild = CreateTree(preOrder + <span class="number">1</span> + rootIndexInOrder, </span><br><span class="line">inOrder + <span class="number">1</span> + rootIndexInOrder, size - <span class="number">1</span> - rootIndexInOrder);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>4.测试<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TestBTree</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> arr[] = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">-1</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">6</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">9</span>, <span class="number">-1</span>, <span class="number">10</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> size = <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">int</span> pUsedSize;</span><br><span class="line"></span><br><span class="line">BTreeNode *root = CreateBTree(arr, size, &amp;pUsedSize);</span><br><span class="line"></span><br><span class="line">preOrderTraverse(root);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">inOrderTraverse(root);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">lastOrderTraverse(root);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line">LevelTraverse(root);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line">IsCompleteBTree(root) == <span class="number">1</span> ? <span class="built_in">printf</span>(<span class="string">"是完全二叉树\n"</span>): <span class="built_in">printf</span>(<span class="string">"是完全二叉树\n"</span>);</span><br><span class="line"></span><br><span class="line">Mirror(root);</span><br><span class="line"></span><br><span class="line"><span class="comment">//二叉树重建测试</span></span><br><span class="line"><span class="keyword">int</span> preOrder[] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> inOrder[] = &#123; <span class="number">2</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">3</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> size = <span class="keyword">sizeof</span>(preOrder) / <span class="keyword">sizeof</span>(<span class="keyword">int</span>);</span><br><span class="line">BTreeNode * root = CreateTree(preOrder,inOrder,size);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;\assets\js\APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h3 id=&quot;二叉树进阶&quot;&gt;&lt;a href=&quot;#二叉树进阶&quot; class=&quot;headerlink&quot; title=&quot;二叉树进阶&quot;&gt;&lt;/a&gt;二叉树进阶&lt;/h3&gt;&lt;h4 id=&quot;将三种
      
    
    </summary>
    
      <category term="数据结构" scheme="https://LiuZiQiao.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="https://LiuZiQiao.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="二叉树" scheme="https://LiuZiQiao.github.io/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>二叉树基本操作上</title>
    <link href="https://LiuZiQiao.github.io/2018/08/25/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%E4%B8%8A/"/>
    <id>https://LiuZiQiao.github.io/2018/08/25/二叉树基本操作上/</id>
    <published>2018-08-25T00:26:19.000Z</published>
    <updated>2018-09-19T00:55:08.044Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h3 id="二叉树的概念"><a href="#二叉树的概念" class="headerlink" title="二叉树的概念"></a>二叉树的概念</h3><p>一棵二叉树是结点的一个有限集合，该集合或者为空，或者是由一个根节点加上两棵分别称为左子树和右子树的二叉树组成<br><strong>二叉树特点</strong>：</p><ul><li>每个结点最多有两棵子树，即二叉树不存在度大于2的结点</li><li>二叉树的子树有左右之分，其子树的次序不能颠倒   </li></ul><p>因此：二叉树是通过上述形式的组合或嵌套而形成   </p><h3 id="满二叉树-amp-完全二叉树"><a href="#满二叉树-amp-完全二叉树" class="headerlink" title="满二叉树&amp;完全二叉树"></a>满二叉树&amp;完全二叉树</h3><ul><li>满二叉树：在一棵二叉树中，如果所有分支结点都存在左子树和右子树，并且所有叶子节点都在同一层上</li><li>完全二叉树：如果一棵具有N个结点的二叉树的结构与满二叉树的前N个结点的结构相同，称为完全二叉树</li></ul><h3 id="二叉树的性质"><a href="#二叉树的性质" class="headerlink" title="二叉树的性质"></a>二叉树的性质</h3><ul><li>若规定根节点的层数为1，则一棵非空二叉树的第i层上最多有<br>(i&gt;0)个结点</li><li>若规定只有根节点的二叉树的深度为1，则深* 度为K的二叉树的最大<br>结点数是(k&gt;=0)</li><li>对任何一棵二叉树, 如果其叶结点个数为 n0, 度为2的非叶结点个数<br>为 n2,则有n0＝n2＋1</li><li>具有n个结点的完全二叉树的深度k为上取整<br>对于具有n个结点的完全二叉树，如果按照从上至下从左至右的顺序</li><li>对所有节点从0开始编号，则对于序号为i的结点有：<br>  1.若i&gt;0，双亲序号：(i-1)/2；<br>  i=0，i为根节点编号，无双亲结点<br>  2.若2i+1<n,左孩子序号：2i+1,否则无左孩子 3.若2i+1="">n,右孩子序号：2i+1,否则无右孩子</n,左孩子序号：2i+1,否则无左孩子></li></ul><h3 id="二叉树的存储结构"><a href="#二叉树的存储结构" class="headerlink" title="二叉树的存储结构"></a>二叉树的存储结构</h3><p><strong>二叉树主要有顺序存储和链式存储结构</strong></p><ul><li>顺序存储结构<br>对于一棵完全二叉树所有结点按照层序自顶向下，同一层自左向右顺<br>序编号，就得到一个节点的顺序序列<br>1.优点：存储完全二叉树，简单省空间<br>2.缺点：存储一般二叉树尤其单支树，存储空间利用不高</li><li>链式存储<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BinTreeNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BinTreeNode</span>* _<span class="title">pLeft</span>;</span> <span class="comment">// 当前节点左孩子</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BinTreeNode</span>* _<span class="title">pRight</span>;</span> <span class="comment">// 当前节点右孩子</span></span><br><span class="line">DataType _data; <span class="comment">// 当前节点值域</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><h3 id="二叉树基本操作"><a href="#二叉树基本操作" class="headerlink" title="二叉树基本操作"></a>二叉树基本操作</h3><h4 id="二叉树的创建"><a href="#二叉树的创建" class="headerlink" title="二叉树的创建"></a>二叉树的创建</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> DataType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BTreeNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">DataType data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BTreeNode</span> *<span class="title">LeftChild</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BTreeNode</span> *<span class="title">RightChild</span>;</span></span><br><span class="line">&#125; BTreeNode;</span><br><span class="line"></span><br><span class="line"><span class="comment">//二叉树的初始化</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BTreeInit</span><span class="params">(BTreeNode *root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">root-&gt;data = <span class="number">0</span>;</span><br><span class="line">root = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建结点</span></span><br><span class="line"><span class="function">BTreeNode * <span class="title">CreateNode</span><span class="params">(DataType data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">BTreeNode *node = (BTreeNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BTreeNode));</span><br><span class="line">node-&gt;data = data;</span><br><span class="line">node-&gt;LeftChild = node-&gt;RightChild = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建二叉树</span></span><br><span class="line"><span class="function">BTreeNode * <span class="title">CreateBTree</span><span class="params">( <span class="keyword">int</span> arr[],<span class="keyword">int</span> size,<span class="keyword">int</span> *pUsedSize)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (size &lt;= <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">*pUsedSize = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> leftUse, rightUse;</span><br><span class="line"><span class="keyword">int</span> data = arr[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">if</span> (data == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">*pUsedSize = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BTreeNode *root = CreateNode(data);</span><br><span class="line"></span><br><span class="line">root-&gt;LeftChild = CreateBTree(arr + <span class="number">1</span>,size - <span class="number">1</span>,&amp;leftUse);</span><br><span class="line">root-&gt;RightChild = CreateBTree(arr + <span class="number">1</span>+leftUse, size - leftUse - <span class="number">1</span>,&amp;rightUse);</span><br><span class="line"></span><br><span class="line">*pUsedSize = leftUse + rightUse + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="二叉树的遍历"><a href="#二叉树的遍历" class="headerlink" title="二叉树的遍历"></a>二叉树的遍历</h4><p>遵循某种次序，遍历二叉树中的所有节点，使得每个结点被访问一次，而且仅访问一次。“访问”：即对结点施行某些操作。<br>若规定VLR分别代表：遍历根节点、遍历根节点的左子树、遍历根节点的右子树，则有：<br>前序：VLR<br>中序：LVR<br>后序：LRV<br><strong>前序遍历递归算法</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//先序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PreOrderTraverse</span><span class="params">(BTreeNode *root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (root == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>,root-&gt;data);</span><br><span class="line">PreOrderTraverse(root-&gt;LeftChild);</span><br><span class="line">PreOrderTraverse(root-&gt;RightChild);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>中序遍历递归算法</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//中序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InOrderTraverse</span><span class="params">(BTreeNode *root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (root == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">InOrderTraverse(root-&gt;LeftChild);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>, root-&gt;data);</span><br><span class="line">InOrderTraverse(root-&gt;RightChild);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>后序遍历递归算法</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//后序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span>  <span class="title">LastOrderTraverse</span><span class="params">(BTreeNode *root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (root == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">LastOrderTraverse(root-&gt;LeftChild);</span><br><span class="line">LastOrderTraverse(root-&gt;RightChild);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>, root-&gt;data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="二叉树的其他操作："><a href="#二叉树的其他操作：" class="headerlink" title="二叉树的其他操作："></a>二叉树的其他操作：</h4><p>　1. 求二叉树的高度<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX(a,b) ((a)&gt;(b)?(a):(b))</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetHight</span><span class="params">(BTreeNode *root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (root ==<span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> MAX(GetHight(root-&gt;LeftChild) ,GetHight(root-&gt;RightChild)) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>　2. 求二叉树叶子结点的个数<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetLeafNum</span><span class="params">(BTreeNode *root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (root == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (root-&gt;LeftChild == <span class="literal">NULL</span> &amp;&amp; root-&gt;RightChild == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> GetLeafNum(root-&gt;LeftChild) + GetLeafNum(root-&gt;RightChild);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>　3. 求二叉树结点的个数<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方法一</span></span><br><span class="line"><span class="keyword">int</span> count;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetNodeNum</span><span class="params">(BTreeNode *root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (root == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">GetNodeNum(root-&gt;LeftChild);</span><br><span class="line">GetNodeNum(root-&gt;RightChild);</span><br><span class="line">count++;</span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法二</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetNodeNum2</span><span class="params">(BTreeNode *root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (root == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> left = GetNodeNum2(root-&gt;LeftChild);</span><br><span class="line"><span class="keyword">int</span> right = GetNodeNum2(root-&gt;RightChild);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> left + right + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ol><li>求二叉树第K层结点的个数   <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetLevelKNum</span><span class="params">(BTreeNode *root,DataType k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(k&gt;=<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (root == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (k == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">DataType left = GetLevelKNum(root-&gt;LeftChild, k<span class="number">-1</span>);</span><br><span class="line">DataType right = GetLevelKNum(root-&gt;RightChild, k<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> left + right;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>　5. 判断一个节点是否在一棵二叉树中<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BTreeNode * <span class="title">FindNode</span><span class="params">(BTreeNode *root,DataType data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (root == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (root-&gt;data == data)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BTreeNode *result1 = FindNode(root-&gt;LeftChild,data);</span><br><span class="line">BTreeNode *result2 = FindNode(root-&gt;LeftChild, data);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> result1 == <span class="literal">NULL</span> ? result1 : result2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;\assets\js\APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h3 id=&quot;二叉树的概念&quot;&gt;&lt;a href=&quot;#二叉树的概念&quot; class=&quot;headerlink&quot; title=&quot;二叉树的概念&quot;&gt;&lt;/a&gt;二叉树的概念&lt;/h3&gt;&lt;p&gt;一棵二叉
      
    
    </summary>
    
      <category term="数据结构" scheme="https://LiuZiQiao.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="https://LiuZiQiao.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="二叉树" scheme="https://LiuZiQiao.github.io/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
  </entry>
  
</feed>
