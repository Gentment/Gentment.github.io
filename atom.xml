<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LiuxiaoKun</title>
  
  <subtitle>My Awesome Site</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://LiuZiQiao.github.io/"/>
  <updated>2018-11-15T05:10:37.584Z</updated>
  <id>https://LiuZiQiao.github.io/</id>
  
  <author>
    <name>LiuXiaoKun</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MySQL安装教程</title>
    <link href="https://LiuZiQiao.github.io/2018/11/15/mysql%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/"/>
    <id>https://LiuZiQiao.github.io/2018/11/15/mysql安装教程/</id>
    <published>2018-11-15T04:43:07.000Z</published>
    <updated>2018-11-15T05:10:37.584Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><a id="more"></a><p>MySQL安装有两种方式，一种是免安装直接下载安装包解压配置即可使用，另外一种就是下载安装</p><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p><a href="https://dev.mysql.com/downloads/installer/" target="_blank" rel="noopener">MySQL下载地址</a><br><a href="https://pan.baidu.com/s/13KGXf1UwLSfxs_-x7UGdqA" target="_blank" rel="noopener">连接工具下载</a>    <strong>提取码：fquf</strong> </p><h3 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h3><p>具体安装见<br><a href="https://blog.csdn.net/qq_39478237/article/details/84102513" target="_blank" rel="noopener">https://blog.csdn.net/qq_39478237/article/details/84102513</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;MySQL安装有两种方式，一种是免安装直接下载安装包解压配置即可使用，另外一种就是下载安装&lt;/p&gt;
&lt;h3 id=&quot;准备工作&quot;&gt;&lt;a hr
      
    
    </summary>
    
      <category term="MySQL" scheme="https://LiuZiQiao.github.io/categories/MySQL/"/>
    
    
  </entry>
  
  <entry>
    <title>解决MySQL第一次连接失败</title>
    <link href="https://LiuZiQiao.github.io/2018/11/15/%E8%A7%A3%E5%86%B3MySQL%E7%AC%AC%E4%B8%80%E6%AC%A1%E8%BF%9E%E6%8E%A5%E5%A4%B1%E8%B4%A5/"/>
    <id>https://LiuZiQiao.github.io/2018/11/15/解决MySQL第一次连接失败/</id>
    <published>2018-11-14T16:01:00.000Z</published>
    <updated>2018-11-15T04:42:24.852Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><a id="more"></a><p>上一篇讲了MySQL数据库的安装，安装之后我们用Navicat工具连接时可能会出现以下这种情况，就这种情况给出了解决办法</p><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p><strong>Navicat for MySQL 连接数据库时报错 client dose not support authentication protocol requested by server;consider</strong></p><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p><img src="https://img-blog.csdnimg.cn/20181115123652200.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5NDc4MjM3,size_16,color_FFFFFF,t_70" alt="1"><br><img src="https://img-blog.csdnimg.cn/20181115123816493.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5NDc4MjM3,size_16,color_FFFFFF,t_70" alt="2"></p><p><strong>命令如下</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1、use mysql;</span><br><span class="line">2、alter user &apos;root&apos;@&apos;localhost&apos; identified with mysql_native_password by &apos;********&apos;;</span><br><span class="line">3、flush privileges;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;上一篇讲了MySQL数据库的安装，安装之后我们用Navicat工具连接时可能会出现以下这种情况，就这种情况给出了解决办法&lt;/p&gt;
&lt;h3 
      
    
    </summary>
    
      <category term="工具" scheme="https://LiuZiQiao.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
  </entry>
  
  <entry>
    <title>C++重载</title>
    <link href="https://LiuZiQiao.github.io/2018/11/11/C++%E8%A7%A3%E6%9E%90%E9%87%8D%E8%BD%BD/"/>
    <id>https://LiuZiQiao.github.io/2018/11/11/C++解析重载/</id>
    <published>2018-11-11T13:53:53.000Z</published>
    <updated>2018-11-11T13:53:53.840Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><a id="more"></a>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>C++浅谈new delete</title>
    <link href="https://LiuZiQiao.github.io/2018/11/11/C++%E6%B5%85%E8%B0%88new%E3%80%81delete/"/>
    <id>https://LiuZiQiao.github.io/2018/11/11/C++浅谈new、delete/</id>
    <published>2018-11-11T13:53:53.000Z</published>
    <updated>2018-11-22T14:18:18.608Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><a id="more"></a><p>在C语言的学习中，我用知道动态内存开辟是使用malloc函数来进行开辟一段连续的空间，释放则是用free来进行释放，而学习了C++我们知道，在C++中开辟内存是使用new，释放则也与之对应的delete，下面我们就来说说malloc/free与new/delete之间的区别以及底层实现原理</p><h3 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h3><p>在C语言库中函数原型如下<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">malloc</span><span class="params">(<span class="keyword">size_t</span> size)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">free</span><span class="params">(<span class="keyword">void</span> *ptr)</span></span>;</span><br></pre></td></tr></table></figure></p><h4 id="malloc-free使用"><a href="#malloc-free使用" class="headerlink" title="malloc/free使用"></a>malloc/free使用</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> *p = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>));     <span class="comment">//指向整型的指针p指向一个大小为100字节的内存的地址</span></span><br><span class="line"><span class="keyword">if</span>(p == <span class="literal">NULL</span>)                           <span class="comment">//使用之前一定要判断释放申请成功</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"application memory error"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">free</span>(p);    <span class="comment">//释放</span></span><br></pre></td></tr></table></figure><p>与之还以两个函数<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">calloc</span><span class="params">(<span class="keyword">size_t</span> nmemb, <span class="keyword">size_t</span> size)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">realloc</span><span class="params">(<span class="keyword">void</span> *ptr, <span class="keyword">size_t</span> size)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">reallocarray</span><span class="params">(<span class="keyword">void</span> *ptr, <span class="keyword">size_t</span> nmemb, <span class="keyword">size_t</span> size)</span></span>;</span><br></pre></td></tr></table></figure></p><p>calloc 函数和malloc的区别就是申请好空间会初始化成0，另外calloc函数在使用时需要传入元素个数和元素字节大小</p><p>recalloc函数用于修改一个原先已经分配好的内存块的大小，可以使一块内存扩大或缩小，如果扩大内存，则原来的内存块保持不变，在内存尾部增加新的内存块，且不进行初始化。如果缩小内存，则原来内存块从尾部进行删减。如果原先的内存块无法扩充，则新开辟一块内存，并复制原先的内存的内容，原先内存块失效无法再进行访问。</p><h3 id="new-delete使用"><a href="#new-delete使用" class="headerlink" title="new/delete使用"></a>new/delete使用</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> *p = <span class="keyword">new</span> <span class="keyword">int</span>;   <span class="comment">//在自由存储区中分配创建了一个整形对象，并返回一个指向该对象的地址来初始化指针p</span></span><br><span class="line"><span class="keyword">int</span> *p = <span class="keyword">new</span> <span class="keyword">int</span>(); <span class="comment">//对指针p指向的地址的值进行了初始化为0</span></span><br><span class="line"><span class="keyword">int</span> *P = <span class="keyword">new</span> <span class="keyword">int</span>(<span class="number">1024</span>);<span class="comment">//初始化为1024</span></span><br></pre></td></tr></table></figure><p>　　当动态创建的对象用完后必须释放内存，避免造成内存泄漏，可以用delete来完成，new和delete是成对使用的，如下命令释放p指向的int型对象所占用的内存空间：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> p</span><br><span class="line">p = <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure></p><p>C++中允许动态创建const对象<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span>  *p=<span class="keyword">new</span> <span class="keyword">const</span> <span class="keyword">int</span>(<span class="number">1024</span>);  <span class="comment">//动态创建的const对象必须进行初始化，并且进行初始化后的值不能再改变。</span></span><br></pre></td></tr></table></figure></p><h4 id="new-delete-使用"><a href="#new-delete-使用" class="headerlink" title="new[]/delete[]使用"></a>new[]/delete[]使用</h4><p>当创建一个动态数组对象和进行内存释放时，执行以下语句：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> *p=<span class="keyword">new</span> <span class="keyword">int</span>[];               <span class="comment">//指针p所指向的数组未初始化</span></span><br><span class="line"><span class="keyword">int</span> *p=<span class="keyword">new</span> <span class="keyword">int</span>[n];             <span class="comment">//指针p指向长度为n的数组，未初始化</span></span><br><span class="line"><span class="keyword">int</span> *p=<span class="keyword">new</span> <span class="keyword">int</span>[]();            <span class="comment">//指针p所指向的地址初始化为0</span></span><br><span class="line"><span class="keyword">delete</span> [] p;                   <span class="comment">//回收p所指向的数组</span></span><br></pre></td></tr></table></figure></p><h3 id="区别及原理"><a href="#区别及原理" class="headerlink" title="区别及原理"></a>区别及原理</h3><h4 id="new-delete原理"><a href="#new-delete原理" class="headerlink" title="new/delete原理"></a>new/delete原理</h4><p>首先我们查看new/delete底层是如何实现的：<br><img src="https://img-blog.csdnimg.cn/20181122220739123.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5NDc4MjM3,size_16,color_FFFFFF,t_70" alt="1">   </p><p>通过上面的图我们不难看出其实new并不直接开辟空间，它也是通过operator new 来获取内存的，而operator new 实质上还是调用malloc来开辟空间的。同样的道理，delete也不是直接释放空间。</p><h4 id="new-delete-原理"><a href="#new-delete-原理" class="headerlink" title="new[]/delete[]原理"></a>new[]/delete[]原理</h4><p>上面理解了new/delete之后再来看new[]/delete[]也非常容易了，其实原理是一样的，当使用new[]/delete[]也是调用new/delete来实现的。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">A* p = <span class="keyword">new</span> A[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">delete</span>[] p;</span><br></pre></td></tr></table></figure></p><p>delete[] 实际做了这样几件事：</p><ul><li>一次调用p指向对象数组中的每个对象的析构函数，一共10次</li><li>调用operator delete<a href=""></a>,它将在调用operator delete</li><li>底层free执行operator delete表达式<br><img src="https://img-blog.csdnimg.cn/20181122220840212.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5NDc4MjM3,size_16,color_FFFFFF,t_70" alt="2"></li></ul><p><strong>稍作总结</strong>：</p><ol><li>operator new/operator delete，operator new[]/operator delete[],malloc/free等用法一样</li><li>它们只负责分配空间/释放空间，不会调用对象构造函数，析构函数来初始化和清理对象</li><li>实际operator new和operator delete 是对malloc和free的一层封装</li></ol><p><strong>注意点</strong><br>可能你对上面还有些许疑惑，下面的解释可能会解开你的疑惑</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Array* p = <span class="keyword">new</span> Array[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">delete</span>[] p;</span><br></pre></td></tr></table></figure><p>执行这两条语句的时候实际上调用operator                   new<a href="10*sizeof(Array"></a>+4)分配大小为10*sizeof(Array)+4空间，其中多的四个字节空间用于存放N(10)这个数字以便于delete中调用析构函数析构对象（调用析构函数的次数），空间申请好了之后调用构造函数创建对象。delete[] p执行的时候首先取N(10)对象个数，然后调用析构函数析构对象，最后用operator delete[]函数释放空间。</p><h4 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h4><p><strong>先来一个问题</strong><br>有了malloc/free为何还要new/delete ？<br>malloc和free无法满足对动态对象的要求：在创建对象的同时自动调用构造函数，对象销毁时自动调用析构函数。由于malloc/free是库函数不是操作符，不在编辑器的权限之内，而C++中需要需要new操作符来自动调用构造函数来申请空间初始化，以及需要一个能够完成清理与释放内存的delete操作符   </p><p>共同点：<br>    malloc/free  new delete都是从堆上申请空间，并且需要用户手动释放<br>不同点：<br>1.malloc和free是函数，new delete是操作符<br>2.malloc申请空间不会初始化，new 可以初始化<br>3.malloc申请空间时需要计算所需的空间大小并传递，new只需要给类型就可以<br>4.mallco申请空间失败时返回NULL，因此在使用时需要进行判空操作 ，new不需要，new需要捕获异常<br>5.malloc返回值是void*，使用时需要进行强转，new不需要，只需要给空间的类型即可<br>6.申请自定义类型对象时，mallco/free只会开辟空间和释放空间，不会调用构造函数与析构函数，而new在申请空间后调用构造函数完成对象初始化，delete释放空间前会调用析构函数完成资源清理<br>7.new/delete比malloc/free效率稍微低些，因此new/delete底层封装了malloc/free</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;\assets\js\APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;在C语言的学习中，我用知道动态内存开辟是使用malloc函数来进行开辟一段连续的空间，释放则是用free来进行释放，而学习了C++我们知道
      
    
    </summary>
    
      <category term="C/C++" scheme="https://LiuZiQiao.github.io/categories/C-C/"/>
    
    
  </entry>
  
  <entry>
    <title>Linux系统之基础IO</title>
    <link href="https://LiuZiQiao.github.io/2018/11/09/Linux%E5%9F%BA%E7%A1%80IO/"/>
    <id>https://LiuZiQiao.github.io/2018/11/09/Linux基础IO/</id>
    <published>2018-11-09T03:11:11.000Z</published>
    <updated>2018-11-10T03:33:56.097Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><a id="more"></a><p>学过C语言的都知道，在C语言中IO其实就是文件操作，像fopen，fwrite，fread，fseek，fprintf，fclose等都是C语言库函数中的系统调用接口，如下图是常用<br><img src="https://img-blog.csdnimg.cn/20181110112204660.png" alt="1"><br>先回顾下这些标准c库中文件I/O的接口的使用</p><h3 id="回顾C库中的IO"><a href="#回顾C库中的IO" class="headerlink" title="回顾C库中的IO"></a>回顾C库中的IO</h3><blockquote><p>   FILE <em>fopen(const char </em>path, const char <em>mode);<br>    size_t fread(void </em>ptr, size_t size, size_t nmemb, FILE <em>stream);<br>    size_t fwrite(const void </em>ptr, size_t size, size_t nmemb,</p></blockquote><p>它的返回值：文件流指针，这个文件流指针指向的是</p><p><a href="">2</a> </p><table><thead><tr><th>文件流指针</th><th>stdin</th><th>stdout</th><th>stderr</th><th>FILE*</th></tr></thead><tbody><tr><td>文件描述符</td><td>0</td><td>1</td><td>2</td><td>3</td></tr></tbody></table><p>一个进程运行起来之后默认打开了三个文件，关于文件描述符我在后面有介绍<br>下面演示一个C语言库中函数的使用<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    FILE *fp = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    fp = fopen(<span class="string">"./test.txt"</span>, <span class="string">"w"</span>);</span><br><span class="line">    <span class="keyword">if</span>  (fp == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"fopen error!!\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">char</span> *ptr = <span class="string">"apple!!"</span>;</span><br><span class="line">    fwrite(ptr, <span class="built_in">strlen</span>(ptr), <span class="number">1</span>, fp);</span><br><span class="line">    fseek(fp, <span class="number">10</span>, SEEK_END);</span><br><span class="line">    fwrite(ptr, <span class="built_in">strlen</span>(ptr), <span class="number">1</span>, fp);</span><br><span class="line">    </span><br><span class="line">    fseek(fp, <span class="number">0</span>, SEEK_SET);</span><br><span class="line">    <span class="keyword">char</span> buff[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    fread(buff, <span class="number">1024</span>, <span class="number">1</span>, fp);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"buff:[%s]\n"</span>, buff);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">fprintf</span>(fp, <span class="string">"\n%s-%d-%s\n"</span>, <span class="string">"apple"</span>, <span class="number">3</span>, <span class="string">"i love to eat!!"</span>);</span><br><span class="line"></span><br><span class="line">    fclose(fp);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="系统IO"><a href="#系统IO" class="headerlink" title="系统IO"></a>系统IO</h3><p>以下是一些系统调用IO接口</p><pre><code>int open(const char *pathname, int flags);int open(const char *pathname, int flags, mode_t mode);ssize_t write(int fd, const void *buf, size_t count);int creat(const char *pathname, mode_t mode);off_t lseek(int fd, off_t offset, int whence);//off_t lseek(int fd, off_t offset, int whence);//  fd: 文件描述符//  offset：偏移值//  whence：偏移起始位置//      SEEK_SET    文件起始位置//      SEEK_CUR    当前读写位置//      SEEK_END    文件末尾位置fileno将文件流指针转换成文件描述符fdopen 将文件描述符转换成文件流指针</code></pre><h4 id="文件描述符"><a href="#文件描述符" class="headerlink" title="文件描述符"></a>文件描述符</h4><p><strong>文件描述符是一个数字，那么一个数字是如何描述文件的呢？</strong><br>一个进程要对所有打开的文件进行管理，先将文件描述起来，然后组织管理<br>进程中对文件进程描述的 结构体叫file(struct file)<br>进程使用了一个结构体数组来组织这些描述，而文件的描述符就是这个结构体数组的下标<br>pcb中对文件的描述的一个机构图（file)数组的下标<br>系统调用open返回的是文件描述符：int<br>而c库中fopen返回的是一个文件流指针：FILE*</p><p>文件描述分配符规则：<br>寻找最小下未使用的下标</p><p>==文件描述符fd返回值：正确：非负值（文件描述符） 错误：-1==</p><h4 id="缓冲区"><a href="#缓冲区" class="headerlink" title="缓冲区"></a>缓冲区</h4><p>我们所说的缓冲区（print),用户态的一个缓冲区，是文件流指针自带的fprint，fwrite这些库函数<br>都是先把数据写入到缓冲区中，等缓冲区写满或者一些其他条件满足后才真正写入到文件中，<br>而系统调用没有这个用户态的缓冲区，（是直接写入到文件中）  </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *      open    close   read    write   lseek</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;   // 文件控制头文件</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//int open(const char *pathname, int flags, mode_t mode);</span></span><br><span class="line">    <span class="comment">//  pathname:   要打开的文件名</span></span><br><span class="line">    <span class="comment">//  flags：选项标志</span></span><br><span class="line">    <span class="comment">//      O_RDONLY    只读 </span></span><br><span class="line">    <span class="comment">//      O_WRONLY    只写</span></span><br><span class="line">    <span class="comment">//      O_RDWR      读写</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">//      O_CREAT     文件不存在则创建，存在则打开</span></span><br><span class="line">    <span class="comment">//      O_EXCL      与O_CREAT同用，若文件存在则报错</span></span><br><span class="line">    <span class="comment">//      O_TRUNC     打开文件的同时，清空文件原有内容</span></span><br><span class="line">    <span class="comment">//      O_APPEND    追加</span></span><br><span class="line">    <span class="comment">//  mode:文件权限，用于创建文件的时候</span></span><br><span class="line">   </span><br><span class="line">    <span class="keyword">int</span> fd = <span class="number">-1</span>;</span><br><span class="line">    fd = open(<span class="string">"./tmp.txt"</span>, O_RDWR | O_CREAT, <span class="number">0777</span>);</span><br><span class="line">    <span class="keyword">if</span> (fd &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        perror(<span class="string">"open error"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//ssize_t write(int fd, const void *buf, size_t count);</span></span><br><span class="line">    <span class="comment">//  fd: 文件描述符</span></span><br><span class="line">    <span class="comment">//  buf：要写入的数据</span></span><br><span class="line">    <span class="comment">//  count：要写入的数据长度</span></span><br><span class="line">    <span class="comment">//  返回值：实际的写入数据长度</span></span><br><span class="line">    <span class="keyword">char</span> *ptr = <span class="string">"apple!!\n"</span>;</span><br><span class="line">    <span class="keyword">ssize_t</span> wlen = write(fd, ptr, <span class="built_in">strlen</span>(ptr));</span><br><span class="line">    <span class="keyword">if</span> (wlen &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        perror(<span class="string">"write error"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    lseek(fd, <span class="number">0</span>, SEEK_SET);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//read：返回实际读取到的数据长度</span></span><br><span class="line">    <span class="keyword">char</span> buff[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">ssize_t</span> rlen = read(fd, buff, <span class="number">1024</span> - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (rlen &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        perror(<span class="string">"read error"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"buf:[%s]\n"</span>, buff);</span><br><span class="line"></span><br><span class="line">    close(fd);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="文件重定向"><a href="#文件重定向" class="headerlink" title="文件重定向"></a>文件重定向</h4><p>原理：将原本描述符所对应的下标的文件修改成另外一个文件，描述符没有变，但是真正通过描述符操作的这个文件已经改变了   </p><blockquote><p>int dup2(int oldfd, int newfd);</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*  演示文件描述符分配规则的demo</span></span><br><span class="line"><span class="comment"> *      1. 文件描述符是一个数字，并且这个数字是一个结构体数组的下标</span></span><br><span class="line"><span class="comment"> *  分配规则：</span></span><br><span class="line"><span class="comment"> *      寻找最小的未使用的下标</span></span><br><span class="line"><span class="comment"> *  一个进程运行起来之后，默认打开的三个文件：</span></span><br><span class="line"><span class="comment"> *      标准输入    标准输出    标准错误</span></span><br><span class="line"><span class="comment"> *      stdin       stdout      stderr</span></span><br><span class="line"><span class="comment"> *      0           1           2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> fd = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    fd = open(<span class="string">"./tmp.txt"</span>, O_RDWR | O_CREAT);</span><br><span class="line">    <span class="keyword">if</span> (fd &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        perror(<span class="string">"open error"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    dup2(fd, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"fd:%d\n"</span>, fd);</span><br><span class="line">    fflush(<span class="built_in">stdout</span>);</span><br><span class="line">    close(fd);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Linux下的文件系统"><a href="#Linux下的文件系统" class="headerlink" title="Linux下的文件系统"></a>Linux下的文件系统</h3><p>linux文件系统是由两层结构构建：第一层是虚拟文件系统（VFS），第二层是各种不同的具体文件系统。</p><p>VFS是把各种具体的文件系统的公共部分抽取出来，形成一个抽象层，是系统内核的一部分。它位于用户程序和具体的文件系统中间。它对用户</p><p>程序提供了标准的文件系统的调用接口，对具体的文件系统，它通过一系列的对不同文件系统公用的函数指针来实际调用具体的文件系统函数，完成实际<br>的各有的操作。任何使用文件系统的程序必须经过这层接口来使用它。通过这种方式，VFS就对用于屏蔽了底层文件系统的实现细节和差异。</p><p>  <img src="https://img-blog.csdnimg.cn/20181110112624493.png" alt="2"></p><p>通过 cat /proc/filesystems命令可以查看系统支持哪些文件系统。</p><p>open是系统调用级别的操作，调用VFS_open  -&gt; 底层的open（包括驱动的open，比如字符设备驱动里面的</p><p>file_opreations里面的open等。联想一下）</p><h4 id="软硬链接"><a href="#软硬链接" class="headerlink" title="软硬链接"></a>软硬链接</h4><p>软硬链接区别：   </p><ul><li>1、可以针对目录创建，硬链接不可</li><li>2、软链接是一个新的文件，而硬链接是源文件的一个别名（跟源文件使用相同的结点inode结点）</li><li>3、软链接可以划分区建立，但是硬链接可以</li><li>4、源文件删除后，软链接找不到，但是硬链接没有影响，仅仅是链接数减一</li><li></li></ul><h4 id="动态库-静态库"><a href="#动态库-静态库" class="headerlink" title="动态库/静态库"></a>动态库/静态库</h4><blockquote><pre><code>  动静态库链接：gcc默认链接方式：动态链接 ---- 链接是动态库静态链接需要加 -static 的gcc链接选项 ---- 链接是静态库如何自己生成一个动态库程序的编译过程：预处理--》编译--》汇编--》链接生成一个库其实就是将所有代码打包起来，最终得到一个库文件</code></pre><p>区别：</p><ul><li>使用静态库时将静态库中代码全部拿过来   </li><li>动态库使用时记录地址信息<pre><code>生成动态库：gcc  -- share test.c -o libtest.so生成静态库：ar cr libtest.a test.c编译选项：-fPIC   ：产生位置无关代码</code></pre></li></ul></blockquote><p>如何链接一个可执行程序：<br>gcc main.c -o main -L./  -ltest   </p><ul><li>-L 用于指定库的查找路径   </li><li>-l 用于指定链接库的名称   </li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;学过C语言的都知道，在C语言中IO其实就是文件操作，像fopen，fwrite，fread，fseek，fprintf，fclose等都是
      
    
    </summary>
    
      <category term="Linux" scheme="https://LiuZiQiao.github.io/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>Linux信号</title>
    <link href="https://LiuZiQiao.github.io/2018/11/07/Linux%E4%BF%A1%E5%8F%B7/"/>
    <id>https://LiuZiQiao.github.io/2018/11/07/Linux信号/</id>
    <published>2018-11-07T15:37:54.000Z</published>
    <updated>2018-11-07T15:37:54.680Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><a id="more"></a>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>BitMap算法基本操作</title>
    <link href="https://LiuZiQiao.github.io/2018/11/05/BitMap%E7%AE%97%E6%B3%95%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    <id>https://LiuZiQiao.github.io/2018/11/05/BitMap算法基本操作/</id>
    <published>2018-11-05T14:52:37.000Z</published>
    <updated>2018-11-06T08:57:01.736Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><a id="more"></a><p>上篇我们讲了BitMap是如何对数据进行存储的，没看过的可以看一下<a href="https://LiuZiQiao.github.io/2018/11/03/BitMap算法/">【BitMap算法介绍】</a></p><p>这篇我们来讲一下BitMap这个数据结构的代码实现。</p><h3 id="回顾下数据的存储原理"><a href="#回顾下数据的存储原理" class="headerlink" title="回顾下数据的存储原理"></a>回顾下数据的存储原理</h3><p>一个二进制位对应一个非负数n，如果n存在，则对应的二进制位的值为1，否则为0。</p><p>这个时候，我们的第一个问题：</p><p>我们在使用byte,int,short,long等这些数据类型在存储数据的时候，他们最小的都要占用一个字节的内存，也就是8个bit，也就是说，最小的操作单位是8个bit。根本就没有可以一个一个bit位操作的数据类型啊。</p><p>在Java的bitMaP实现中，它采用的是用一个long数据来进行存储的。一个long占用8个字节，即64bit，所以一个long可以存储64个数。例如 arr 是一个long 类型的数组，则 arr[0]可以存 0 ~ 63，arr[1]可以存64 ~127，以此类推。</p><p>不过，我们就采用byte数组的来存吧。一个byte占用一个字节，即8bit，可以存8个数字。</p><p>当然，你要采用long数组来存也可以。在实现上可以说是一样的。</p><p>例如我们要存储(1,3,5,7,8,10)时，他们的内存如下所示。<br><img src="https://img-blog.csdnimg.cn/20181106164623290.png" alt="1"><br>下面我们就来讲讲如何对一个一个位进行操作的。</p><h3 id="具体操作"><a href="#具体操作" class="headerlink" title="具体操作"></a>具体操作</h3><h4 id="如何向bitmap中添加一个数值"><a href="#如何向bitmap中添加一个数值" class="headerlink" title="如何向bitmap中添加一个数值"></a>如何向bitmap中添加一个数值</h4><p>我们先来说说如何在bitmap中如何添加一个数值的问题，例如我们我们要添加n=14。</p><p>这个其实很简单，我们先找到n在arr数组中的下标index，显然index = 1。然后再找到n在arr[index]中的位置position，显然这里position = 6。</p><p>这里还是可以很容易找出index和position的公式的。即</p><p>index = n / 8 = n &gt;&gt; 3。</p><p>position = n % 8 = n &amp; 0x07。</p><p>接下来我们把1向右移动position个二进制位，然后把所得的结果和arr[index]做“或(or)”操作就可以了。如下图<br><img src="https://img-blog.csdnimg.cn/20181106164653491.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5NDc4MjM3,size_16,color_FFFFFF,t_70" alt="2">    </p><p>这里有个需要注意的地方，在画图的时候，为了方便，我们是把左边的位当作低位，右边的位当作高位来算了。不过在实际的存储中，左边的才是存高位，而右边的存的是低位。所以在我们的代码实现中，我们所说的右移对应代码的左移。</p><h4 id="添加操作"><a href="#添加操作" class="headerlink" title="添加操作"></a>添加操作</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//添加数据的操作</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//用&gt;&gt;的操作是，运算会比较快</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">int</span> index = n &gt;&gt; <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">int</span> position = n &amp; <span class="number">0x07</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//把1右移和做or操作两步一起</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">//即 &lt;&lt; 对应上图的右移，实际上&lt;&lt;是左移符。</span></span><br><span class="line"></span><br><span class="line">   arr[index] |= <span class="number">1</span> &lt;&lt; position;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>知道了add操作，其他的操作差不多类似。</p><p>当然，我们实现的add操作只是简单的实现一下，假如你要严谨地实现的话，还是需要很多异常的判断的。例如判断这个数是否是非负数，判断arr数组是否下标越界，进行容量的扩充等等。有兴趣的可以严谨去实现一下。</p><h4 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h4><p>我们只需要把对应的二进制的1变成0就可以了。</p><p>我们可以把1右移(代码中对应左移)后的结果取反，然后与arr[index]做“与”操作就可以了。代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">int</span> index = n &gt;&gt; <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">int</span> position = n &amp; <span class="number">0x07</span>;</span><br><span class="line"></span><br><span class="line">   arr[index] &amp;= ~(<span class="number">1</span> &lt;&lt; position);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="判断是否存在操作"><a href="#判断是否存在操作" class="headerlink" title="判断是否存在操作"></a>判断是否存在操作</h4><p>我们把1右移之后，把结果和arr[index]做“与”操作，如何结果不为0，则证明存在，否则就不存在。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contain</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">int</span> index = n &gt;&gt; <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">int</span> position = n &amp; <span class="number">0x07</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> (arr[index] &amp; (<span class="number">1</span> &lt;&lt; position)) != <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>三个最基本的操作代码基本实现了。</p><h4 id="全部代码"><a href="#全部代码" class="headerlink" title="全部代码"></a>全部代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BitMap</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">byte</span>[] arr;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//容量，即最多能够存多少个数据</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">int</span> capacity;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">BitMap</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">this</span>.capacity = capacity;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//一个byte可以存8个数据，capacity实际上指的是多少个bit</span></span><br><span class="line"></span><br><span class="line">       arr = <span class="keyword">new</span> <span class="keyword">byte</span>[(capacity / <span class="number">8</span> + <span class="number">1</span>)];</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//添加数据的操作</span></span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//用&gt;&gt;的操作是，运算会比较快</span></span><br><span class="line"></span><br><span class="line">       <span class="keyword">int</span> index = n &gt;&gt; <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">int</span> position = n &amp; <span class="number">0x07</span>;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//把1右移和做or操作两步一起</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">//即 &lt;&lt; 对应上图的右移，实际上&lt;&lt;是左移符。</span></span><br><span class="line"></span><br><span class="line">       arr[index] |= <span class="number">1</span> &lt;&lt; position;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">int</span> index = n &gt;&gt; <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">int</span> position = n &amp; <span class="number">0x07</span>;</span><br><span class="line"></span><br><span class="line">       arr[index] &amp;= ~(<span class="number">1</span> &lt;&lt; position);</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contain</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">int</span> index = n &gt;&gt; <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">int</span> position = n &amp; <span class="number">0x07</span>;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> (arr[index] &amp; (<span class="number">1</span> &lt;&lt; position)) != <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>大家看了以上的代码，有没发现一些问题呢？</p><p>例如我们只在bitmap存储1个数，并且存的数值是2000000000，我们就会在第2000000000个二进制把0改为1。也就是说arr数组的大小至少为2000000000/8+1。可是这时候前面的二进制位并没有存数据，那不是超级超级浪费资源？</p><p>所以说，像我们上面的那种写法可以说是暴力写法，没有经过任何优化，实际上，在Java自带的bitMap中是有很多优化的，并不会像我们上面实现的代码一样那么浪费空间资源。有兴趣的可以研究下我的上一篇中的java写法。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;上篇我们讲了BitMap是如何对数据进行存储的，没看过的可以看一下&lt;a href=&quot;https://LiuZiQiao.github.io
      
    
    </summary>
    
      <category term="算法" scheme="https://LiuZiQiao.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="BitMap" scheme="https://LiuZiQiao.github.io/tags/BitMap/"/>
    
  </entry>
  
  <entry>
    <title>BitMap算法介绍</title>
    <link href="https://LiuZiQiao.github.io/2018/11/03/BitMap%E7%AE%97%E6%B3%95/"/>
    <id>https://LiuZiQiao.github.io/2018/11/03/BitMap算法/</id>
    <published>2018-11-03T15:22:31.000Z</published>
    <updated>2018-11-05T15:38:31.708Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><a id="more"></a><h3 id="问题引出"><a href="#问题引出" class="headerlink" title="问题引出"></a>问题引出</h3><p>我们先来看个简单的问题。</p><p>假如给你20亿个非负数的int型整数，然后再给你一个非负数的int型整数 t ，让你判断t是否存在于这20亿数中，你会怎么做呢？</p><p>有人可能会用一个int数组，然后把20亿个数给存进去，然后再循环遍历一下就可以了。</p><p>想一下，这样的话，时间复杂度是O(n)，所需要的内存空间</p><p>4byte * 20亿，一共需要80亿个字节，</p><p>大概需要8GB的内存空间，显然有些计算机的内存一次是加载不了这么这么多的数据的。</p><h3 id="优化方案"><a href="#优化方案" class="headerlink" title="优化方案"></a>优化方案</h3><h4 id="初步优化"><a href="#初步优化" class="headerlink" title="初步优化"></a>初步优化</h4><p>按照上面的做法，时间复杂度是O(n)，内存是8GB，实际上我们是可以把时间复杂度降低到O(1)的。</p><p>例如我们可以这样来存数据，把一个int非负整数n作为数组下标，如果n存在，则对应的值为1，如果不存在，对应的值为0。例如数组arr[n] = 1，表示n存在，arr[n] = 0表示n不存在。</p><p>那么，我们就可以把20亿个数作为下标来存，之后直接判断arr[t]的值，如果arr[t] = 1，则代表存在，如果arr[t] = 0，则代表不存在。这样，我们就可以把时间复杂度降低到O(1)。不过空间复杂度我们并没有降低。还稍微大了点。</p><p>由于int非负整数一共有 2^31 个，所以数组的大小需要 2^31 这么大。</p><p>这里可能有人说也可以用HashSet来存啊，时间复杂度也是近似O(1)。不过这里需要说明的是，HashSet里面存的必须是对象，也就是说需要把int包装成Integer，显然一个对象的话是更花销内存的，需要对象头啊什么的…..</p><h4 id="再次优化"><a href="#再次优化" class="headerlink" title="再次优化"></a>再次优化</h4><p>大家想一个问题，对于一个数，实际上我们只需要两种状态，就是这个数存在和不存在这两种可能。上面我们用1代表存在，用0代表不存在。</p><p>也就是说，我们是可以不用int型的数组来存储的，一个int型占用4个字节，即32个二进制位，一共可以表示40亿多个状态。用int型的来存两个状态，多浪费。</p><p>所以我们可以考虑用boolean型的来存的，boolean貌似就占用一个字节(java中的boolena貌似是占用一个字节)。而一个boolean有true和false两种状态，所以也是成立的。这样子的话占用的内存就是2GB的内存了。</p><p>这样，就可以降低到之前的四分之1内存了。</p><h4 id="最终优化：bitmap"><a href="#最终优化：bitmap" class="headerlink" title="最终优化：bitmap"></a>最终优化：bitmap</h4><p>大家再想一个问题，虽然boolean是表示两种状态，但是boolean实际上占用了8bit啊，按道理8bit是可以表示128种状态的。而被我们拿来表示两个状态，是否也有点浪费了呢？</p><p>我们都知道，一个二进制位，有0和1两种状态，所以说，其实我们是可以用一个二进制位来代表一个int型的数是否存在的。例如对于1，3，5，7这四个数，如果存在的话，则可以这样表示：<br><img src="https://img-blog.csdnimg.cn/20181103234743957.png" alt="1"></p><p>1代表这个数存在，0代表不存在。例如表中01010101代表1，3，5，7存在，0，2，4，6不存在。</p><p>那如果8，10，14也存在怎么存呢？如图，8，10，14我们可以存在第二个字节里</p><p><img src="https://img-blog.csdnimg.cn/20181103234803139.png" alt="2"></p><p>以此类推。这样子，我们又可以把内存降低到之前的8分之一了。</p><p>这种采用一个二进制位来存储数据的方法，我们也叫做bitmap算法。</p><p>可能有人会问，假如我要添加一个数n，我知道它要存在第n个位那里，把第n个二进制改为1，可是我要怎么操作呢？</p><p><strong>==这个对于bitmap算法是如何存储的，如何进行增删操作的，我会在之后的文章里讲，这篇就大概介绍下bitmap算法。==</strong></p><p>Java中有自带的bitmap实现，今天我们就用Java中自带的bitmap来做道题练练手。我们换道类似题目吧，不知道你一眼是否就能想到用bitmap算法来做。</p><p><strong>题目描述：</strong></p><p>现在有五十亿个int类型的正整数，要从中找出重复的数并返回。</p><p>判断50亿个数有哪些是重复和刚才上面那个判断是否存在，其实是一样的。我们采用bitmap算法来做。不过这里50亿个数，别人肯定是以文件流的形式给你的。这样我们为了方便，我们就假设这些数是以存在int型数组的形式给我们的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//为了方便，假设数据是以数组的形式给我们的</span></span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Set&lt;Integer&gt; <span class="title">test</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//用来把重复的数返回，存在Set里，这样避免返回重复的数。</span></span><br><span class="line"></span><br><span class="line">       Set&lt;Integer&gt; output = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"></span><br><span class="line">       BitSet bitSet = <span class="keyword">new</span> BitSet(Integer.MAX_VALUE);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">while</span> (i &lt; arr.length) &#123;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">int</span> value = arr[i];</span><br><span class="line"></span><br><span class="line">           <span class="comment">//判断该数是否存在bitSet里</span></span><br><span class="line"></span><br><span class="line">           <span class="keyword">if</span> (bitSet.get(value)) &#123;</span><br><span class="line"></span><br><span class="line">               output.add(value);</span><br><span class="line"></span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">               bitSet.set(value, <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           i++;</span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> output;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//测试</span></span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">int</span>[] t = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line"></span><br><span class="line">       Set&lt;Integer&gt; t2 = test(t);</span><br><span class="line"></span><br><span class="line">       System.out.println(t2);</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打印结果:</p><p>[3, 4]</p><p>当然，bitmap算法的应用不仅仅是节省内存，它还有很多其他的优点。之后有机会就拿一些其他的应用来写篇文章。</p><p>本次讲解到此结束。如果喜欢，可以分享给更多的小伙伴哦。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;问题引出&quot;&gt;&lt;a href=&quot;#问题引出&quot; class=&quot;headerlink&quot; title=&quot;问题引出&quot;&gt;&lt;/a&gt;问题引出&lt;/
      
    
    </summary>
    
      <category term="算法" scheme="https://LiuZiQiao.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="BitMap" scheme="https://LiuZiQiao.github.io/tags/BitMap/"/>
    
  </entry>
  
  <entry>
    <title>Linux编程之进程(二)</title>
    <link href="https://LiuZiQiao.github.io/2018/10/30/Linux%E7%BC%96%E7%A8%8B%E4%B9%8B%E8%BF%9B%E7%A8%8B%E4%BA%8C/"/>
    <id>https://LiuZiQiao.github.io/2018/10/30/Linux编程之进程二/</id>
    <published>2018-10-30T08:33:09.000Z</published>
    <updated>2018-10-30T09:22:48.072Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><a id="more"></a><p>在上一篇关于进程的博客中阐述了进程的概念，总结了进程的状态以及进程如何描述，这篇博客就总结下进程的创建、等待、终止以及进程等待的作用。</p><h3 id="进程的创建"><a href="#进程的创建" class="headerlink" title="进程的创建"></a>进程的创建</h3><p>上一篇博客中讲了关于fork函数的使用，其实fork函数就是进程创建的一个重要手段，下面演示进程的创建<br>直接上代码<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// create.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//pid_t fork(void);</span></span><br><span class="line">    <span class="comment">//创建一个新进程，通过复制调用进程</span></span><br><span class="line">    <span class="keyword">pid_t</span> pid = fork();</span><br><span class="line">    <span class="keyword">if</span> (pid &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"fork error\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (pid == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"this is chilld %d!!\n"</span>, getpid());</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"this is parent %d----child:%d\n"</span>, getpid(), pid);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"pid:%d\n"</span>, pid);</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="进程的等待"><a href="#进程的等待" class="headerlink" title="进程的等待"></a>进程的等待</h3><p>Q:什么叫进程的等待？进程为什么要等待？进程等待的方式？<br>A:(1)一个进程退出之后因为要保存自己退出的原因，因此不会释放所有的资源，它等待父进程查看它的退出原因，然后释放所有资源。<br>假如父进程根本不管，那么这个子进程就成了僵尸进程，造成资源泄漏<br>(2)为了防止僵尸进程的出现，父进程应该等待子进程退出<br>(3)第一种方式：==wait==函数，目的是等待任意一个子进程的退出，因此wait是一个阻塞型函数，如果没有子进程退出，将一直等待下去，直到子进程退出<br>第二种方式：waitpid 它是一个阻塞/非阻塞可选的函数<br>函数原型：==waitpid(pid_t pid, int *status, int options);==</p><ul><li>pid:    -1:等待任意子进程 &gt;0 等待指定的子进程</li><li>status: 获取退出状态码</li><li>options：0：阻塞    WNOHANG：非阻塞</li><li>返回值：-1:出错  ==0：没有子进程退出 &gt;0：退出的子进程pid<br>下面演示进程等待<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//wait.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">pid_t</span> pid = fork();</span><br><span class="line">    <span class="keyword">if</span> (pid &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (pid == <span class="number">0</span>) &#123;</span><br><span class="line">        sleep(<span class="number">3</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">99</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">pid_t</span> id = <span class="number">-1</span>;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    if ((id = wait(NULL)) &lt; 0) &#123;</span></span><br><span class="line"><span class="comment">        perror("wait error");</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="comment">//第二种方式</span></span><br><span class="line">    <span class="keyword">int</span> status = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>((id = waitpid(pid, &amp;status, WNOHANG)) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">//回过头再判断一下有没有子进程退出</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    if ((status &amp; 0x7f) == 0) &#123;</span></span><br><span class="line"><span class="comment">        printf("child exit status:[%d]\n", (status &gt;&gt; 8)&amp;0xff);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">if</span> (WIFEXITED(status)) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"child exit status:[%d]\n"</span>, WEXITSTATUS(status));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"child :%d eixt %d\n"</span>, id, pid);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="进程的终止"><a href="#进程的终止" class="headerlink" title="进程的终止"></a>进程的终止</h3><p>进程退出的场景：</p><ul><li>运行完毕，结果正确</li><li>运行完毕，结果不正确</li><li>代码异常终止<br>常见退出方法<br>正常退出：<br>1）main函数中return<br>2）exit是温和退出，退出前温和的释放资源，刷新缓冲区<br>3）_exit是暴力退出，直接释放资源，不会刷新缓冲区<br>上面的代码中我们看到exit这样的函数，接下来就说说exit函数和_exit<br><code>_exit</code>函数：void _exit(int status);<br>参数：status定义了进程的终止状态，父进程通过wait来获取该值<br><code>exit</code>函数：void exit(int status)；<br>该函数在调用exit之前还做了一些事：<br>1.执行用户通过atexit或on_exit定义的清理函数<br>2.关闭所有打开的流，所有的缓存数据均被写入<br>3.调用_exit<br>总结来说：exit会释放资源退出，_exit立即退出。</li></ul><p>还有一种我们常用的return n 退出，它就和exit(n)等同，因为调用main函数的运行时函数会将main的返回值当做exit的参数</p><h3 id="进程程序替换"><a href="#进程程序替换" class="headerlink" title="进程程序替换"></a>进程程序替换</h3><p>程序替换的是代码段所指向的物理内存区域，相当于让虚拟地址空间中的代码地址指向了物理内存的另一端代码位置，这样的话虚拟地址空间中原先的数据区域以及堆栈都会重新初始化，因为现在的代码运行的根本不是复制的那些数据<br>但是这个进程pcb还是原来的pcb<br>execl函数族：   </p><table><thead><tr><th>c</th><th>p</th><th>e</th></tr></thead><tbody><tr><td>execl</td><td>execlp</td><td>execle </td></tr><tr><td>execv</td><td>execvp</td><td>execve </td></tr></tbody></table><p>l和v的区别：l是参数平铺一个一个通过exec函数参数赋予，v参数直接使用字符串指针数组</p><p>execl/execv 需要我们给出要替换的程序的全路径名<br>execlp/execvp  只需要给出替换的程序的名称就行<br>execle     重新 自己组织环境变量，不使用现有的<br>下面演示一个exec函数的使用<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//exec.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">pid_t</span> pid = fork();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (pid &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        perror(<span class="string">"fork error"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (pid == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"-----------\n"</span>);</span><br><span class="line">        <span class="comment">//int execl(const char *path, const char *arg, ...);</span></span><br><span class="line">        <span class="comment">//execl("/bin/ls", "ls", "-l", "-a", NULL);</span></span><br><span class="line">        <span class="comment">//int execlp(const char *file, const char *arg, ...);</span></span><br><span class="line">        <span class="comment">//execlp("/home/san/workspace/36/pctrl/test" "test", NULL);</span></span><br><span class="line">        <span class="comment">//int execle(const char *path, const char *arg, ..., </span></span><br><span class="line">        <span class="comment">//  char * const envp[]);</span></span><br><span class="line">        <span class="comment">//  添加参数的时候记住要有一个NULL表示参数的结尾</span></span><br><span class="line">        <span class="comment">//  NULL之后还有一个参数是用于设置环境变量的</span></span><br><span class="line">        <span class="comment">//      并且这个函数会清空所有的环境变量，因为这个接口就是</span></span><br><span class="line">        <span class="comment">//      让我们用户自己来设置环境变量的</span></span><br><span class="line">        <span class="keyword">char</span> *ptr = <span class="string">"PATH=hehe---he----hehe!!"</span>;</span><br><span class="line">        <span class="keyword">char</span> *env[<span class="number">3</span>] = &#123;<span class="literal">NULL</span>&#125;;</span><br><span class="line">        env[<span class="number">0</span>] = ptr;</span><br><span class="line">        execle(<span class="string">"/code/day10_30/test"</span>, <span class="string">"test"</span>, <span class="literal">NULL</span>, </span><br><span class="line">                env);</span><br><span class="line">        perror(<span class="string">"execle error"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//这句代码实际上是根本不会执行的，因为代码段已经被替换了</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"-----------\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"hehe!!!"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果想了解exec函数原型可以自行在Linux下man</p><h3 id="Myshell实现"><a href="#Myshell实现" class="headerlink" title="Myshell实现"></a>Myshell实现</h3><p>学了进程的创建，等待，终止，我们可以自行做一个简易的shell工具，它的功能就是解释我们输入的命令 ，初步看起了像shell<br>实现步骤：<br>1.键盘接收输入信息<br>2.创建子进程<br>3.程序替换<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//myshell.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"minishell: "</span>);</span><br><span class="line">        fflush(<span class="built_in">stdout</span>);</span><br><span class="line">        <span class="keyword">char</span> cmd[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">scanf</span>(<span class="string">"%[^\n]%*c"</span>, cmd) != <span class="number">1</span>) &#123;</span><br><span class="line">            getchar();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//将获取到的命令解析一下，然后创建子进程进行程序替换</span></span><br><span class="line">        <span class="keyword">char</span> *ptr = cmd;</span><br><span class="line">        <span class="keyword">char</span> *argv[<span class="number">32</span>] = &#123;<span class="literal">NULL</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> argc = <span class="number">0</span>;</span><br><span class="line">        argv[argc++] = ptr;</span><br><span class="line">        <span class="keyword">while</span>(*ptr != <span class="string">'\0'</span>) &#123;</span><br><span class="line">            <span class="comment">//ls       -l</span></span><br><span class="line">            <span class="comment">//int isspace(int c);</span></span><br><span class="line">            <span class="comment">//用于判断一个字符是否是:\t \n \r 空格 </span></span><br><span class="line">            <span class="comment">//解析一个字符串时候这里就是对空格的判断</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">isspace</span>(*ptr)) &#123;</span><br><span class="line">                <span class="keyword">while</span>(<span class="built_in">isspace</span>(*ptr) &amp;&amp; *ptr != <span class="string">'\0'</span>) &#123;</span><br><span class="line">                    *ptr++ = <span class="string">'\0'</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                argv[argc++] = ptr;</span><br><span class="line">            &#125;</span><br><span class="line">            ptr++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>  (fork() == <span class="number">0</span>) &#123;</span><br><span class="line">            execvp(argv[<span class="number">0</span>], argv);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//需要等待的原因：</span></span><br><span class="line">        <span class="comment">//1. 避免产生僵尸子进程</span></span><br><span class="line">        <span class="comment">//2. 是为了等待子进程运行完毕，让程序逻辑更加完善</span></span><br><span class="line">        wait(<span class="literal">NULL</span>);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上面的程序中可能你会对下面这个解释有疑问，因此在此做出解释(正则表达式)：</p><ul><li>^\n：scanf本身是遇到空格就要获取一次，这样的话就无法获取到一个完整的命令，因此‘%[^\n]’表示的是获取数据直到遇到\n为止   </li><li>%*c：将缓冲区中的字符都取出来，但是不要它，直接丢掉目的是为了将最后的\n从缓冲区取出来，防止陷入死循环</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;在上一篇关于进程的博客中阐述了进程的概念，总结了进程的状态以及进程如何描述，这篇博客就总结下进程的创建、等待、终止以及进程等待的作用。&lt;/
      
    
    </summary>
    
      <category term="Linux" scheme="https://LiuZiQiao.github.io/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>实训日志</title>
    <link href="https://LiuZiQiao.github.io/2018/10/28/%E5%AE%9E%E8%AE%AD%E6%97%A5%E5%BF%97/"/>
    <id>https://LiuZiQiao.github.io/2018/10/28/实训日志/</id>
    <published>2018-10-28T15:27:12.000Z</published>
    <updated>2018-10-28T15:32:20.319Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><a id="more"></a><p>电子实训终于结束了。</p><p>体测累死了啊啊啊啊<del>~</del></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;电子实训终于结束了。&lt;/p&gt;
&lt;p&gt;体测累死了啊啊啊啊&lt;del&gt;~&lt;/del&gt;&lt;/p&gt;

      
    
    </summary>
    
      <category term="随笔" scheme="https://LiuZiQiao.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
  <entry>
    <title>test</title>
    <link href="https://LiuZiQiao.github.io/2018/10/23/%E6%93%8D%E4%BD%9C%E7%AC%A6%E9%87%8D%E8%BD%BD%E4%B8%8Econst/"/>
    <id>https://LiuZiQiao.github.io/2018/10/23/操作符重载与const/</id>
    <published>2018-10-23T04:47:47.000Z</published>
    <updated>2018-10-23T04:47:47.106Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><a id="more"></a>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>github+hexo搭建博客教程</title>
    <link href="https://LiuZiQiao.github.io/2018/10/19/github-hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/"/>
    <id>https://LiuZiQiao.github.io/2018/10/19/github-hexo搭建博客教程/</id>
    <published>2018-10-19T15:21:20.000Z</published>
    <updated>2018-10-24T15:46:52.831Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><a id="more"></a><h3 id="Github-Pages介绍"><a href="#Github-Pages介绍" class="headerlink" title="Github Pages介绍"></a>Github Pages介绍</h3><p>本来用于介绍托管在Github上的项目，由于它的空间免费稳定，因此适合用来搭建博客。</p><p>每个帐号只能有一个仓库来存放个人主页，且仓库的名字必须是username/username.github.io。你可以通过<a href="http://username.github.io来访问你的个人主页" target="_blank" rel="noopener">http://username.github.io来访问你的个人主页</a></p><p>个人主页的网站内容是在master分支下</p><h3 id="Hexo介绍"><a href="#Hexo介绍" class="headerlink" title="Hexo介绍"></a>Hexo介绍</h3><p>Hexo是一个快速、简洁高效的博客框架，具有如下特点：   </p><ul><li>生成静态网页</li><li>支持Markdown</li><li>一键部署博客到Github Pages</li><li>丰富插件</li></ul><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><ul><li>下载git<br>  <a href="https://git-scm.com/download/win" target="_blank" rel="noopener">https://git-scm.com/download/win</a></li><li>安装git</li><li>下载node.js<br>  <a href="http://nodejs.org/download/" target="_blank" rel="noopener">http://nodejs.org/download/</a></li><li>安装node.js</li></ul><h3 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h3><p>在任意位置右键点击Git Bash Here</p><p>使用npm安装hexo，可以先切换npm源，加速安装过程</p><p>npm config set registry <a href="https://registry.npm.taobao.org" target="_blank" rel="noopener">https://registry.npm.taobao.org</a><br>npm install -g hexo</p><p>【注】若安装不成功，可以使用npm install hexo –save再次安装</p><p>出现以下图示表示安装完成。</p><p>【注】若提示This package is no longer maintained，耐心等待安装即可。</p><h3 id="配置Hexo"><a href="#配置Hexo" class="headerlink" title="配置Hexo"></a>配置Hexo</h3><h4 id="创建hexo文件夹"><a href="#创建hexo文件夹" class="headerlink" title="创建hexo文件夹"></a>创建hexo文件夹</h4><p>在某一文件夹下如F:\hexo\blog，右键Git Bash Here，使用以下命令创建建立网站需要的文件   </p><blockquote><p>hexo init<br><img src="http://p15qizl76.bkt.clouddn.com/blog/171220/Fg6728KdiK.jpg?imageslim" alt="1"></p><h4 id="安装依赖包"><a href="#安装依赖包" class="headerlink" title="安装依赖包"></a>安装依赖包</h4><p>npm install<br><img src="http://p15qizl76.bkt.clouddn.com/blog/171220/B7lkme9mkb.jpg?imageslim" alt="2"></p><h4 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h4><pre><code>hexo generate  #生成静态文件，会在当前目录下生成一个新的名为public的文件夹</code></pre></blockquote><h4 id="启动Hexo"><a href="#启动Hexo" class="headerlink" title="启动Hexo"></a>启动Hexo</h4><pre><code>hexo server -p 5000 #使用hexo server 默认端口4000，会无法访问localhost:4000，因此改为5000端口</code></pre><h4 id="常用hexo命令"><a href="#常用hexo命令" class="headerlink" title="常用hexo命令"></a>常用hexo命令</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">hexo help #查看帮助</span><br><span class="line">hexo -v #查看本地环境</span><br><span class="line">hexo init #初始化一个目录</span><br><span class="line">hexo <span class="keyword">new</span> <span class="string">"postName"</span> #新建文章</span><br><span class="line">hexo <span class="keyword">new</span> page <span class="string">"pageName"</span> #新建页面</span><br><span class="line">hexo gernerate #生成网页，可以在<span class="keyword">public</span>目录查看整个网站的文件</span><br><span class="line">hexo server #本地预览 Ctrl+C关闭</span><br><span class="line">hexo deploy #或hexo d 部署到远端如github、heroku</span><br><span class="line">hexo clean #清除缓存 建议每次执行命令前先清理缓存，每次部署前先删除 .deploy文件夹</span><br><span class="line"></span><br><span class="line">#常用缩写</span><br><span class="line">hexo n  #hexo <span class="keyword">new</span></span><br><span class="line">hexo g  #hexo generate</span><br><span class="line">hexo s  #hexo server</span><br><span class="line">hexo d  #hexo deploy</span><br><span class="line"></span><br><span class="line">#常用组合</span><br><span class="line">hexo d -g #生成部署</span><br><span class="line">hexo s -g #生成预览</span><br></pre></td></tr></table></figure><h3 id="Github-Pages"><a href="#Github-Pages" class="headerlink" title="Github Pages"></a>Github Pages</h3><h4 id="注册github账号"><a href="#注册github账号" class="headerlink" title="注册github账号"></a>注册github账号</h4><pre><code>地址: https://github.com/</code></pre><p>输入账号、邮箱、密码,然后点击注册按钮.–&gt;之后验证邮箱</p><h4 id="创建页面仓库"><a href="#创建页面仓库" class="headerlink" title="创建页面仓库"></a>创建页面仓库</h4><p>创建一个仓库，需要和帐号对应，格式yourname.github.io，创建仓库<br><img src="http://upload-images.jianshu.io/upload_images/695365-65754452ea96e1cf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700" alt="3"></p><p><img src="http://upload-images.jianshu.io/upload_images/695365-e4fb878d83a8a2e8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700" alt="4"></p><h4 id="关联本地与github"><a href="#关联本地与github" class="headerlink" title="关联本地与github"></a>关联本地与github</h4><h5 id="生成SSH密钥"><a href="#生成SSH密钥" class="headerlink" title="生成SSH密钥"></a>生成SSH密钥</h5><blockquote><p>任意地方右键Git Bash Here,执行以下命令</p><p>ssh-keygen -t rsa -C “你的邮箱地址”</p></blockquote><p>出现Enter file in which to save the key (…..)直接回车选择默认位置</p><p> 出现Enter passphrase(empty for no passphrase)直接两次回车不设密码以及确认<br><img src="https://img-blog.csdn.net/2018102423354921?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5NDc4MjM3/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="5"></p><h5 id="在Github上添加SSH密钥"><a href="#在Github上添加SSH密钥" class="headerlink" title="在Github上添加SSH密钥"></a>在Github上添加SSH密钥</h5><p>打开id_rsa.pub，复制内容。</p><p>进入你的github页面，右上角找到setting，点击进去，找到ssh。</p><p>点击New SSH key<br><img src="http://p15qizl76.bkt.clouddn.com/blog/171220/8HbiiJFCgB.jpg?imageslim" alt="6"><br>填写后点击Add SSH key<br><img src="http://p15qizl76.bkt.clouddn.com/blog/171220/CgdkDEDim9.jpg?imageslim" alt="7"></p><h3 id="上传部署"><a href="#上传部署" class="headerlink" title="上传部署"></a>上传部署</h3><h4 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h4><ul><li>deploy #需要部署的文件</li><li>node_modules #Hexo插件</li><li>public #生成的静态网页文件</li><li>scaffolds #模板</li><li>source #博客正文和其他源文件</li><li>drafs #草稿</li><li>posts#文章</li><li>themes #主题</li><li>config.yml #配置文件</li></ul><p><img src="http://p15qizl76.bkt.clouddn.com/blog/171220/dLaLgf5B36.jpg?imageslim" alt="8"></p><h4 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h4><p>原理</p><ul><li>上述步骤中在Github上创建的那个仓库username.github.io，可以通过该链接访问</li><li>Hexo -g 会生成一个静态网站，第一次会生成一个public目录，这个静态文件可以直接访问</li><li>需要将Hexo生成的静态网站，提交(git commit)到github上</li></ul><p>过程</p><ul><li><p>需要在_config.yml中修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:    </span><br><span class="line">  type: git   //注意：冒号后面有英文空格</span><br><span class="line">  repository: http://github.com/username/username.github.io.git</span><br><span class="line"> branch: master</span><br></pre></td></tr></table></figure><p>安装依赖包</p></li></ul><blockquote><p>npm install hexo-deployer-git –save</p></blockquote><p>配置好之后执行</p><blockquote><p>hexo genearte<br>hexo deploy</p></blockquote><p>【注】以上命令执行的环境必须在执行hexo init创建的文件夹下执行</p><p>执行完以上命令，会出现页面输入你的github用户名和密码，验证后就可以上传成功</p><p>访问 username.github.io，成功打开页面即部署成功</p><h4 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h4><blockquote><p>hexo new “postname”</p></blockquote><p>该命令会自动在hexo/source/_post文件夹下创建一个名为postname的markdown文件，会自动在文件开头添加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 你的题目</span><br><span class="line">tags: 你的标签</span><br><span class="line">category: 你的分类</span><br><span class="line">---</span><br></pre></td></tr></table></figure></p><p>填写tags,category，新建标签页面和分类页面后即可以显示相应的标签和分类   </p><h5 id="新建标签页面"><a href="#新建标签页面" class="headerlink" title="新建标签页面"></a>新建标签页面</h5><blockquote><p>hexo new page tags</p></blockquote><p>该命令会自动在hexo/source文件夹下创建tags文件夹并在该文件夹下创建index.md文件。</p><p>修改index.md文件，添加以下两项</p><blockquote><p>layout: tags<br>comments: false</p></blockquote><h5 id="新建分类页面"><a href="#新建分类页面" class="headerlink" title="新建分类页面"></a>新建分类页面</h5><blockquote><p>hexo new page categories</p></blockquote><p>该命令会自动在hexo/source文件夹下创建categories文件夹并在该文件夹下创建index.md文件</p><p>修改index.md文件，添加以下两项：</p><blockquote><p>layout: categories<br>comments: false</p></blockquote><p>最后我们hexo g -d  一把，打开自己的页面查看</p><p>以下是博主的博客链接 欢迎访问 <a href="https://liuziqiao.github.io">https://liuziqiao.github.io</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;Github-Pages介绍&quot;&gt;&lt;a href=&quot;#Github-Pages介绍&quot; class=&quot;headerlink&quot; tit
      
    
    </summary>
    
      <category term="Git" scheme="https://LiuZiQiao.github.io/categories/Git/"/>
    
    
  </entry>
  
  <entry>
    <title>Linux内核初窥探-进程</title>
    <link href="https://LiuZiQiao.github.io/2018/10/16/Linux%E5%86%85%E6%A0%B8%E5%88%9D%E7%AA%A5%E6%8E%A2%E8%BF%9B%E7%A8%8B/"/>
    <id>https://LiuZiQiao.github.io/2018/10/16/Linux内核初窥探进程/</id>
    <published>2018-10-16T15:31:42.000Z</published>
    <updated>2018-10-21T07:31:32.809Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><a id="more"></a><h3 id="Linux下多任务介绍"><a href="#Linux下多任务介绍" class="headerlink" title="Linux下多任务介绍"></a>Linux下多任务介绍</h3><p>首先，简单介绍下多任务系统，任务，进程，线程分别是什么？之间的区别是什么？从宏观角度理解后再针对每一个仔细探究   </p><ul><li><p>什么叫多任务系统：多任务系统指可以同一时间内运行多个应用程序，每个应用程序被称作一个任务。</p></li><li><p>任务定义:任务是一个逻辑概念,指由一个软件完成的任务，或者是一系列共同达到某一目的的操作。</p></li><li><p>进程定义:进程是指一个具有独立功能的程序在某个数据集上的一次动态执行过程，它是系统进行资源分配和调度的最小单元。</p></li><li><p>线程定义:线程是进程内独立的一条运行路线，是处理器调度的最小单元，也可以成为轻量级进程。</p><p> 看了定义，还是不太理解，那就通俗的说一下它们的区别吧。<br> ①通常一个任务是一个程序的一次执行，一个任务包含一个或多个完成独立功能的子任务，这个独立的子任务就是进程或线程。<br> ②一个进程可以拥有多个线程，每个线程必须有一个父进程。</p></li></ul><h3 id="任务"><a href="#任务" class="headerlink" title="任务"></a>任务</h3><p>任务是一个逻辑概念，指有一个软件完成的任务，或者由一系列共同达到某一目的的操作。通常一个任务是一个程序的一次执行，一个任务包含一个或多个完成独立功能的子任务，这个独立的子任务就是一个进程或线程。任务、进程、线程之间的关系如图   </p><p><img src="https://img-blog.csdn.net/20181019235344883?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5NDc4MjM3/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="1"></p><h3 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h3><h4 id="进程的基本概念"><a href="#进程的基本概念" class="headerlink" title="进程的基本概念"></a>进程的基本概念</h4><p>进程是指一个具有独立功能的程序在某个数据集上的一次动态执行的过程，是系统进程资源分配和调度的基本单元。一次任务的运行可以并发激活多个进程，这些进程相互合作完成该任务的一个最终目标。<br>操作系统对进程的描述：PCB（进程控制块）Linux下的进程描述——task_struct     </p><p>进程具有并发性、动态性、交互性、独立性、异步性等主要特性   </p><p>进程和程序之间的区别：程序是一段代码，是一些保存在存储器上的指令有序集合，没有执行的概念；而进程是一个动态的概念，是程序执行的过程，包括动态创建、调度、消亡的整个过程，它是程序执行和资源管理的最小单位。</p><h4 id="Linux下的进程结构"><a href="#Linux下的进程结构" class="headerlink" title="Linux下的进程结构"></a>Linux下的进程结构</h4><p>  进程不但包括程序指令和数据，还包括程序计数器和处理器的所有寄存器及存储临时数据的进程堆栈，因此，正在执行的进程包括处理器当前的一切活动   </p><p>  内核将所有进程存放在双向循环链表（进程链表）中，其中链表的头是init_task描述符。链表的每一项都是类型为 task_struct，称为进程描述符的结构，该结构包含了一个进程相关的所有信息，定义在<include linux="" sched.h="">文件中。task_struct内核结构比较大，它能完整的描述一个进程，如进程的状态、进程的基本信息、进程标识符、内存相关信息、父进程相关信息、与进程相关的终端信息、当前工作目录、打开的文件信息、所接收的信号信息等。</include></p><p>task_struct结构体中最重要的两个域：state（进程状态）和pid（进程标识符），下面就详细说说这两个</p><h4 id="进程标识符"><a href="#进程标识符" class="headerlink" title="进程标识符"></a>进程标识符</h4><p>Linux内核通过唯一的进程标识符 PID 来标识每个进程(就和文件描述符一样)。PID存放在进程描述符的 pid 字段中，新创建的 PID 通常是前一个进程的 PID 加1，不过PID的值有上限（最大值=PID_MAX_DEFAULT-1，通常为32767），读者可以查看/proc/sys/kernel/pid_max 来确定该系统的进程数上限。</p><p>   当系统启动后，内核通常作为某一个进程的代表。一个指向task_struct的宏current用来记录正在运行的进程。current经常作为进程描述符结构指针的形式出现在内核代码中，例如，current-&gt;pid 表示处理器正在执行的进程的PID。当系统需要查看所有的进程时，则调用for_each_process()宏，这将比系统搜索数组的速度要快的多。</p><h4 id="查看进程"><a href="#查看进程" class="headerlink" title="查看进程"></a>查看进程</h4><p>进程的信息可以通过/proc系统文件夹查看   </p><ul><li>如：要获取PID为1 的进程，我们需要查看 /proc/1这个文件夹</li><li><p>大多数进程信息同样可以使用top和ps这些用户级工具来获取</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>通过系统调用获取进程标识符<br><strong>在Linux中获得当前进程号的（PID）和父进程号（PPID）的系统调用函数分别为 getpid() 和 getppid()。</strong>   </p></li></ul><p>下面演示在Linux中获取进程pid<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//getpid获取当前进程ID</span></span><br><span class="line"><span class="comment">//getppid获取父进程ID</span></span><br><span class="line"><span class="comment">//pid_t是C语言中用户自定义类型</span></span><br><span class="line"><span class="comment">//在sys/types.h中定义</span></span><br><span class="line"><span class="comment">//进程标识符演示</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span>  <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"pid:%d\n"</span>,getpid());</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"ppid:%d"</span>,getppid());</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="进程状态"><a href="#进程状态" class="headerlink" title="进程状态"></a>进程状态</h4><p>  Linux中的进程有以下几种状态:</p><p>   ● 运行状态（TASK_RUNNING）:进程当前正在运行，或者正在运行队列中等待调度。</p><p>   ● 可中断的阻塞状态（TASK_INTERRUPTIBLE）：进程处于阻塞(睡眠)状态，正在等待某些事件发生或能够占用某些资源。处在这种状态下的进程可以被信号中断。接收到信号或被显式的唤醒呼叫（如调用 wake_up 系列宏:wake_up、wake_up_interruptible等）唤醒之后，进程将转变为 TASK_RUNNING 状态。</p><p>   ● 不可中断的阻塞状态（TASK_UNINTERRUPTIBLE）:此进程状态类似于可中断的阻塞状态（TASK_INTERRUPTIBLE），只是它不会处理信号，把信号传递到这种状态下的进程不能改变它的状态。在一些特定的情况下（进程必须等待，直到某些不能被中断的事件发生），这种状态是很有用的。只有在它所等待的事件发生时，进程才被显示的唤醒呼叫唤醒。</p><p>   ● 可终止的阻塞状态（TASK_KILLABLE）:该状态的运行机制类似于TASK_UNINTERRUPTIBLE，只不过处在该状态下的进程可以响应致命信号。它可以替代有效但可能无法终止的不可中断的阻塞状态（TASK_UNINTERRUPTIBLE）,以及易于唤醒但安全性欠佳的可中断的阻塞状态TASK_INTERRUPTIBLE）。</p><p>   ● 暂停状态（TASK_STOPPED）:进程的执行被暂停，当进程收到 SIGSTOP、SIGSTP、SIGTTIN、SIGTTOU等信号时，就会进入暂停状态。</p><p>   ● 跟踪状态（TASK_TRACED）:进程的执行被调试器暂停。当一个进程被另一个监控时（如调试器使用ptrace()系统调用监控测试程序），任何信号都可以把这个进程置于跟踪状态。</p><p>   ● 僵尸状态（EXIT_ZOMBIE）:子进程先于父进程退出，它要保留退出原因在pcb中，因此退出后不会自动释放所有资源，子进程退出后操作系统通知父进程说子进程退出了，需要去获取原因，然后释放子进程资源。假如父进程不管子进程的退出状态，那么这个子进程将进入僵死状态，成为僵尸进程。</p><p>   ● 僵尸撤销状态（EXIT_DEAD）:这是最终状态，父进程调用 wait 函数族“收尸”后，进程彻底由系统删除。</p><h4 id="进程的创建、执行、终止"><a href="#进程的创建、执行、终止" class="headerlink" title="进程的创建、执行、终止"></a>进程的创建、执行、终止</h4><h5 id="fork函数认识"><a href="#fork函数认识" class="headerlink" title="fork函数认识"></a>fork函数认识</h5><ul><li>运行man fork</li><li>fork 有两个返回值,若直线成功，在父进程中返回子进程的pid，在子进程中返回0</li><li><p>父子进程代码共享，数据各自开辟空间</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/typees&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret = fork();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"hello proc:%d,ret:%d\n"</span>,getpid(),ret);</span><br><span class="line">    sleep(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>fork 之后通常要用if分流</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret = fork();</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">"fork"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(ret == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"i am child:%d,ret:%d\n"</span>,getpid(),ret);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"i am father :%d,ret:%d\n"</span>,getpid(),ret);</span><br><span class="line">    &#125;</span><br><span class="line">    sleep(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="僵尸进程"><a href="#僵尸进程" class="headerlink" title="僵尸进程"></a>僵尸进程</h5><p>僵尸进程的危害：资源泄漏<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//zombie.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pid = fork();</span><br><span class="line">    <span class="keyword">if</span>(pid &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">"fork error"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;    </span><br><span class="line">    &#125;<span class="keyword">else</span> ifpid == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"this is child\n"</span>);    </span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"this is parent\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h5 id="孤儿进程"><a href="#孤儿进程" class="headerlink" title="孤儿进程"></a>孤儿进程</h5><p>父进程先于子进程退出，子进程将成为孤儿进程,当子进程成为孤儿进程时，Init进程将会回收，也就是说，父进程将变成init进程，init将负责释放资源<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//orphan.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pid = fork();</span><br><span class="line">    <span class="keyword">if</span>(pid &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;    </span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(pid &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"this is parent，%d\n"</span>,getpid());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"this is child,%d\n"</span>,getpid());        </span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;Linux下多任务介绍&quot;&gt;&lt;a href=&quot;#Linux下多任务介绍&quot; class=&quot;headerlink&quot; title=&quot;Li
      
    
    </summary>
    
      <category term="Linux" scheme="https://LiuZiQiao.github.io/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>Ubuntu18.04安装教程</title>
    <link href="https://LiuZiQiao.github.io/2018/10/15/Ubuntu18-04%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/"/>
    <id>https://LiuZiQiao.github.io/2018/10/15/Ubuntu18-04安装教程/</id>
    <published>2018-10-15T12:33:18.000Z</published>
    <updated>2018-10-16T10:54:04.257Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><a id="more"></a><h3 id="Ubuntu"><a href="#Ubuntu" class="headerlink" title="Ubuntu"></a>Ubuntu</h3><p>Ubuntu 叫法很多（友帮拓、优班图、乌班图），是一个一琢磨应用为主的开源GUN/Linux操作系统，接下来记录了在VMware Workstation Pro 中安装Ubuntu 18.04</p><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><h4 id="下载安装VMware虚拟机"><a href="#下载安装VMware虚拟机" class="headerlink" title="下载安装VMware虚拟机"></a>下载安装VMware虚拟机</h4><p>VMware下载地址：<a href="https://www.vmware.com/cn/products/workstation-pro/workstation-pro-evaluation.html" target="_blank" rel="noopener">https://www.vmware.com/cn/products/workstation-pro/workstation-pro-evaluation.html</a><br>安装过程中可能会出现需要激活，这里有我用的激活码<br>链接：<a href="https://pan.baidu.com/s/1VzC5w_Ini4SU0TwpC87Geg" target="_blank" rel="noopener">https://pan.baidu.com/s/1VzC5w_Ini4SU0TwpC87Geg</a><br>提取码：nhom<br>安装完毕之后</p><h4 id="下载Ubuntu-18-04LTS"><a href="#下载Ubuntu-18-04LTS" class="headerlink" title="下载Ubuntu 18.04LTS"></a>下载Ubuntu 18.04LTS</h4><p>进入官网：<a href="https://www.ubuntu.com/" target="_blank" rel="noopener">https://www.ubuntu.com/</a><br>或者直接进入下载页面：<a href="https://www.ubuntu.com/download/desktop" target="_blank" rel="noopener">https://www.ubuntu.com/download/desktop</a><br>选择相应的版本进行下载</p><h3 id="安装虚拟机"><a href="#安装虚拟机" class="headerlink" title="安装虚拟机"></a>安装虚拟机</h3><h4 id="创建新的虚拟机"><a href="#创建新的虚拟机" class="headerlink" title="创建新的虚拟机"></a>创建新的虚拟机</h4><p>1、 打开VMware Workstation<br><img src="https://img-blog.csdn.net/20180610193243886" alt="1"><br>2、选择自定义(高级)，然后下一步<br><img src="https://img-blog.csdn.net/20180610193508149" alt="2"><br>3、默认，直接下一步<br><img src="https://img-blog.csdn.net/20180610193706658" alt="3"><br>4、选择“稍后安装操作系统”，然后下一步<br><img src="https://img-blog.csdn.net/20180610193751797" alt="4"><br>5、客户机操作系统选择Linux，版本选择“Ubuntu 64”，下一步<br><img src="https://img-blog.csdn.net/20180610193904307" alt="5"><br>6、根据自身电脑情况，给虚拟机命名和指定安装位置（建议不要放在系统盘），然后下一步<br><img src="https://img-blog.csdn.net/20180610194240208" alt="6"><br>7、根据电脑配置为虚拟机配置处理器和内存大小，默认即可<br><img src="https://img-blog.csdn.net/20180610195053728" alt="7"><br><img src="https://img-blog.csdn.net/20180610195124226" alt="8"><br>8、选择网络类型默认为“使用网络地址转换(NAT)”即可，下一步<br><img src="https://img-blog.csdn.net/20180610195546393" alt="9"><br>9、选择I/O控制器类型和磁盘类型，这两步都默认选择，下一步<br><img src="https://img-blog.csdn.net/20180610195912938" alt="10"><br><img src="https://img-blog.csdn.net/20180610195933859" alt="11"><br>10、根据自身设置磁盘大小（建议60G+），选择“将虚拟磁盘存储为单个文件”，下一步<br><img src="https://img-blog.csdn.net/20180610200118583" alt="12"><br>11、选择下一步即可，然后选择“自定义硬件”<br><img src="https://img-blog.csdn.net/20180610200431726" alt="13"><br>12、弹出框中选择CD/DVD（STAT），然后在右边选择使用ISO映像文件，此时选择我们下载好的镜像文件的路径，然后点击关闭，完成即可<br><img src="https://img-blog.csdn.net/20180610201122123" alt="14"><br>13、开启虚拟机，开启过程可能会报错，如果你是第一次安装，那就需要开启电脑虚拟化支持，关机并开机，开机过程中按F10（根据自己电脑的按键，我这里是F10键），进入boss页面后找到虚拟化支持开启。重启后再进入虚拟机开启虚拟机<br><img src="https://img-blog.csdn.net/20180610201701798" alt="15"><br>14、此时你将看到下面页面，选择中文即可<br><img src="https://img-blog.csdn.net/20180610202441243" alt="16"><br>15、默认汉语，选择继续，在选择正常安装，点击继续<br><img src="https://img-blog.csdn.net/20180610203622745" alt="17"><br><img src="https://img-blog.csdn.net/20180610203856154" alt="18"><br>16、默认选项点击现在安装<br><img src="https://img-blog.csdn.net/20180610203935245" alt="19"><br>17、弹出确认框，点击继续，在默认城市，点击继续 <img src="https://img-blog.csdn.net/20180610204141526" alt="20"><br><img src="https://img-blog.csdn.net/20180610204314399" alt="21"><br>18、设置用户名和密码（建议密码设置简单6位即可，每次开机或登录将使用密码），点击继续<br><img src="https://img-blog.csdn.net/20180610204450783" alt="22"><br>19、接着进入安装界面，下面会显示安装进度<br><img src="https://img-blog.csdn.net/20180610204732619" alt="23"><br>20、接下来你可以去喝杯，因此次过程比较缓慢<br>21、安装完成后点击“现在重启”<br><img src="https://img-blog.csdn.net/20180610204836829" alt="24"><br>22、重启之后进入登录页面<br>23、然后打开浏览器检查网络是否连接成功<br><img src="https://img-blog.csdn.net/20180610210401357" alt="25"></p><h3 id="安装VMware-Tools"><a href="#安装VMware-Tools" class="headerlink" title="安装VMware Tools"></a>安装VMware Tools</h3><p>Ubuntu安装成功，你会发现VMware全屏时，Ubuntu桌面在VMware中不能全屏显示，因此我们需要安装VMware Tools 工具<br>1、此时可以点击界面底部提醒我们安装VMware Tools的弹框的“安装Tools”按钮，或者，点击VMware 导航栏上的“虚拟机”，然后在下拉框中点击“安装VMware Tools”；<br><img src="https://img-blog.csdn.net/20180610211441253" alt="26"><br>2、完成后进入Ubuntu，桌面会出现VMware Tools的光盘，点击进入其中<br><img src="https://img-blog.csdn.net/20180610211921565" alt="27"><br>3、进入后看到一个压缩文件VMwareTools-10.25-8068393.tar.gz（中间数组不同的虚拟机版本可能会不同），复制文件到主目录下面（即home 个人用户名的目录下）<br><img src="https://img-blog.csdn.net/20180610212233588" alt="28"><br><img src="https://img-blog.csdn.net/20180610212938367" alt="29"><br>4、按【Ctrl+Alt+T】调出终端命令界面，输入命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf VMware Tools-10.25-8068393.tar.gz</span><br></pre></td></tr></table></figure></p><p>然后回车，解压文件是快捷方式输入括号里的【tar -zxvf V】后按Tab 会自动补全文件名字<br><img src="https://img-blog.csdn.net/20180610213100618" alt="30"><br>5、解压完成后会出现一个vmware-tools-distrib的文件<br><img src="https://img-blog.csdn.net/20180610214634905" alt="31"><br>6、输入命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd vmware-tools-distrib</span><br></pre></td></tr></table></figure></p><p>回车后输入命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ./vmware-install.pl</span><br></pre></td></tr></table></figure></p><p>回车后输入密码，然后就开始安装，遇到yes就输入yes，其他一律回车<br>7、如图显示VMware tools安装成功<br><img src="https://img-blog.csdn.net/20180610220242127" alt="32"><br>以上就是博主整个安装Ubuntu 18.04LTS的过程</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;Ubuntu&quot;&gt;&lt;a href=&quot;#Ubuntu&quot; class=&quot;headerlink&quot; title=&quot;Ubuntu&quot;&gt;&lt;/a&gt;
      
    
    </summary>
    
      <category term="Linux" scheme="https://LiuZiQiao.github.io/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>队列实现栈</title>
    <link href="https://LiuZiQiao.github.io/2018/10/14/%E9%98%9F%E5%88%97%E5%AE%9E%E7%8E%B0%E6%A0%88/"/>
    <id>https://LiuZiQiao.github.io/2018/10/14/队列实现栈/</id>
    <published>2018-10-14T12:20:34.000Z</published>
    <updated>2018-10-14T12:59:48.442Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><a id="more"></a><h3 id="利用两个队列实现一个栈"><a href="#利用两个队列实现一个栈" class="headerlink" title="利用两个队列实现一个栈"></a>利用两个队列实现一个栈</h3><p><strong>要求：</strong><br>Push：往非空队列里插入（如果两个队列都是空，选第一个插入）</p><p>Pop：从非空队列中 move  size - 1 个元素到 空队列中，pop 剩下的一个</p><p>Top: 从非空队列中 move  size - 1 个元素到 空队列中，返回剩下的一个的值，<br>     把剩下的一个也放入另一个队列中</p><h3 id="实现部分"><a href="#实现部分" class="headerlink" title="实现部分"></a>实现部分</h3><h4 id="结构体定义"><a href="#结构体定义" class="headerlink" title="结构体定义"></a>结构体定义</h4><p>以下代码基于队列的基本操作Queue.h，关于Queue.h请自行在本博客中查找<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Queue.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">QStack</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">Queue queue1;</span><br><span class="line">Queue queue2;</span><br><span class="line">&#125;QStack;</span><br></pre></td></tr></table></figure></p><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QStackInit</span><span class="params">(QStack *pQS)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">QueueInit(&amp;(pQS-&gt;queue1));</span><br><span class="line">QueueInit(&amp;(pQS-&gt;queue2));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="销毁"><a href="#销毁" class="headerlink" title="销毁"></a>销毁</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QStackDestory</span><span class="params">(QStack *pQS)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">QueueDestroy(&amp;(pQS-&gt;queue1));</span><br><span class="line">QueueDestroy(&amp;(pQS-&gt;queue2));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QStackPush</span><span class="params">(QStack *pQS,QDataType data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Queue *pNotEmpty = &amp;(pQS-&gt;queue2);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (QueueEmpty(pNotEmpty))    <span class="comment">// 如果队列二为空，则不为空的就假设为队列一，就将队列一中的插入队列二</span></span><br><span class="line">&#123;</span><br><span class="line">pNotEmpty = &amp;(pQS-&gt;queue1);<span class="comment">//如果队列二不为空，则直接将队列一中的插入队列二</span></span><br><span class="line">&#125;</span><br><span class="line">QueuePush(pNotEmpty,data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QStackPop</span><span class="params">(QStack *pQS)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Queue *pEmpty = &amp;(pQS-&gt;queue1);</span><br><span class="line">Queue *pNotEmpty = &amp;(pQS-&gt;queue2);</span><br><span class="line"><span class="keyword">if</span> (QueueEmpty(pNotEmpty)) <span class="comment">//假设队列二是空，如果队列二空，则不空的就是队列一</span></span><br><span class="line">&#123;</span><br><span class="line">pEmpty = &amp;(pQS-&gt;queue2);</span><br><span class="line">pNotEmpty = &amp;(pQS-&gt;queue1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (QueueSize(pNotEmpty) &gt; <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">QDataType data = QueueFront(pNotEmpty);</span><br><span class="line">QueuePop(pNotEmpty);</span><br><span class="line">QueuePush(pEmpty,data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">QueuePop(pNotEmpty);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="获取压入的元素"><a href="#获取压入的元素" class="headerlink" title="获取压入的元素"></a>获取压入的元素</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">QDataType <span class="title">QStackTop</span><span class="params">(QStack *pQS)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">QDataType data;</span><br><span class="line">QDataType r;</span><br><span class="line">Queue *pEmpty = &amp;(pQS-&gt;queue1);</span><br><span class="line">Queue *pNotEmpty = &amp;(pQS-&gt;queue2);</span><br><span class="line"><span class="keyword">if</span> (QueueEmpty(pNotEmpty)) <span class="comment">//假设队列二是空，如果队列二空，则不空的就是队列一</span></span><br><span class="line">&#123;</span><br><span class="line">pEmpty = &amp;(pQS-&gt;queue2);</span><br><span class="line">pNotEmpty = &amp;(pQS-&gt;queue1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (QueueSize(pNotEmpty) &gt; <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">data = QueueFront(pNotEmpty);</span><br><span class="line">QueuePop(pNotEmpty);</span><br><span class="line">QueuePush(pEmpty,data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">r = QueueFront(pNotEmpty);</span><br><span class="line">QueuePop(pNotEmpty);</span><br><span class="line">QueuePush(pEmpty,r);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TestQStack</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">QStack qstack;</span><br><span class="line">QStackInit(&amp;qstack);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;<span class="number">9</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">QStackPush(&amp;qstack,i);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"压入第%d ,压入 %d\n"</span>,i+<span class="number">1</span>,QStackTop(&amp;qstack));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Top = %d "</span>,QStackTop(&amp;qstack));</span><br><span class="line"><span class="comment">//QStackPop(&amp;qstack);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;利用两个队列实现一个栈&quot;&gt;&lt;a href=&quot;#利用两个队列实现一个栈&quot; class=&quot;headerlink&quot; title=&quot;利用
      
    
    </summary>
    
      <category term="数据结构" scheme="https://LiuZiQiao.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="Queue" scheme="https://LiuZiQiao.github.io/tags/Queue/"/>
    
  </entry>
  
  <entry>
    <title>栈实现队列</title>
    <link href="https://LiuZiQiao.github.io/2018/10/14/%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97/"/>
    <id>https://LiuZiQiao.github.io/2018/10/14/栈实现队列/</id>
    <published>2018-10-14T12:19:07.000Z</published>
    <updated>2018-10-14T12:54:44.455Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><a id="more"></a><h3 id="结构体定义"><a href="#结构体定义" class="headerlink" title="结构体定义"></a>结构体定义</h3><p>首先我们需要引入栈文件Stack.h<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Stack.h"</span></span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*两个栈实现一个队列</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Queues</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">Stack stack1;</span><br><span class="line">Stack stack2;</span><br><span class="line">&#125;Queues;</span><br></pre></td></tr></table></figure></p><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QueuesInit</span><span class="params">(Queues *pQs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">StackInit(&amp;(pQs-&gt;stack1));</span><br><span class="line">StackInit(&amp;(pQs-&gt;stack2));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="插入元素"><a href="#插入元素" class="headerlink" title="插入元素"></a>插入元素</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QueuesPush</span><span class="params">(Queues *pQs,DataType data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">StackPush(&amp;(pQs-&gt;stack1),data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QueuesPop</span><span class="params">(Queues *pQs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (StackEmpty(&amp;(pQs-&gt;stack2)))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (!StackEmpty(&amp;(pQs-&gt;stack1)))</span><br><span class="line">&#123;</span><br><span class="line">DataType data = StackTop(&amp;(pQs-&gt;stack1));</span><br><span class="line">StackPush(&amp;(pQs-&gt;stack2),data);</span><br><span class="line">StackPop(&amp;(pQs-&gt;stack1));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">StackPop(&amp;(pQs-&gt;stack2));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="获取队列队首元素"><a href="#获取队列队首元素" class="headerlink" title="获取队列队首元素"></a>获取队列队首元素</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function">DataType <span class="title">QueuesFront</span><span class="params">(Queues *pQs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (StackEmpty(&amp;(pQs-&gt;stack2)))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> ( !StackEmpty(&amp;(pQs-&gt;stack1)))</span><br><span class="line">&#123;</span><br><span class="line">DataType data = StackTop(&amp;(pQs-&gt;stack1));</span><br><span class="line">StackPush(&amp;(pQs-&gt;stack2),data);</span><br><span class="line">StackPop(&amp;(pQs-&gt;stack1));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> StackTop(&amp;(pQs-&gt;stack2));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TestQueues</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">Queues queues;</span><br><span class="line"><span class="keyword">int</span> arr[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;;</span><br><span class="line">QueuesInit(&amp;queues);</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;<span class="number">9</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">QueuesPush(&amp;queues,arr[i]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>,QueuesFront(&amp;queues));</span><br><span class="line">QueuesPop(&amp;queues);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;结构体定义&quot;&gt;&lt;a href=&quot;#结构体定义&quot; class=&quot;headerlink&quot; title=&quot;结构体定义&quot;&gt;&lt;/a&gt;结构体
      
    
    </summary>
    
      <category term="数据结构" scheme="https://LiuZiQiao.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="Stack" scheme="https://LiuZiQiao.github.io/tags/Stack/"/>
    
  </entry>
  
  <entry>
    <title>位运算实现加减乘除</title>
    <link href="https://LiuZiQiao.github.io/2018/10/12/%E4%BD%8D%E8%BF%90%E7%AE%97%E5%AE%9E%E7%8E%B0%E5%8A%A0%E5%87%8F%E4%B9%98%E9%99%A4/"/>
    <id>https://LiuZiQiao.github.io/2018/10/12/位运算实现加减乘除/</id>
    <published>2018-10-12T15:19:54.000Z</published>
    <updated>2018-10-13T10:53:28.919Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><a id="more"></a><p>数据在计算机内存中是以二进制存储的。<br>几种常用的位运算：   </p><p>与运算&amp;： 对应位均为1时为1，其它为0。<br>或运算|： 对应位均为0时为0，其它为1。<br>异或运算^： 对应位不相同时为1，相同时为0.<br>按位取反~： 每一位取反<br>右移&gt;&gt;: 将二进制进行右移，低位丢掉，高位补零。<br>左移&lt;&lt;： 将二进制进行左移，低位补零，高位丢掉。   </p><h3 id="加"><a href="#加" class="headerlink" title="加"></a>加</h3><p>以0111 + 0101为例，观察异或运算和与运算的结果</p><blockquote><p>0111 ^ 0101 = 0010; //结果的每一位等于对应位相加模二，刚好是不带进位的加法结果。</p><p>0111 &amp; 0101 = 0101; //结果的1表示对应位相加为2，0表示对应位相加小于二，刚好是进位标识。</p></blockquote><p>又因为进位是向高位进位，也就是说如果第二位是1，则表示在计算过程中要向第三位进位，所以可以将与运算结果左移一位后和异或运算的结果做加法。<br>代码如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span>  (b == <span class="number">0</span>) ?a: add(a^b, (a&amp;b) &lt;&lt; <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">if(b == 0)</span></span><br><span class="line"><span class="comment">return a;</span></span><br><span class="line"><span class="comment">else</span></span><br><span class="line"><span class="comment">return add(a^b,(a&amp;b)&lt;&lt;1);</span></span><br><span class="line"><span class="comment">//异或结果 + 与运算结果左移一位</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="减"><a href="#减" class="headerlink" title="减"></a>减</h3><p>减法和加法相同，减去一个数相当于加上这个数的相反数，所以完全可以利用加法操作，唯一需要做的就是求出被减数的相反数。<br>求相反数的方法：每一位取反，末位加一。<br>代码如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//求n的相反数</span></span><br><span class="line"><span class="comment">//~：按位取反</span></span><br><span class="line"><span class="comment">//add：加法操作，末位加一</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">negtive</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> add(~n,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Sub</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> add(a, negtive(b));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="乘"><a href="#乘" class="headerlink" title="乘"></a>乘</h3><p>平时在笔算乘法数据都是十进制的，而抛去思维定势，把数看成是二进制，也可以进行笔算乘法，像这样<br><img src="https://img-blog.csdn.net/20170607225733749?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc2luYXRfMzUyNjEzMTU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="123"></p><p>根据算式可以知道，对于a * b，每次只需要将a左移一位乘上b的对应位，然后同上一次的结果做加法即可。<br>也就意味着当b的对应位为1时，对a左移一位然后同上一次的结果做加法。<br>如果b的对应位为0，只对a左移一位。<br>当然，上述这些运算不包括符号位，所以两个操作数都需要先转换成正数，符号需要单独考虑。对于4个字节（32位整数）来说，获取符号位只需要取出第31位的值即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取符号位，判断是正负</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getSign</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> n &gt;&gt; <span class="number">31</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 求绝对值</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">PosAbs</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (getSign(n) &amp; <span class="number">1</span>) ? negtive(n) : n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Mul</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="comment">//如果两个数符号位不相容，则结果为负</span></span><br><span class="line"><span class="keyword">int</span> flag = <span class="number">0</span>; <span class="comment">// </span></span><br><span class="line"><span class="keyword">if</span> (getSign(a) ^ getSign(b))</span><br><span class="line">flag = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">a = PosAbs(a);</span><br><span class="line">b = PosAbs(b);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (b | <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"> <span class="comment">//如果两个数符号位不相容，则结果为负</span></span><br><span class="line"><span class="keyword">if</span> (b &amp; <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">res = add(res, a);</span><br><span class="line">&#125;</span><br><span class="line">a = a &lt;&lt; <span class="number">1</span>;</span><br><span class="line">b = b &gt;&gt; <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> flag == <span class="number">1</span> ? negtive(res) : res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="除"><a href="#除" class="headerlink" title="除"></a>除</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Div</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (b == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> falg = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (getSign(a) ^ getSign(b))</span><br><span class="line">falg = <span class="number">1</span>;</span><br><span class="line">a = PosAbs(a);</span><br><span class="line">b = PosAbs(b);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (a&gt;=b)</span><br><span class="line">&#123;</span><br><span class="line">res = add(res, <span class="number">1</span>);</span><br><span class="line">a = Sub(a, b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> falg == <span class="number">1</span> ? negtive(res) : res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;数据在计算机内存中是以二进制存储的。&lt;br&gt;几种常用的位运算：   &lt;/p&gt;
&lt;p&gt;与运算&amp;amp;： 对应位均为1时为1，其它为0。&lt;b
      
    
    </summary>
    
      <category term="C/C++" scheme="https://LiuZiQiao.github.io/categories/C-C/"/>
    
    
      <category term="位运算" scheme="https://LiuZiQiao.github.io/tags/%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>Symmetric binary tree</title>
    <link href="https://LiuZiQiao.github.io/2018/10/09/%E5%AF%B9%E7%A7%B0%E4%BA%8C%E5%8F%89%E6%A0%91%E5%88%A4%E6%96%AD/"/>
    <id>https://LiuZiQiao.github.io/2018/10/09/对称二叉树判断/</id>
    <published>2018-10-08T23:40:14.000Z</published>
    <updated>2018-10-09T07:39:04.539Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><a id="more"></a><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>请实现一个函数，用来判断一颗二叉树是不是对称的。注意，如果一个二叉树同此二叉树的镜像是同样的，定义其为对称的。</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p><strong>思路：首先判断其根结点是否为空，然后判断左右结点是否对称，也就是左右结点是不是同时为空并且值相等</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">struct TreeNode &#123;</span></span><br><span class="line"><span class="comment">    int val;</span></span><br><span class="line"><span class="comment">    struct TreeNode *left;</span></span><br><span class="line"><span class="comment">    struct TreeNode *right;</span></span><br><span class="line"><span class="comment">    TreeNode(int x) :</span></span><br><span class="line"><span class="comment">            val(x), left(NULL), right(NULL) &#123;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isSymmetrical</span><span class="params">(TreeNode* pRoot)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(pRoot == <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">bool</span> res = isTreeSymmetrical(pRoot-&gt;left,pRoot-&gt;right);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isTreeSymmetrical</span><span class="params">(TreeNode* pHead1,TreeNode* pHead2)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(pHead1 == <span class="literal">NULL</span> &amp;&amp; pHead2 == <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(pHead1 == <span class="literal">NULL</span> || pHead2 == <span class="literal">NULL</span>) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>((pHead1-&gt;val == pHead2-&gt;val))</span><br><span class="line">        &#123;</span><br><span class="line">             <span class="keyword">return</span> isTreeSymmetrical(pHead1-&gt;left,pHead2-&gt;right)&amp;&amp;isTreeSymmetrical(pHead1-&gt;right,pHead2-&gt;left);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h3&gt;&lt;p&gt;请实
      
    
    </summary>
    
      <category term="每日一题" scheme="https://LiuZiQiao.github.io/categories/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
    
      <category term="二叉树" scheme="https://LiuZiQiao.github.io/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>TwoArrayIntesection</title>
    <link href="https://LiuZiQiao.github.io/2018/10/07/%20IntersectionofTwoArrays/"/>
    <id>https://LiuZiQiao.github.io/2018/10/07/ IntersectionofTwoArrays/</id>
    <published>2018-10-07T15:39:46.000Z</published>
    <updated>2018-10-08T23:50:38.683Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><a id="more"></a><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>Given two arrays, write a function to compute their intersection.</p><p>Example 1:</p><p>Input: nums1 = [1,2,2,1], nums2 = [2,2]<br>Output: [2]<br>Example 2:</p><p>Input: nums1 = [4,9,5], nums2 = [9,4,9,8,4]<br>Output: [9,4]<br>Note:</p><p>Each element in the result must be unique.<br>The result can be in any order.</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] intersection(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span>[] nums2) &#123;</span><br><span class="line">    Set&lt;Integer&gt; set1 = <span class="keyword">new</span> HashSet();</span><br><span class="line">Set&lt;Integer&gt; set2 = <span class="keyword">new</span> HashSet();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums1.length; i++) &#123;</span><br><span class="line">set1.add(nums1[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; nums2.length; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (set1.contains(nums2[j])) &#123;</span><br><span class="line">set2.add(nums2[j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span>[] num = <span class="keyword">new</span> <span class="keyword">int</span>[set2.size()];</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (Integer n : set2) &#123;</span><br><span class="line">num[i] = n;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h3&gt;&lt;p&gt;Gi
      
    
    </summary>
    
      <category term="每日一题" scheme="https://LiuZiQiao.github.io/categories/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
    
      <category term="Set" scheme="https://LiuZiQiao.github.io/tags/Set/"/>
    
  </entry>
  
  <entry>
    <title>Sum of the first n consecutive integers</title>
    <link href="https://LiuZiQiao.github.io/2018/10/06/%E6%B1%82%E5%89%8Dn%E4%B8%AA%E6%95%B0%E7%9A%84%E5%92%8C/"/>
    <id>https://LiuZiQiao.github.io/2018/10/06/求前n个数的和/</id>
    <published>2018-10-06T07:52:03.000Z</published>
    <updated>2018-10-06T07:58:35.173Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><a id="more"></a><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>For 1 + 2 + 3 +… +n, you cannot use the multiplication/division, for, while, if, else, switch, case and other keywords and conditional judgment statement (A? B, C).</p><p>该题翻译过来就是求1+2+3+…+n，要求不能使用乘除法、for、while、if、else、switch、case等关键字及条件判断语句（A?B:C）。以下是给出的C解决方案</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>**思路：让其从最后一个数开始相加，直到n为0，则加完<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//辅助函数求和保存在i中</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Sum</span><span class="params">(<span class="keyword">int</span> n )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">i = i + n;</span><br><span class="line">n--;</span><br><span class="line"><span class="keyword">return</span> Sum_Solution(n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//函数入口</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">Sum_Solution</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> n==<span class="number">0</span> ? i : Sum(n);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h3&gt;&lt;p&gt;Fo
      
    
    </summary>
    
      <category term="剑指offer" scheme="https://LiuZiQiao.github.io/categories/%E5%89%91%E6%8C%87offer/"/>
    
    
  </entry>
  
</feed>
